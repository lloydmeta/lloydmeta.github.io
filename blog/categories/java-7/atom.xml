<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Java 7 | BeachApe.]]></title>
  <link href="https://beachape.com/blog/categories/java-7/atom.xml" rel="self"/>
  <link href="https://beachape.com/"/>
  <updated>2016-04-17T03:08:00+09:00</updated>
  <id>https://beachape.com/</id>
  <author>
    <name><![CDATA[Lloyd]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[RxScala and Schwatcher]]></title>
    <link href="https://beachape.com/blog/2014/05/03/rxscala-and-schwatcher/"/>
    <updated>2014-05-03T17:44:00+09:00</updated>
    <id>https://beachape.com/blog/2014/05/03/rxscala-and-schwatcher</id>
    <content type="html"><![CDATA[<p>A couple days ago, I released v0.1.3 of <a href="https://github.com/lloydmeta/schwatcher">Schwatcher</a>, which introduces the ability to monitor events on file paths using a composable <a href="https://rx.codeplex.com/">Rx Observable</a> interface. "What does that even mean and why should you care?" is what this blog post tries to answer.</p>

<p>The original version of Schwatcher allowed you to tell a <code>MonitorActor</code> what callback you want to fire when a <a href="http://docs.oracle.com/javase/7/docs/api/java/nio/file/StandardWatchEventKinds.html">certain type of event</a> happened on a file path. This is fine and there are people out there using it in production as is. The limitation to this approach is that (at least by default), the events are difficult to treat as data and thus difficult to compose.</p>

<p>With <a href="https://rx.codeplex.com/">Rx</a>, we turn file path events into an asynchronous stream/channel. Essentially, you tell a <code>RxMonitor</code> object what path and event type you want to monitor and when an event happens, it will get pushed into its <code>observable</code> (the stream). You can then choose to filter, map, or fold over this data stream, creating new data streams. If you wish to cause side-effects, you can add one or more <code>observer</code>s to these data streams.</p>

<!-- more -->


<p><em>Note</em>: this blog post applies to v0.1.3 of Schwatcher, which uses v0.18.1 of RxScala. Future versions may introduce breaking changes that invalidate the examples in this blog post.</p>

<h2>Example</h2>

<p>Suppose we have the following directory structure:</p>

<p><code>
directory1
  - directoryFile1
</code></p>

<p>Let's set up an <code>RxMonitor</code> object to monitor for file creation and modifications events in <code>directory1</code> (note: all operations on <code>RxMonitor</code> objects are thread-safe).</p>

<p>While we're at it, let's grab the base <code>observable</code> from the monitor as well. Note that this <code>Observable</code> will, according to the <code>registerPath</code> and <code>unregisterPath</code> calls made to its parent <code>RxMonitor</code>, push all <code>EventAtPath</code>s to its <code>Observer</code>s. More on what an <code>Observer</code> is later, but for now, think of an <code>Observable</code> as a data stream and an <code>Observer</code> as an object gets pushed new objects from the <code>Observable</code> that it is, well, observing.</p>

<p>```scala
import com.beachape.filemanagement.RxMonitor
import com.beachape.filemanagement.Messages.EventAtPath
import java.nio.file.Paths
import java.nio.file.StandardWatchEventKinds._
import rx.lang.scala.Observer</p>

<p>val monitor = RxMonitor()
val observable = monitor.observable
val directory1 = Paths get "/Users/lloyd/Desktop/directory1"</p>

<p>monitor.registerPath(ENTRY_MODIFY, directory1)
monitor.registerPath(ENTRY_CREATE, directory1)
```</p>

<p>Let's create 2 more <code>Observables</code>. Let's make one called <code>createsOnly</code> that will only care about create events in the directory and another one called <code>scalaSourceCreatesOnly</code> that only cares about create events for files ending in <code>.scala</code>. <strong>Notice</strong> that we're composing here :)</p>

<p><code>scala
val createsOnly = observable.filter(_.event == ENTRY_CREATE)
val scalaSourceCreatesOnly = createsOnly.filter(_.path.toString.endsWith(".scala"))
</code>
Now, let's create some basic <code>Observers</code> that we can pass to the <code>subscribe</code> method of our new <code>Observable</code>s. An <code>Observer</code> at minimum implements an onNext function, which takes an element that will be pushed to it from the <code>Observable</code> that it subscribes to and returns nothing (<code>Unit</code>). It may optionally implement onError (a function which takes a <code>Throwable</code> as an argument and returns nothing) and onCompleted (0 argument function that is called when the <code>Observable</code> it is subscribed to is finished and will no longer send further objects):</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>attach observers (attachObservers.scala)</span> <a href='/downloads/code/scala/attachObservers.scala'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">createAndModifyObserver</span> <span class="k">=</span> <span class="nc">Observer</span><span class="o">[</span><span class="kt">EventAtPath</span><span class="o">](</span><span class="n">onNext</span> <span class="k">=</span> <span class="o">{</span> <span class="n">event</span> <span class="k">=&gt;</span> <span class="n">println</span><span class="o">(</span><span class="n">s</span><span class="s">&quot;Something was created or modified: $event&quot;</span><span class="o">)})</span>
</span><span class='line'><span class="k">val</span> <span class="n">createOnlyObserver</span> <span class="k">=</span> <span class="nc">Observer</span><span class="o">[</span><span class="kt">EventAtPath</span><span class="o">](</span><span class="n">onNext</span> <span class="k">=</span> <span class="o">{</span> <span class="n">event</span> <span class="k">=&gt;</span> <span class="n">println</span><span class="o">(</span><span class="n">s</span><span class="s">&quot;Something was created: $event&quot;</span><span class="o">)})</span>
</span><span class='line'>
</span><span class='line'><span class="n">observable</span><span class="o">.</span><span class="n">subscribe</span><span class="o">(</span><span class="n">createAndModifyObserver</span><span class="o">)</span>
</span><span class='line'><span class="n">createsOnly</span><span class="o">.</span><span class="n">subscribe</span><span class="o">(</span><span class="n">createOnlyObserver</span><span class="o">)</span>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * The same as</span>
</span><span class='line'><span class="cm"> * {{{</span>
</span><span class='line'><span class="cm"> * val createScalaOnlyObserver = Observer[EventAtPath](onNext = { event =&gt; println(s&quot;A Scala source file was created: $event&quot;)})</span>
</span><span class='line'><span class="cm"> * scalaSourceCreatesOnly.subscribe(createScalaOnlyObserver)</span>
</span><span class='line'><span class="cm"> * }}}</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * The same as declaring an Observer separately and attaching it via #subscribe (as seen above),</span>
</span><span class='line'><span class="cm"> * since Observer as a type is just a way of binding 3 different functions, onNext, onCompleted, and onError</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="n">scalaSourceCreatesOnly</span><span class="o">.</span><span class="n">subscribe</span><span class="o">(</span><span class="n">onNext</span> <span class="k">=</span> <span class="o">{</span> <span class="n">event</span> <span class="k">=&gt;</span> <span class="n">println</span><span class="o">(</span><span class="n">s</span><span class="s">&quot;A Scala source file was created: $event&quot;</span><span class="o">)})</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Now let's make stuff happen in another terminal.</p>

<p><code>bash
$ ~/Desktop/directory1: touch hello
$ ~/Desktop/directory1: echo lol &gt;&gt; hello
$ ~/Desktop/directory1: touch speedy.scala
$ ~/Desktop/directory1: echo 'println("hmm")' &gt;&gt; speedy.scala
</code></p>

<p>The following will be outputted</p>

<p><code>
Something was created or modified: EventAtPath(ENTRY_CREATE,/Users/lloyd/Desktop/directory1/hello)
Something was created: EventAtPath(ENTRY_CREATE,/Users/lloyd/Desktop/directory1/hello)
Something was created or modified: EventAtPath(ENTRY_MODIFY,/Users/lloyd/Desktop/directory1/hello)
Something was created or modified: EventAtPath(ENTRY_CREATE,/Users/lloyd/Desktop/directory1/speedy.scala)
Something was created: EventAtPath(ENTRY_CREATE,/Users/lloyd/Desktop/directory1/speedy.scala)
A Scala source file was created: EventAtPath(ENTRY_CREATE,/Users/lloyd/Desktop/directory1/speedy.scala)
Something was created or modified: EventAtPath(ENTRY_MODIFY,/Users/lloyd/Desktop/directory1/speedy.scala)
</code></p>

<p>Lastly, since we're done, let's call the <code>stop()</code> method on the <code>RxMonitor</code> object so that subscribed <code>Observers</code> are notified and we stop the underlying <code>MonitorActor</code> as well. Cleaning up is A Good Thing (TM).</p>

<p><code>scala
monitor.stop()
</code></p>

<h2>Conclusion</h2>

<p>I hope this post has demonstrated the power of using RxScala's <code>Observable</code> as an abstraction of asynchronous events into a tangible data structure, and how using it through Schwatcher might simplify the process of building your own applications. If you have any questions or spot any mistakes, please feel free to leave a comment.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Schwatcher v0.1.3 Released]]></title>
    <link href="https://beachape.com/blog/2014/05/02/schwatcher-v0-dot-1-3-released/"/>
    <updated>2014-05-02T00:10:00+09:00</updated>
    <id>https://beachape.com/blog/2014/05/02/schwatcher-v0-dot-1-3-released</id>
    <content type="html"><![CDATA[<p>Version 0.1.3 of Schwatcher has been released.</p>

<p>This version brings a new Observable interface that exposes a "stream" (or channel) of <code>EventAtPath</code>s that can be composed. Using this interface, you no longer need to register callbacks - you simply register paths and get notifications for events on them either by subscribing to the Observable or by composing.</p>

<p>For more information on how to use Observables (especially how they compose in awesome ways), checkout the <a href="https://rx.codeplex.com/">Rx homepage</a></p>

<p>Example usage:</p>

<p>```scala
import com.beachape.filemanagement.RxMonitor
import java.io.{FileWriter, BufferedWriter}</p>

<p>import java.nio.file.Paths
import java.nio.file.StandardWatchEventKinds._</p>

<p>val monitor = RxMonitor()
val observable = monitor.observable</p>

<p>val subscription = observable.subscribe(
  onNext = { p => println(s"Something was modified in a file mufufu: $p")},
  onError = { t => println(t)},
  onCompleted = { () => println("Monitor has been shut down") }
)</p>

<p>val desktopFile = Paths get "/Users/lloyd/Desktop/test"</p>

<p>monitor.registerPath(ENTRY_MODIFY, desktopFile)</p>

<p>Thread.sleep(100)</p>

<p>//modify a monitored file
val writer = new BufferedWriter(new FileWriter(desktopFile.toFile))
writer.write("Theres text in here wee!!")
writer.close</p>

<p>// #=> Something was modified in a file mufufu: /Users/lloyd/Desktop/test</p>

<p>// stop monitoring
monitor.stop()</p>

<p>// #=> Monitor has been shut down
```</p>

<p>Relevant links:
- <a href="https://github.com/lloydmeta/schwatcher">Github page with how to install and example usage</a>
- <a href="https://github.com/lloydmeta/schwatcher/releases/tag/v0.1.3">Release page</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Schwatcher v0.1.0 Released]]></title>
    <link href="https://beachape.com/blog/2014/03/06/schwatcher-v0-dot-1-0-released/"/>
    <updated>2014-03-06T21:45:00+09:00</updated>
    <id>https://beachape.com/blog/2014/03/06/schwatcher-v0-dot-1-0-released</id>
    <content type="html"><![CDATA[<p>Version 0.1.0 of Schwatcher has been released.</p>

<p>Changes:</p>

<ul>
<li>Thanks to <a href="https://github.com/lloydmeta/schwatcher/pull/31">this pull request</a> from <a href="https://github.com/georgeOsdDev">georgeOsdDev</a>, modifiers can be used when registering callbacks</li>
<li>Upgrade to 2.3.0 of Akka</li>
</ul>


<p>Relevent info:</p>

<ul>
<li><a href="https://github.com/lloydmeta/schwatcher">Schwatcher Github repo</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Schwatcher v0.0.7 Released]]></title>
    <link href="https://beachape.com/blog/2013/12/04/schwatcher-v0-dot-0-7-released/"/>
    <updated>2013-12-04T21:18:00+09:00</updated>
    <id>https://beachape.com/blog/2013/12/04/schwatcher-v0-dot-0-7-released</id>
    <content type="html"><![CDATA[<p>Version 0.0.7 of Schwatcher has been released.</p>

<p>Changes:</p>

<ul>
<li>No longer has external logging library dependencies. Thanks <a href="https://github.com/crdueck">crdueck</a> for the suggestion.</li>
<li>No longer uses any mutable members for extra thread-safety</li>
</ul>


<p>Relevent info:</p>

<ul>
<li><a href="https://github.com/lloydmeta/schwatcher">Schwatcher Github repo</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Schwatcher v0.0.4 Released]]></title>
    <link href="https://beachape.com/blog/2013/10/21/schwatcher-v0-dot-0-4-released/"/>
    <updated>2013-10-21T09:08:00+09:00</updated>
    <id>https://beachape.com/blog/2013/10/21/schwatcher-v0-dot-0-4-released</id>
    <content type="html"><![CDATA[<p>Version 0.0.4 of Schwatcher has been released.</p>

<p>Changes:</p>

<ul>
<li>No longer uses Akka Agent to hold CallbackRegistry (thanks crdueck). This should result in a small performance increase because of more 'direct' memory access inside MonitorActor.</li>
<li>Refactored testing for better coverage and maintainability</li>
<li>Scala 2.10.3 support in testing</li>
</ul>


<p>Relevent info:</p>

<ul>
<li><a href="https://github.com/lloydmeta/schwatcher">Schwatcher Github repo</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
