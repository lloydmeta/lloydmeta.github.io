<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Maven | BeachApe.]]></title>
  <link href="https://beachape.com/blog/categories/maven/atom.xml" rel="self"/>
  <link href="https://beachape.com/"/>
  <updated>2016-03-05T18:45:13+09:00</updated>
  <id>https://beachape.com/</id>
  <author>
    <name><![CDATA[Lloyd]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Introducing Metascraper - a Scala Library for Scraping Page Metadata]]></title>
    <link href="https://beachape.com/blog/2013/09/05/introducing-metascraper-a-scala-library-for-scraping-page-metadata/"/>
    <updated>2013-09-05T10:26:00+09:00</updated>
    <id>https://beachape.com/blog/2013/09/05/introducing-metascraper-a-scala-library-for-scraping-page-metadata</id>
    <content type="html"><![CDATA[<p>Scraping metadata (e.g. <code>title</code>, <code>description</code>, <code>url</code>, etc.) from a URL is something that <a href="https://www.facebook.com/">Facebook</a> currently does for you when you paste a URL into the "Update Status" box. For a service that I'm currently building out, we wanted to do this as well for our users. Thus <a href="https://github.com/lloydmeta/metascraper">Metascraper</a> was born.</p>

<p>There was already a Ruby solution called <a href="https://github.com/gottfrois/link_thumbnailer">link_thumbnailer</a>, but since this is a I/O heavy operation, I knew I wanted to build a solution using tools that supported non-blocking I/O and could be used without getting caught in callback spaghetti. Scala, Akka, and the Play framework immediately came to mind.</p>

<!-- more -->


<h2>Existing solutions</h2>

<p>Before I started building my own solution, I did some research and found that there were already some web-scraping solutions written in Scala or Java, such as <a href="https://github.com/ofrasergreen/chafed">chafed</a>, and some more listed in <a href="http://stackoverflow.com/questions/14745634/web-scraping-with-scala">this StackOverflow question</a>.</p>

<p>I wanted something more focused, something that would "intelligently" return a page's title, description, urls, and images back. I also wanted to make sure that if the page implemented the <a href="http://ogp.me/">Open Graph Protocol</a>, the information from those tags got prioritised. Since these requirements were not being fulfilled by existing Scala libraries, I set about creating my own Scala library.</p>

<h2>Metascraper Components</h2>

<p>The main components of the Metascraper library include:</p>

<ol>
<li><a href="http://akka.io/">Akka actors</a></li>
<li><a href="http://jsoup.org/">jsoup</a>: While there were Scala web scrapers, the Java solution, jsoup, was very mature and easy to use.</li>
</ol>


<h2>Basic workflow (a.k.a. how to use)</h2>

<p>This post won't go over in too much detail how to use the library because that stuff is available from the <a href="https://github.com/lloydmeta/metascraper">Metascraper Github page</a> and will probably change over time, but this is the basic workflow:</p>

<ol>
<li>Instantiate a <code>ScraperActor</code></li>
<li>Send a message to the scraper with <code>ScrapeUrl(url: String)</code></li>
<li>When scraping is done, the actor will reply with a <code>Either[FailedToScrapeUrl,ScrapedData]</code></li>
</ol>


<p>The project is Mavenised and is availale from the Central Repository, so simply add the <code>libraryDependency</code> in your <code>build.sbt</code> (when you read this the versioning might be different so refer to the project's Github page):</p>

<p><code>scala
libraryDependencies += "com.beachape.metascraper" %% "metascraper" % "0.0.2"
</code></p>

<p>And to use it,</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Metascraper example code (metascraper_example.scala)</span> <a href='/downloads/code/scala/metascraper_example.scala'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">import</span> <span class="nn">akka.actor.ActorSystem</span>
</span><span class='line'><span class="k">import</span> <span class="nn">com.beachape.metascraper.Messages._</span>
</span><span class='line'><span class="k">import</span> <span class="nn">com.beachape.metascraper.ScraperActor</span>
</span><span class='line'><span class="k">import</span> <span class="nn">scala.concurrent.Await</span>
</span><span class='line'><span class="k">import</span> <span class="nn">akka.pattern.ask</span>
</span><span class='line'><span class="k">import</span> <span class="nn">akka.util.Timeout</span>
</span><span class='line'><span class="k">import</span> <span class="nn">scala.concurrent.duration._</span>
</span><span class='line'>
</span><span class='line'><span class="k">implicit</span> <span class="k">val</span> <span class="n">timeout</span> <span class="k">=</span> <span class="nc">Timeout</span><span class="o">(</span><span class="mi">30</span> <span class="n">seconds</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">implicit</span> <span class="k">val</span> <span class="n">system</span> <span class="k">=</span> <span class="nc">ActorSystem</span><span class="o">(</span><span class="s">&quot;actorSystem&quot;</span><span class="o">)</span>
</span><span class='line'><span class="k">implicit</span> <span class="k">val</span> <span class="n">dispatcher</span> <span class="k">=</span> <span class="n">system</span><span class="o">.</span><span class="n">dispatcher</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="n">scraperActor</span> <span class="k">=</span> <span class="n">system</span><span class="o">.</span><span class="n">actorOf</span><span class="o">(</span><span class="nc">ScraperActor</span><span class="o">())</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">future</span> <span class="k">&lt;-</span> <span class="n">ask</span><span class="o">(</span><span class="n">scraperActor</span><span class="o">,</span> <span class="nc">ScrapeUrl</span><span class="o">(</span><span class="s">&quot;https://bbc.co.uk&quot;</span><span class="o">)).</span><span class="n">mapTo</span><span class="o">[</span><span class="kt">Either</span><span class="o">[</span><span class="kt">FailedToScrapeUrl</span>,<span class="kt">ScrapedData</span><span class="o">]]</span>
</span><span class='line'><span class="o">}</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">future</span> <span class="k">match</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="nc">Left</span><span class="o">(</span><span class="n">failed</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">println</span><span class="o">(</span><span class="s">&quot;Failed: &quot;</span><span class="o">)</span>
</span><span class='line'>      <span class="n">println</span><span class="o">(</span><span class="n">failed</span><span class="o">.</span><span class="n">message</span><span class="o">)</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">case</span> <span class="nc">Right</span><span class="o">(</span><span class="n">data</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">println</span><span class="o">(</span><span class="s">&quot;Image urls&quot;</span><span class="o">)</span>
</span><span class='line'>      <span class="n">data</span><span class="o">.</span><span class="n">imageUrls</span><span class="o">.</span><span class="n">foreach</span><span class="o">(</span><span class="n">println</span><span class="o">)</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> #=&gt;</span>
</span><span class='line'><span class="cm">  Image URLs:</span>
</span><span class='line'><span class="cm">  http://www.bbc.co.uk/img/iphone.png</span>
</span><span class='line'><span class="cm">  http://sa.bbc.co.uk/bbc/bbc/s?name=SET-COUNTER&amp;pal_route=index&amp;ml_name=barlesque&amp;app_type=web&amp;language=en-GB&amp;ml_version=0.16.1&amp;pal_webapp=wwhp&amp;blq_s=3.5&amp;blq_r=3.5&amp;blq_v=default-worldwide</span>
</span><span class='line'><span class="cm">  http://static.bbci.co.uk/frameworks/barlesque/2.51.2/desktop/3.5/img/blq-blocks_grey_alpha.png</span>
</span><span class='line'><span class="cm">  http://static.bbci.co.uk/frameworks/barlesque/2.51.2/desktop/3.5/img/blq-search_grey_alpha.png</span>
</span><span class='line'><span class="cm">  http://news.bbcimg.co.uk/media/images/69612000/jpg/_69612953_69612952.jpg</span>
</span><span class='line'><span class="cm">*/</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>Example application</h2>

<p>I've created an example Play2 application that integrates this library, called <a href="https://github.com/lloydmeta/metascraper-service">metascraper-service</a>. Feel free to take a look !</p>

<h2>Conclusion</h2>

<p>Please give <a href="https://github.com/lloydmeta/metascraper">Metascraper</a> a test drive and submit issues and pull requests !</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introducing Schwatcher]]></title>
    <link href="https://beachape.com/blog/2013/07/23/introducing-schwatcher/"/>
    <updated>2013-07-23T07:55:00+09:00</updated>
    <id>https://beachape.com/blog/2013/07/23/introducing-schwatcher</id>
    <content type="html"><![CDATA[<p>The <a href="http://docs.oracle.com/javase/7/docs/api/java/nio/file/WatchService.html">WatchService</a> was added as part of Java 7 and introduced the ability to monitor files through the JVM without the use of external libraries like <a href="http://jnotify.sourceforge.net/">JNotify</a> that require installing native libraries. Using this API for a project that requires monitoring files makes handling dependencies for both deployment and development much simpler.</p>

<p>Since Scala is able to directly invoke Java, I wanted to use this API when I was building <a href="https://github.com/lloydmeta/akanori-thrift">Akanori-thrift</a>, a trending-words detection service that is focused on the Japanese language. This post will not go over that service in detail (that will take up an entire post of its own if not more) but my use-case there was monitor a custom dictionary file for updates and then spawn a new instance of the <code>Tokenizer</code> that uses the updated state of the file.</p>

<p>I quickly realised a few pain-points:</p>

<ol>
<li>There existed no file monitoring Scala library (at the time),</li>
<li>Using the WatchService API requires the use of a blocking thread to get events,</li>
<li>The WatchService API does not have recursive monitoring support built in</li>
</ol>


<p>To address these, I set out to create <a href="https://github.com/lloydmeta/schwatcher">Schwatcher</a>, a Scala library that wraps the WatchService API of Java7 and allows callbacks to be registered and unregistered on both directories and files both as individual paths and recursively. Furthermore, I wanted to facilitate the use of the Java7 API in Scala in a simple way that is in line with the functional programming paradigm.</p>

<!-- more -->


<h2>Components</h2>

<p>The main components of the Schwatcher library include:</p>

<ol>
<li><a href="http://akka.io/">Akka actors</a>: While I was building <a href="https://github.com/lloydmeta/akanori-thrift">Akanori-thrift</a>, I already knew that I wanted to use Akka actors as an abstraction of concurrency for their resilience and concurrency control tools (<a href="http://doc.akka.io/docs/akka/2.1.4/scala/agents.html">Agents</a> in particular).</li>
<li>Threads: After reading <a href="http://java.dzone.com/articles/watchservice-combined-akka">this awesome blog post</a> on how to use Akka actors with Watchservice by encapsulating the blocking loop in a thread via Runnable, I knew I wanted to use this pattern for Schwatcher.</li>
<li>CallbackRegistry: A callback registry that maps paths to a list of callback functions that get called when the Java 7 service signals that an event has occured on a specific path.</li>
</ol>


<h2>Basic workflow (a.k.a. how to use)</h2>

<p>This post won't go over in too much detail how to use the library because that stuff is available from the <a href="https://github.com/lloydmeta/schwatcher">Schwatcher Github page</a> and will probably change over time, but this is the basic workflow:</p>

<ol>
<li>Instantiate a <code>MonitorActor</code></li>
<li>Register callbacks by sending <code>RegisterCallback</code> messages to the MonitorActor and passing in a path with an <a href="http://docs.oracle.com/javase/7/docs/api/java/nio/file/StandardWatchEventKinds.html">event type</a>.</li>
<li>Carry on, as your callbacks will be called when events happen</li>
</ol>


<p>The project is Mavenised and is availale from the Central Repository, so simply add the <code>libraryDependency</code> in your <code>build.sbt</code> (when you read this the versioning might be different so refer to the project's Github page):</p>

<p><code>scala
libraryDependencies += "com.beachape.filemanagement" %% "schwatcher" % "0.0.2"
</code></p>

<p>And to use it,</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Schwatcher example code (schwatcher_example.scala)</span> <a href='/downloads/code/scala/schwatcher_example.scala'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">import</span> <span class="nn">akka.actor.ActorSystem</span>
</span><span class='line'><span class="k">import</span> <span class="nn">com.beachape.filemanagement.MonitorActor</span>
</span><span class='line'><span class="k">import</span> <span class="nn">com.beachape.filemanagement.RegistryTypes._</span>
</span><span class='line'><span class="k">import</span> <span class="nn">com.beachape.filemanagement.Messages._</span>
</span><span class='line'>
</span><span class='line'><span class="k">import</span> <span class="nn">java.io.</span><span class="o">{</span><span class="nc">FileWriter</span><span class="o">,</span> <span class="nc">BufferedWriter</span><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">import</span> <span class="nn">java.nio.file.Paths</span>
</span><span class='line'><span class="k">import</span> <span class="nn">java.nio.file.StandardWatchEventKinds._</span>
</span><span class='line'>
</span><span class='line'><span class="k">implicit</span> <span class="k">val</span> <span class="n">system</span> <span class="k">=</span> <span class="nc">ActorSystem</span><span class="o">(</span><span class="s">&quot;actorSystem&quot;</span><span class="o">)</span>
</span><span class='line'><span class="k">val</span> <span class="n">fileMonitorActor</span> <span class="k">=</span> <span class="n">system</span><span class="o">.</span><span class="n">actorOf</span><span class="o">(</span><span class="nc">MonitorActor</span><span class="o">(</span><span class="n">concurrency</span> <span class="k">=</span> <span class="mi">2</span><span class="o">))</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="n">modifyCallbackFile</span><span class="k">:</span> <span class="kt">Callback</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">path</span> <span class="k">=&gt;</span> <span class="n">println</span><span class="o">(</span><span class="n">s</span><span class="s">&quot;Something was modified in a file: $path&quot;</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="k">val</span> <span class="n">modifyCallbackDirectory</span><span class="k">:</span> <span class="kt">Callback</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">path</span> <span class="k">=&gt;</span> <span class="n">println</span><span class="o">(</span><span class="n">s</span><span class="s">&quot;Something was modified in a directory: $path&quot;</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="n">desktop</span> <span class="k">=</span> <span class="nc">Paths</span> <span class="n">get</span> <span class="s">&quot;/Users/lloyd/Desktop&quot;</span>
</span><span class='line'><span class="k">val</span> <span class="n">desktopFile</span> <span class="k">=</span> <span class="nc">Paths</span> <span class="n">get</span> <span class="s">&quot;/Users/lloyd/Desktop/test&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">  This will receive callbacks for just the one file</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="n">fileMonitorActor</span> <span class="o">!</span> <span class="nc">RegisterCallback</span><span class="o">(</span>
</span><span class='line'>  <span class="nc">ENTRY_MODIFY</span><span class="o">,</span>
</span><span class='line'>  <span class="n">recursive</span> <span class="k">=</span> <span class="kc">false</span><span class="o">,</span>
</span><span class='line'>  <span class="n">path</span> <span class="k">=</span> <span class="n">desktopFile</span><span class="o">,</span>
</span><span class='line'>  <span class="n">modifyCallbackFile</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">  If desktopFile is modified, this will also receive a callback</span>
</span><span class='line'><span class="cm">  it will receive callbacks for everything under the desktop directory</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'><span class="n">fileMonitorActor</span> <span class="o">!</span> <span class="nc">RegisterCallback</span><span class="o">(</span>
</span><span class='line'>  <span class="nc">ENTRY_MODIFY</span><span class="o">,</span>
</span><span class='line'>  <span class="n">recursive</span> <span class="k">=</span> <span class="kc">false</span><span class="o">,</span>
</span><span class='line'>  <span class="n">path</span> <span class="k">=</span> <span class="n">desktop</span><span class="o">,</span>
</span><span class='line'>  <span class="n">modifyCallbackDirectory</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">//modify a monitored file</span>
</span><span class='line'><span class="k">val</span> <span class="n">writer</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">BufferedWriter</span><span class="o">(</span><span class="k">new</span> <span class="nc">FileWriter</span><span class="o">(</span><span class="n">desktopFile</span><span class="o">.</span><span class="n">toFile</span><span class="o">))</span>
</span><span class='line'><span class="n">writer</span><span class="o">.</span><span class="n">write</span><span class="o">(</span><span class="s">&quot;Theres text in here wee!!&quot;</span><span class="o">)</span>
</span><span class='line'><span class="n">writer</span><span class="o">.</span><span class="n">close</span><span class="o">()</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// #=&gt; Something was modified in a file: /Users/a13075/Desktop/test.txt</span>
</span><span class='line'><span class="c1">//     Something was modified in a directory: /Users/a13075/Desktop/test.txt</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>Behind the scenes workflow</h2>

<p>A few things happen behind the scenes (accurate at time of writing):</p>

<ol>
<li>Upon the <code>MonitorActor</code>  's instantiation, a private <code>WatchServiceTask</code> <code>Runnable</code> object is created and its accompanying <code>WatchService</code> thread (the blocking thread that takes events from the Java 7 WatchService) is started. The <code>MonitorActor</code> is in charge of keeping tabs (starting and stopping) the <code>WatchService</code> thread.</li>
<li>The <code>MonitorActor</code> also instantiates a <code>Map</code> of type <code>[EventType, Agent[CallbackRegistry]]</code>. <code>CallbackRegistry</code> objects are themselves Maps of type <code>[Path, List[Path =&gt; Unit]]</code> and are immutable. The callbacks are put inside an <code>Agent</code> to assure atomic concurrent updates.</li>
<li>When registering a <code>Path</code> and file system event type with a <code>Callback</code> function, a <code>RegisterCallback</code> message is sent to the MonitorActor and the <code>MonitorActor</code> sends an update message on the <code>Agent</code> containing the <code>CallbackRegistry</code> for that event type. Adding callback functions or paths to a <code>CallbackRegistry</code> creates a new one containing the (new) path and its new accompanying <code>List[Callback]</code> while leaving the old one untouched. Un-registering a path's callbacks work the same way (but in reverse).</li>
<li>If <code>recursive</code> is set to <code>true</code> in the <code>RegisterCallback</code> or <code>UnRegisterCallback</code> messages, then the path's tree is walked and each directory is registered with callbacks as long as the initial path given is that of a directory.</li>
<li>When an event is picked up from the Java 7 WatchService within the <code>WatchService</code> thread (mentioned in 1), a <code>EventAtPath</code> message is sent from that thread its parent <code>MonitorActor</code>, containing the event type and the path of the event.</li>
<li>The <code>MonitorActor</code> receives the <code>EventAtPath</code> message and looks up the proper list of callbacks for the event type and path and sends each callback packaged inside <code>PerformCallback</code> messages to it's pool of <code>CallbackActor</code>s via a <code>SmallestMailbox</code> router. Thus, callbacks are handled concurrently (or, if desired, one at a time by sending <code>MonitorActor</code>'s <code>concurrency</code> parameter to 1 when instantiating it)</li>
</ol>


<h2>Conclusion</h2>

<p>Hopefully, <a href="https://github.com/lloydmeta/schwatcher">Schwatcher</a> is useful for Scala developers looking to monitor the file system. Questions, pull requests, feedback are greatly appreciated !</p>

<h2>Publishing to Maven</h2>

<p>As a side-note, when publishing this library to Maven via Sonatype, I found the following links very helpful:</p>

<ol>
<li><a href="http://www.scala-sbt.org/0.12.3/docs/Community/Using-Sonatype.html">Offical Scala-sbt's guide to Deploying to Sonatype</a></li>
<li><a href="https://docs.sonatype.org/display/Repository/Sonatype+OSS+Maven+Repository+Usage+Guide">Sonatype OSS Maven Repository usage guide</a></li>
</ol>

]]></content>
  </entry>
  
</feed>
