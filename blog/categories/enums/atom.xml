<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Enums | BeachApe.]]></title>
  <link href="https://beachape.com/blog/categories/enums/atom.xml" rel="self"/>
  <link href="https://beachape.com/"/>
  <updated>2024-01-02T05:33:49+00:00</updated>
  <id>https://beachape.com/</id>
  <author>
    <name><![CDATA[Lloyd]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Enumeratum 1.4: ValueEnums + Circe]]></title>
    <link href="https://beachape.com/blog/2016/04/16/enumeratum-1-dot-4-valueenums-plus-circe/"/>
    <updated>2016-04-16T16:25:00+00:00</updated>
    <id>https://beachape.com/blog/2016/04/16/enumeratum-1-dot-4-valueenums-plus-circe</id>
    <content type="html"><![CDATA[<p>It’s been a while since the last major release of <a href="https://github.com/lloydmeta/enumeratum">Enumeratum</a>, and in 1.4.0, minor changes include Play 2.5 support, integration library version bumps, and small internal refactorings. More excitingly though, the latest version adds support for a new kind of enumeration, <code>ValueEnum</code>, as well as an integration with the <a href="https://github.com/travisbrown/circe">Circe JSON library</a>.</p>

<p>Points of interest:</p>

<ul>
  <li>Unlike other value enum implementations, Enumeration’s value enums perform uniqueness checks at compile time to make sure you have unique values across your enum members.</li>
  <li>Circe integration allows you to send and receive JSON data between your front end and your server using the same code</li>
</ul>

<p><img class="center /images/abc-123.gif  400 400  ‘Enumeratum: Enums as easy as ABC" src="<em>and</em>" width="123"></p>

<!-- more -->

<p>The <a href="https://github.com/lloydmeta/enumeratum/releases/tag/v1.4.0">1.4.0 release page</a> on Github has a more detailed list of changes, but we’ll specifically go through:</p>

<ol>
  <li><a href="#valueenums">ValueEnums</a></li>
  <li><a href="#circe-integration">Circe Integration</a></li>
</ol>

<h2 id="valueenums">ValueEnums</h2>

<p>What is a <code>ValueEnum</code>? It’s an enum that represents a primitive value  (e.g. <code>Int</code>, <code>Long</code>, <code>Short</code>) instead of a <code>String</code>. I may have just made up the term, but it doesn’t matter as long as you know what I mean.</p>

<p>```scala</p>

<p>// Have something like
object ContentType {
  case object Text(1)
  case object Image(3)
}</p>

<p>// Want to do
assert(ContentType.withValue(3) == ContentType.Image)
```</p>

<p>This may sound mundane, since you can already build something like this yourself with the standard library’s <code>Enumeration</code> (or  previous versions of Enumeratum ), but sometimes the most straightforward solutions are suboptimal.</p>

<h3 id="the-trouble-with-enumeration">The trouble with <code>Enumeration</code></h3>

<p>The standard lib’s <code>Enumeration</code> comes with the notion of a customisable <code>id: Int</code> on each member, which is a great starting point for implementing numbers-based enumerations.</p>

<p>```scala
/**
  * This is an anti-example to show what can go wrong.
  *
  * Do not use this
  */
object Things extends Enumeration {
  val First = Value(1)
  val Second = Value(2)
  val Third = Value(3)
  val Fourth = Value(3) // not enough coffeeeeee</p>

<p>def withValueOpt(i: Int): Option[Things.Value] = values.find(_.id == i)
}</p>

<p>/*
 *  The above Enumeration will compile. Fine, but imagine now your app is deployed
 *  and somewhere else in your code you have to actually use your enum.
 */</p>

<p>Things.First // =&gt; java.lang.AssertionError: assertion failed: Duplicate id: 3</p>

<p>// If at first you don’t succeed???
Things.First // =&gt; java.lang.NoClassDefFoundError: Could not initialize class Things$
// newp
```</p>

<p>This funny behaviour is caused by the fact that <code>Enumeration#Value</code>s (<code>First</code>, <code>Second</code>, <code>Third</code>, <code>Fourth</code>) are not checked for unique ids at compile time, and are instantiated when their outer <code>Enumeration</code> object is lazily instantiated.  When a <code>Value</code> is instantiated, its <code>id</code> is stuffed into a <code>HashMap[Int, Value]</code> after an assertion check that the id does not already exist in the map.</p>

<p>What has happend in the above example is the enumeration code compiles, but when we call <code>Things.First</code>, <code>object Things</code> gets instantiated, and throws an assertion error when <code>val Fourth</code> is being instantiated with an id of 3, which has already been assigned to <code>Third</code> and thus is already in the aforementioned <code>HashMap</code>.  This prevents the singleton <code>Things</code> from getting instantiated, and the next time you try to use it, Scala will throw a <code>NoClassDefFoundError</code>.</p>

<p>One way to work around this is to write tests for every such <code>Enumeration</code> to make sure that no one working in the code base has fat-fingered any ids. I’m a big proponent of writing tests, but tests are also code and come with a maintenance and cognitive cost, so I would prefer not having to write tests to make sure my simple value enums can be safely initialised.</p>

<p>This kind of problem is not limited to <code>Enumeration</code>: careless implementation of something similar may result in arguably freakier outcomes such as silent failures (2 members with the same value but only one of the members can be retrieved by value).</p>

<h3 id="valueenum"><code>ValueEnum</code></h3>

<p>In version 1.4.0 of Enumeratum, we’ve introduced 3 pairs of traits: <code>IntEnum</code> and <code>IntEnumEntry</code>, <code>LongEnum</code> and <code>LongEnumEntry</code>, and <code>ShortEnum</code> and <code>ShortEnumEntry</code>.  As their names suggest, these are value enum traits that allow you to create enums that are backed by <code>Int</code>, <code>Long</code> and <code>Short</code> respectively.  Each pair extends <code>ValueEnum</code> and <code>ValueEnumEntry</code>. Note that this class hierarchy is a bit extensive for now, and it may be more streamlined in the future.</p>

<p>This is an example of how you would create an <code>Long</code> based value enum with Play integration (JSON readers and writers, Query string binders, Path binders, Form formatters, etc):</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>ContentType value enum with full Play integration (ContentType.scala)</span> <a href='/downloads/code/scala/ContentType.scala'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">import</span> <span class="nn">enumeratum.values._</span>
</span><span class='line'>
</span><span class='line'><span class="k">sealed</span> <span class="k">abstract</span> <span class="k">class</span> <span class="nc">ContentType</span><span class="o">(</span><span class="k">val</span> <span class="n">value</span><span class="k">:</span> <span class="kt">Long</span><span class="o">,</span> <span class="n">name</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="k">extends</span> <span class="nc">LongEnumEntry</span>
</span><span class='line'>
</span><span class='line'><span class="k">case</span> <span class="k">object</span> <span class="nc">ContentType</span> <span class="k">extends</span> <span class="nc">LongPlayEnum</span><span class="o">[</span><span class="kt">ContentType</span><span class="o">]</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">val</span> <span class="n">values</span> <span class="k">=</span> <span class="n">findValues</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">case</span> <span class="k">object</span> <span class="nc">Text</span> <span class="k">extends</span> <span class="nc">ContentType</span><span class="o">(</span><span class="n">value</span> <span class="k">=</span> <span class="mi">1L</span><span class="o">,</span> <span class="n">name</span> <span class="k">=</span> <span class="s">&quot;text&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="k">case</span> <span class="k">object</span> <span class="nc">Image</span> <span class="k">extends</span> <span class="nc">ContentType</span><span class="o">(</span><span class="n">value</span> <span class="k">=</span> <span class="mi">2L</span><span class="o">,</span> <span class="n">name</span> <span class="k">=</span> <span class="s">&quot;image&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="k">case</span> <span class="k">object</span> <span class="nc">Video</span> <span class="k">extends</span> <span class="nc">ContentType</span><span class="o">(</span><span class="n">value</span> <span class="k">=</span> <span class="mi">3L</span><span class="o">,</span> <span class="n">name</span> <span class="k">=</span> <span class="s">&quot;video&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="k">case</span> <span class="k">object</span> <span class="nc">Audio</span> <span class="k">extends</span> <span class="nc">ContentType</span><span class="o">(</span><span class="n">value</span> <span class="k">=</span> <span class="mi">4L</span><span class="o">,</span> <span class="n">name</span> <span class="k">=</span> <span class="s">&quot;audio&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="cm">/* case object Sticker extends ContentType(value = 4L, name = &quot;audio&quot;)</span>
</span><span class='line'><span class="cm">  *   =&gt; Fails at compile time because 4L is already used with the following error</span>
</span><span class='line'><span class="cm">  *   It does not look like you have unique values. Found the following values correspond to more than one members: Map(4 -&gt; List(object Audio, object Sticker))</span>
</span><span class='line'><span class="cm">  */</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">assert</span><span class="o">(</span><span class="nc">ContentType</span><span class="o">.</span><span class="n">withValue</span><span class="o">(</span><span class="mi">1</span><span class="o">)</span> <span class="o">==</span> <span class="nc">ContentType</span><span class="o">.</span><span class="nc">Text</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="nc">ContentType</span><span class="o">.</span><span class="n">withValue</span><span class="o">(</span><span class="mi">10</span><span class="o">)</span> <span class="c1">// =&gt; java.util.NoSuchElementException:</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Use with Play-JSON</span>
</span><span class='line'><span class="k">import</span> <span class="nn">play.api.libs.json.</span><span class="o">{</span> <span class="nc">JsNumber</span><span class="o">,</span> <span class="nc">JsString</span><span class="o">,</span> <span class="nc">Json</span> <span class="k">=&gt;</span> <span class="nc">PlayJson</span> <span class="o">}</span>
</span><span class='line'><span class="nc">ContentType</span><span class="o">.</span><span class="n">values</span><span class="o">.</span><span class="n">foreach</span> <span class="o">{</span> <span class="n">item</span> <span class="k">=&gt;</span>
</span><span class='line'>    <span class="n">assert</span><span class="o">(</span><span class="nc">PlayJson</span><span class="o">.</span><span class="n">toJson</span><span class="o">(</span><span class="n">item</span><span class="o">)</span> <span class="o">==</span> <span class="nc">JsNumber</span><span class="o">(</span><span class="n">item</span><span class="o">.</span><span class="n">value</span><span class="o">))</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The <code>findValues</code> method of <code>ValueEnum</code>s works similarly to the <code>findValues</code> method of Enumeratum’s older <code>Enum</code>, except the macro will ensure that there is a literal <code>value</code> member or constructor for each enum entry and fails the compilation if more than one member shares the same value.</p>

<p>As the above example demonstrates, there are Play (and standalone Play-JSON) integrations available for this new kind of enum, as well as for UPickle, and Circe.</p>

<p>~~Note that this new feature is not yet available in Scala 2.10 and in the REPL due to Macro expansion differences~~ (update: now works in the REPL <em>and</em> is available for 2.10.x!).</p>

<h2 id="circe-integration">Circe integration</h2>

<p>Enumeratum 1.4.0 also adds support for serialising/deserialising to JSON using <a href="https://github.com/travisbrown/circe">Circe</a>, an up-and-coming performant and feature-filled JSON library published for both JVM <em>and</em> ScalaJS.</p>

<p>This is how you would use Circe with Enumeratum’s <code>Enum</code> (integrations for <code>ValueEnum</code> also exist)</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>ShirtSize Enum with Circe integration (ShirtSize.scala)</span> <a href='/downloads/code/scala/ShirtSize.scala'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">import</span> <span class="nn">enumeratum._</span>
</span><span class='line'>
</span><span class='line'><span class="k">sealed</span> <span class="k">trait</span> <span class="nc">ShirtSize</span> <span class="k">extends</span> <span class="nc">EnumEntry</span>
</span><span class='line'>
</span><span class='line'><span class="k">case</span> <span class="k">object</span> <span class="nc">ShirtSize</span> <span class="k">extends</span> <span class="nc">CirceEnum</span><span class="o">[</span><span class="kt">ShirtSize</span><span class="o">]</span> <span class="k">with</span> <span class="nc">Enum</span><span class="o">[</span><span class="kt">ShirtSize</span><span class="o">]</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">case</span> <span class="k">object</span> <span class="nc">Small</span> <span class="k">extends</span> <span class="nc">ShirtSize</span>
</span><span class='line'>  <span class="k">case</span> <span class="k">object</span> <span class="nc">Medium</span> <span class="k">extends</span> <span class="nc">ShirtSize</span>
</span><span class='line'>  <span class="k">case</span> <span class="k">object</span> <span class="nc">Large</span> <span class="k">extends</span> <span class="nc">ShirtSize</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">val</span> <span class="n">values</span> <span class="k">=</span> <span class="n">findValues</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">import</span> <span class="nn">io.circe.Json</span>
</span><span class='line'><span class="k">import</span> <span class="nn">io.circe.syntax._</span>
</span><span class='line'>
</span><span class='line'><span class="nc">ShirtSize</span><span class="o">.</span><span class="n">values</span><span class="o">.</span><span class="n">foreach</span> <span class="o">{</span> <span class="n">size</span> <span class="k">=&gt;</span>
</span><span class='line'>    <span class="n">assert</span><span class="o">(</span><span class="n">size</span><span class="o">.</span><span class="n">asJson</span> <span class="o">==</span> <span class="nc">Json</span><span class="o">.</span><span class="n">fromString</span><span class="o">(</span><span class="n">size</span><span class="o">.</span><span class="n">entryName</span><span class="o">))</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2 id="conclusion">Conclusion</h2>

<p>Hopefully, Enumeratum’s new <code>ValueEnum</code> implementations will make development easier and safer for engineers out there who need to use value enumerations.  Since uniqueness is checked at compile-time, you can save yourself the trouble of writing a bunch of pedantic tests.  Circe is a promising JSON library that was really easy to integrate with and I look forward to taking advantage of the fact that it works on both server side and on the front end.</p>

<p>As always, if you have any problems, questions, suggestions, or better yet, PRs, please do not hesitate to get in touch on Github.</p>

<h2 id="links">Links</h2>

<ul>
  <li><a href="https://github.com/lloydmeta/enumeratum">Enumeratum on Github</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Enumeratum: Sealed Trait Enums for Scala]]></title>
    <link href="https://beachape.com/blog/2015/02/11/enumeratum-sealed-trait-enums-for-scala/"/>
    <updated>2015-02-11T16:47:00+00:00</updated>
    <id>https://beachape.com/blog/2015/02/11/enumeratum-sealed-trait-enums-for-scala</id>
    <content type="html"><![CDATA[<p>If you’ve been working with Scala for a while, you might have come across a few “problems” with the built in <code>Enumeration</code> that’s provided out-of-the-box.  This is especially true if you have colleagues who come from a Java background and yearn for the Java-style <code>Enum</code> that gave them lots of power and flexibility.</p>

<p>A quick search on the internet for “Scala enumeration alternative” will yield a lot of results (perhaps on StackOverflow) where people have cooked up their own implementation of enumerations, usually built on <code>sealed traits</code>. Personally, I found most of them to be either too inconvenient to use, too over-powered, or too complicated, and I really didn’t want to have to copy-paste enum-related code into all my projects.</p>

<p>Thus <a href="https://github.com/lloydmeta/enumeratum">Enumeratum</a> was born.</p>

<!-- more -->

<p><a href="https://github.com/lloydmeta/enumeratum">Enumeratum</a> aims to be simple to use, idiomatic, small (LoC), yet flexible enough to allow Scala devs to make power enums if they so wish. It is also Mavenised for easy import into any project.</p>

<p>To use it, simply <a href="https://github.com/lloydmeta/enumeratum#sbt">add it as a dependency</a></p>

<p><code>scala
val enumeratumVersion = "1.4.2"  // latest version number can be found on the Maven Central version badge on the Github repo.
libraryDependencies ++= Seq(
    "com.beachape" %% "enumeratum" % enumeratumVersion,
    "com.beachape" %% "enumeratum-play" % enumeratumVersion // if you are using Play and want to avoid boilerplate
)
</code></p>

<p>Then</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Enumeratum example code (enumeratum_example.scala)</span> <a href='/downloads/code/scala/enumeratum_example.scala'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="c1">// For use in a REPL</span>
</span><span class='line'>
</span><span class='line'><span class="k">import</span> <span class="nn">enumeratum._</span>
</span><span class='line'>
</span><span class='line'><span class="k">sealed</span> <span class="k">trait</span> <span class="nc">Phone</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">call</span><span class="o">(</span><span class="n">number</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span><span class="k">:</span> <span class="kt">String</span>
</span><span class='line'><span class="o">}</span> <span class="k">extends</span> <span class="nc">EnumEntry</span>
</span><span class='line'>
</span><span class='line'><span class="k">case</span> <span class="k">object</span> <span class="nc">Phone</span> <span class="k">extends</span> <span class="nc">Enum</span><span class="o">[</span><span class="kt">Phone</span><span class="o">]</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">case</span> <span class="k">object</span> <span class="nc">Android</span> <span class="k">extends</span> <span class="nc">Phone</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">def</span> <span class="n">call</span><span class="o">(</span><span class="n">number</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span> <span class="k">=</span> <span class="s">&quot;This is Larry Page.&quot;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">case</span> <span class="k">object</span> <span class="nc">Iphone</span> <span class="k">extends</span> <span class="nc">Phone</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">def</span> <span class="n">call</span><span class="o">(</span><span class="n">number</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span> <span class="k">=</span> <span class="s">&quot;This is Steve Jobs.&quot;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">case</span> <span class="k">object</span> <span class="nc">WindowsPhone</span> <span class="k">extends</span> <span class="nc">Phone</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">def</span> <span class="n">call</span><span class="o">(</span><span class="n">number</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span> <span class="k">=</span> <span class="s">&quot;This is Bill Gates.&quot;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">val</span> <span class="n">values</span> <span class="k">=</span> <span class="n">findValues</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">import</span> <span class="nn">Phone._</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Use as needed.</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="n">myPhone</span> <span class="k">=</span> <span class="nc">Iphone</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Get exhaustive match warnings</span>
</span><span class='line'><span class="k">def</span> <span class="n">rate</span><span class="o">(</span><span class="n">phone</span><span class="k">:</span> <span class="kt">Phone</span><span class="o">)</span><span class="k">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="n">phone</span> <span class="k">match</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">case</span> <span class="nc">Android</span> <span class="k">=&gt;</span> <span class="s">&quot;Great!&quot;</span>
</span><span class='line'>  <span class="k">case</span> <span class="nc">Iphone</span> <span class="k">=&gt;</span> <span class="s">&quot;Awesome!&quot;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">&lt;console&gt;:17: warning: match may not be exhaustive.</span>
</span><span class='line'><span class="cm">It would fail on the following input: WindowsPhone</span>
</span><span class='line'><span class="cm">*/</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>You get nice things like exhaustive match warnings at compile-time, enums with methods, no more Enum-value type erasure, and other nice stuff.</p>

<h2 id="how-it-works">How it works</h2>

<p>Some of the solutions for custom enums out there are based on macros that reflect at compile time using <code>knownDirectSubclasses</code> to find enum values, but as of writing, there is a <a href="https://issues.scala-lang.org/browse/SI-7046">2 year old bug</a> for that method.</p>

<p>As a result, <a href="https://github.com/lloydmeta/enumeratum">Enumeratum</a> uses another method of finding enum values: looking in an enclosed object to find the enum values. The macro behind <code>findValues</code> does this for you so that you don’t have to maintain your own collection of enum values, which is both error-prone and tedious.</p>

<h2 id="play">Play</h2>

<p>If you want to use <a href="https://github.com/lloydmeta/enumeratum">Enumeratum</a> in a Play app, you may as well add <a href="https://github.com/lloydmeta/enumeratum#play-2"><code>enumeratum-play</code></a> as a dependency instead so that you can use the <code>PlayEnum[A]</code> trait (instead of <code>Enum[A]</code>), which will give you nice things like QueryStringBinders, PathBinders, form mappers, and Json Reads/Writes/Formats. To make use of this integration, just extend from <code>PlayEnum</code> instead of <code>Enum</code> in the above example.</p>

<p>This means less boilerplate in your project, which is A Good Thing, right?</p>

<h2 id="limitations">Limitations</h2>

<p>There are a few limitations with Enumeratum:</p>

<ul>
  <li>~~Ordinality is not taken care of. From what I’ve seen, this is one of the least-used functions of Enums in general. That said, nothing is stoping you from defining an <code>Ordering</code> in your companion object for your sealed trait.~~</li>
  <li>Because the Enum values are case objects, they will be inferred to have their own specific type, which may cause problems with compilation for typeclasses that are not contravariant. In that case, simply help the compiler by adding a type (e.g. <code>val myPhone: Phone = Iphone</code>)</li>
  <li>~~The method <code>withName</code> relies on the <code>toString</code> method of the Enum values for lookup. Make sure to override this if you have specific requirements.~~</li>
</ul>

<p><strong>Update 2016/04/22</strong> Crossed out a bunch of limitations that no longer apply.</p>

<h2 id="enjoy">Enjoy</h2>

<p>I hope <a href="https://github.com/lloydmeta/enumeratum">Enumeratum</a> can help you out of your <code>Enumeration</code> woes. Have a look, play around, and send a PR or two !</p>
]]></content>
  </entry>
  
</feed>
