<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Computer Vision | BeachApe.]]></title>
  <link href="https://beachape.com/blog/categories/computer-vision/atom.xml" rel="self"/>
  <link href="https://beachape.com/"/>
  <updated>2016-03-05T18:46:11+09:00</updated>
  <id>https://beachape.com/</id>
  <author>
    <name><![CDATA[Lloyd]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[OpenCV SBT Plugin]]></title>
    <link href="https://beachape.com/blog/2016/03/05/opencv-sbt-plugin/"/>
    <updated>2016-03-05T00:30:00+09:00</updated>
    <id>https://beachape.com/blog/2016/03/05/opencv-sbt-plugin</id>
    <content type="html"><![CDATA[<p> OpenCV is arguably the defacto free, open-source computer vision library, but setting it up for usage in a JVM project can be hard because OpenCV itself is written in C++, so there are a bunch of system-dependent things that you need to download/compile/install before you can use it.</p>

<p> <a href="https://github.com/bytedeco/javacv">JavaCV</a>, written by <a href="http://bytedeco.org/">Bytedeco</a> is a library that makes it more bearable to use OpenCV from JVM projects by providing a bunch of wrapper classes and logic around OpenCV (there's a lot more to it, see their page for details).</p>

<p> Still, because JavaCV depends on <a href="https://github.com/bytedeco/javacpp-presets">JavaCPP</a> for common and OpenCV C++ wrappers, and JavaCPP requires you to set your target platform (what platform you want to run on), I thought getting started could be easier still.</p>

<p> <!-- more --></p>

<p>After taking a look at <a href="https://github.com/chimpler/blog-scala-javacv/blob/master/build.sbt#L19">this Github project</a>, I created an SBT plugin, <a href="https://github.com/lloydmeta/sbt-opencv">SBT-OpenCV</a>, that allows you to add just one line to your <code>project/plugins.sbt</code> to begin playing around with OpenCV:</p>

<p><code>scala
addSbtPlugin("com.beachape" % "sbt-opencv" % "1.2")
</code></p>

<p>The following is a list of SBT setting keys that you can set in order to customise the behaviour of the plugin:</p>

<p><code>
* `javaCVPlatform`: The platform that you want to compile for (defaults to the platform of the current computer). You can also set this via the "sbt.javacv.platform" System Property
* `javaCppVersion`: Version of Java CPP that you want to use
* `javaCppPresetsVersion`:  Version of Java CPP Presets that you want to use
* `javaCVVersion`: Version of Java CV that you want to use
</code></p>

<p>I think <code>javaCVPlatform</code> is the one that will be most interesting, since you may want to compile JARs for different target platforms; for a list of supported strings, look at the classifiers supported by <a href="https://github.com/bytedeco/javacpp-presets">JavaCPP presets</a>, or work out the different strings that can result from <a href="https://github.com/bytedeco/javacpp/blob/master/src/main/java/org/bytedeco/javacpp/Loader.java#L65-L95">the JavaCPP Loader</a>.</p>

<p>For example:</p>

<p><code>scala
javaCVPlatform := "android-arm"
</code></p>

<p>Feel free to try it out and submit issues, ideas, and PRs at the <a href="https://github.com/lloydmeta/sbt-opencv">Github page</a> :)</p>
]]></content>
  </entry>
  
</feed>
