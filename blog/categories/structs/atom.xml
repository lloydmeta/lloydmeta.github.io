<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Structs | BeachApe.]]></title>
  <link href="https://beachape.com/blog/categories/structs/atom.xml" rel="self"/>
  <link href="https://beachape.com/"/>
  <updated>2025-10-04T14:54:23+00:00</updated>
  <id>https://beachape.com/</id>
  <author>
    <name><![CDATA[Lloyd]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Structural Typing in Rust]]></title>
    <link href="https://beachape.com/blog/2021/05/25/structural-typing-in-rust/"/>
    <updated>2021-05-25T21:42:00+00:00</updated>
    <id>https://beachape.com/blog/2021/05/25/structural-typing-in-rust</id>
    <content type="html"><![CDATA[<p>Have you ever wanted to write a structurally typed function in Rust? Do you spend a lot of time and effort getting your Rust <code>struct</code>s <em>just so</em>, and want to DRY-out data access for common field paths without declaring a new <code>trait</code> and implementing it for each struct (let’s say, <code>Cat</code> and <code>Dog</code> both have a <code>name: String</code> field)? If so, read on.</p>

<p><img class="center" src="/images/shape-sorter-child-with-hammer.gif" title="‘A child trying and failing to use a hammer to bash a shape into a shape sorter toy’" ></p>

<p>This post talks about how we can leverage <code>LabelledGeneric</code> to build <code>Path</code> traversers (functionally similar to <a href="https://en.wikibooks.org/wiki/Haskell/Lenses_and_functional_references">lenses</a>), and use them to write clean and performant structurally typed functions with all the compile-time safety that you’ve come to expect from Rust.</p>

<!-- more -->

<h2 class="no_toc" id="re-radio-silence">Re: radio silence</h2>

<p>It’s been a while (4 years!) since I last updated this blog. Why?</p>

<ul>
  <li>I started working on the <a href="https://cloud.elastic.co">Cloud</a> SWE team at <a href="https://www.elastic.co">Elastic</a> (we’re <a href="https://grnh.se/baff303b1">hiring!</a>). I’ve been busy leading project teams, implementing features, and writing (and deleting!) lots of Scala code (no Rust though, sadly 😭)</li>
  <li>My kid gained sentience: Around the same time, my daughter turned 2, and it’s just been a complete whirlwind of activities, learning, viruses, emotions, etc. It’s been awesome and I wouldn’t trade it for the world, but people are DOWNRIGHT LYING if they claim having kids doesn’t change anything.</li>
  <li>2020: Covid was a big one, but the whole year felt like a trainwreck in slow motion … if the train was pulling dumpster fires.</li>
</ul>

<p>Lastly, I just didn’t have the oomph to write a post that describes <code>transmogrify()</code> to follow up on <a href="/blog/2017/04/12/boilerplate-free-struct-transforms-in-rust/">the post on Struct transforms</a>. <code>Transmogrifier</code>, which allows flexibile <a href="https://docs.rs/frunk/0.3.0/frunk/labelled/trait.Transmogrifier.html#example">recursive transformation between similarly-structured <code>structs</code></a>, was added over 2.5 years ago, but writing about it was … intimidating.</p>

<p>Still, I recently decided to <em>try</em> to start writing again, so I picked a topic that’s slightly simpler, but related: <a href="https://docs.rs/frunk/0.3.2/frunk/path/index.html"><code>Path</code></a>, which introduced <a href="https://blog.rust-lang.org/2015/05/11/traits.html">zero-overhead</a> structurally-typed functions that you could use with normal <code>struct</code>s to stable Rust <a href="https://github.com/lloydmeta/frunk/blob/master/CHANGELOG.md#024---2019-02-10">back in Februrary of 2019</a> <sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>.</p>

<p>Is the post late? Yes. Better than never? I hope so 🙏</p>

<h2 class="no_toc" id="overview">Overview</h2>
<ul id="markdown-toc">
  <li><a href="#structural-typing-you-say">Structural typing, you say?</a></li>
  <li><a href="#show-me-yours">Show me yours</a></li>
  <li><a href="#derivelabelledgeneric">[derive(LabelledGeneric)]</a></li>
  <li><a href="#derivelabelledgeneric-1">[derive(LabelledGeneric)]</a></li>
  <li><a href="#derivelabelledgeneric-2">[derive(LabelledGeneric)]</a>    <ul>
      <li><a href="#quick-review-of-labelledgeneric">Quick review of <code>LabelledGeneric</code></a></li>
      <li><a href="#detour-plucking-by-labelled-field">Detour: Plucking by labelled field</a></li>
      <li><a href="#pathtraverser"><code>PathTraverser</code></a></li>
      <li><a href="#path-path-and-path"><code>Path</code>, <code>path!</code> and <code>Path!</code></a>        <ul>
          <li><a href="#value-level">Value-level</a></li>
          <li><a href="#type-level">Type-level</a></li>
        </ul>
      </li>
      <li><a href="#another-example">Another example</a></li>
    </ul>
  </li>
  <li><a href="#derivelabelledgeneric-3">[derive(LabelledGeneric)]</a></li>
  <li><a href="#derivelabelledgeneric-4">[derive(LabelledGeneric)]</a>    <ul>
      <li><a href="#conclusion">Conclusion</a></li>
    </ul>
  </li>
</ul>

<h2 id="structural-typing-you-say">Structural typing, you say?</h2>

<p>“Structural typing” was thrown around up there ↑, but what do we mean? To quote <a href="https://en.wikipedia.org/wiki/Structural_type_system">Wiki</a>:</p>

<blockquote>
  <p>A structural type system (or property-based type system) is a major class of type system in which type compatibility and equivalence are determined by the type’s actual structure or definition and not by other characteristics such as its name or place of declaration. Structural systems are used to determine if types are equivalent and whether a type is a subtype of another. It contrasts with nominative systems, where comparisons are based on the names of the types or explicit declarations, and duck typing, in which only the part of the structure accessed at runtime is checked for compatibility.</p>
</blockquote>

<p>Out-of-the-box-Rust has <a href="https://en.wikipedia.org/wiki/Nominal_type_system">nominally typed</a> functions <sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup> <sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>. For the purposes of this post (and <a href="https://github.com/lloydmeta/frunk">frunk</a>), we specifically mean <code>struct</code>s and their fields when it comes to “structure”<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup>, and <strong>not</strong> <a href="https://doc.rust-lang.org/rust-by-example/fn/methods.html">methods</a> that they get from <code>impl</code>s of themselves or <code>trait</code>s. Why? Well, you can’t spell “structural typing without <code>struct</code>, I’ve been mostly focused on <code>struct</code>s, and … simplicity 😂. Also, to my mind, <code>trait</code>s already enable a kind of part-way “structural typing” of methods <sup id="fnref:5"><a href="#fn:5" rel="footnote">5</a></sup>.</p>

<h2 id="show-me-yours">Show me yours</h2>

<p>I Read Somewhere ™ that giving a concrete example upfront helps people decide if they want to keep reading (if it aligns with their interests), plus there are lots of movies where the first scene you see is chronologically from the end of the story, followed by a rewinding sound and jump back to the beginning … and Hollywood knows engagement. Anyway, we’ll end up with something that allows us to do write this sort of thing:</p>

<p>```rust
/// Function that generically takes any struct <code>A</code> that is traversable with <code>.pet.name</code>, if
/// doing so returns a <code>String</code>
///
/// This is done without declaring any traits specific to this traversal
fn print_pet_name&lt;A, Idx&gt;(obj: A) -&gt; ()
                                 // ↓ dot-separated structural path
    where A: PathTraverser&lt;Path!(pet.name), Idx, TargetValue=String&gt;
                                 // ↑ 🎉
{
    println!(
        “Pet name [{}]”,
        path!(pet.name).get(obj)
    );
}</p>

<p>// Pass it any object that has <code>pet.name</code>
print_pet_name(dog_person);
print_pet_name(cat_person);
print_pet_name(hamster_person);
print_pet_name(snake_person);
print_pet_name(goldfish_person);
print_pet_name(house);
```</p>

<p>The objects you pass to the <code>print_pet_name</code> function don’t need to know anything specific to it nor structurally typed functions in general: their struct declarations just need to <code>derive(LabelledGeneric)</code> and have a structure that complies with the function’s type signature (i.e. have a <code>pet.name</code> path that returns a <code>String</code>):</p>

<p>```rust
#[derive(LabelledGeneric)]
struct Dog {
    name: String,
    age: u32
}</p>

<h1 id="derivelabelledgeneric">[derive(LabelledGeneric)]</h1>
<p>struct Cat {
    name: String,
    age: u32
}</p>

<p>// The next two structs can both be traversed with <code>pet.age</code></p>

<h1 id="derivelabelledgeneric-1">[derive(LabelledGeneric)]</h1>
<p>struct DogPerson {
  name: String,
  pet: Dog
}</p>

<h1 id="derivelabelledgeneric-2">[derive(LabelledGeneric)]</h1>
<p>struct CatPerson {
  name: String,
  pet: Cat
}</p>

<p>// etc etc</p>

<p>let dog = Dog {
    name: “Odie”.to_string(),
    age: 32
};</p>

<p>let cat = Cat {
    name: “Garfield”.to_string(),
    age: 16
};</p>

<p>let dog_person = DogPerson {
  name: “Jon”.to_string(),
  pet: dog
};</p>

<p>let cat_person = CatPerson {
  name: “Jon”.to_string(),
  pet: cat
};
```</p>

<p>That’s it. The API is relatively clean, simple to write, read, and understand (IMO), and there are no <code>unsafe</code> or <code>dyn</code> traits anywhere (even in the implementation). And, you can still declare and treat your <code>struct</code>s as you normally would, passing them to nominally typed functions, implementing <code>trait</code>s as you normally would etc.</p>

<p>Still, when used with structurally typed functions like <code>print_pet_name</code>, the compiler will as usual ensure that:</p>

<ol>
  <li>The paths accessed on the generic parameter <code>A</code> inside the structurally typed function are constrained by the function’s type signature.</li>
  <li>The <code>LabelledGeneric</code> objects passed as arguments to the structurally typed function support the required path in the function’s type signature.</li>
</ol>

<p>The functions themselves are not constrained to just <em>getting</em> values, they can also <em>set</em> values too (see the <a href="#another-example">other example at the end of the post</a>)</p>

<h2 id="quick-review-of-labelledgeneric">Quick review of <code>LabelledGeneric</code></h2>

<p>By adding a <code>#[derive(LabelledGeneric)]</code> attribute to a struct, like so:</p>

<p><code>rust
#[derive(LabelledGeneric)]
struct Dog {
    name: String,
    age: u32
}
</code></p>

<p>we gain the ability to turn a <code>Dog</code> object into a labelled heterogenous list:</p>

<p><code>rust
let dog = Dog {
    name: "Odie".to_string(),
    age: 32
};
let as_labelled = &lt;Dog as LabelledGeneric&gt;::into(dog);
let expected_labelled = hlist![
    // in reality the field label is a tuple of type-level chars, but ignore that for now
    field!(name, "Odie".to_string()),
    field!(age, 32)
];
assert_eq!(expected_labelled, as_labelled);
</code></p>

<p>This ability to turn a <code>struct</code> into a heterogenous List of “fields” (type-level labels and values, henceforth “labelled HList”) paves the way for us to go from nominative typing  (does this type have the right name?) to structural typing (does this type have a given structure?).</p>

<p>For a more thorough review of HLists and <code>LabelledGeneric</code>, see <a href="/blog/2017/03/04/labelledgeneric-in-rust-what-why-how/">this post</a>.</p>

<h2 id="detour-plucking-by-labelled-field">Detour: Plucking by labelled field</h2>

<p>Given a labelled HList, it would be useful to be able to “pluck” a value out of it by using a type-level field name. That would allow us to have compile-time-checked access of a field in a labelled Hlist by type-level name:</p>

<p><code>rust
// Following from the above `Dog` example
let (age_field, _): (Field&lt;age, _&gt;, _) = as_labelled.pluck_by_name();
assert_eq!(32, age_field.value);
</code></p>

<p>This is the equivalent of accessing a specific <code>.age</code> field on a <code>Dog</code> struct in the normal Rust Way ™, but we’re doing it our own way on its labelled HList equivalent, using user-declared types and taking advantage of the type system.</p>

<p>The trait would look like this:</p>

<p>```rust
pub trait ByNameFieldPlucker&lt;TargetKey, Index&gt; {
    type TargetValue;
    type Remainder;</p>

<pre><code>/// Returns a pair consisting of the value pointed to by the target key and the remainder.
fn pluck_by_name(self) -&gt; (Field&lt;TargetKey, Self::TargetValue&gt;, Self::Remainder); } ```
</code></pre>

<p>The implementation of this “by-name-field” Plucker shares much with the normal <code>Plucker</code> mentioned in the previous post, so instead of re-explaining things like the <code>Index</code> type param, I’ll simply add <a href="https://beachape.com/blog/2017/03/12/gentle-intro-to-type-level-recursion-in-Rust-from-zero-to-frunk-hlist-sculpting/#plucking-from-hlists">a link to that section</a> and show the implementation for the exit and recursion implementations here:</p>

<p>```rust
/// Implementation when the pluck target key is in the head.
impl&lt;K, V, Tail&gt; ByNameFieldPlucker&lt;K, Here&gt; for HCons&lt;Field&lt;K, V&gt;, Tail&gt; {
    type TargetValue = V;
    type Remainder = Tail;</p>

<pre><code>#[inline(always)]
fn pluck_by_name(self) -&gt; (Field&lt;K, Self::TargetValue&gt;, Self::Remainder) {
    let field = field_with_name(self.head.name, self.head.value);
    (field, self.tail)
} }
</code></pre>

<p>/// Implementation when the pluck target key is in the tail.
impl&lt;Head, Tail, K, TailIndex&gt; ByNameFieldPlucker&lt;K, There<tailindex>&gt; for HCons&lt;Head, Tail&gt;
where
    Tail: ByNameFieldPlucker&lt;K, TailIndex&gt;,
{
    type TargetValue = &lt;Tail as ByNameFieldPlucker&lt;K, TailIndex&gt;&gt;::TargetValue;
    type Remainder = HCons&lt;Head, &lt;Tail as ByNameFieldPlucker&lt;K, TailIndex&gt;&gt;::Remainder&gt;;</tailindex></p>

<pre><code>#[inline(always)]
fn pluck_by_name(self) -&gt; (Field&lt;K, Self::TargetValue&gt;, Self::Remainder) {
    let (target, tail_remainder) =
        &lt;Tail as ByNameFieldPlucker&lt;K, TailIndex&gt;&gt;::pluck_by_name(self.tail);
    (
        target,
        HCons {
            head: self.head,
            tail: tail_remainder,
        },
    )
} } ```
</code></pre>

<p>In truth, it probably makes sense to re-write the <code>ByNameFieldPlucker</code> implementation(s) in terms of <code>Plucker</code>, but this felt somewhat more straightforward when I wrote it at the time for <code>transmogrify</code>ing.</p>

<h2 id="pathtraverser"><code>PathTraverser</code></h2>

<p><code>ByNameFieldPlucker</code> provides us with a way of accessing <em>a</em> field on <em>single</em> struct, but we want to be able to traverse multiple levels of structs. For instance, given the aformentioned <code>Dog</code> and <code>DogPerson</code> structs, Rust allows us to get the age of his dog by doing <code>dog_person.pet.age</code>, and we’d like to be able to do that structurally. Enter <code>PathTraverser</code>:</p>

<p>```rust
pub trait PathTraverser&lt;Path, Indices&gt; {
    type TargetValue;</p>

<pre><code>/// Returns a pair consisting of the value pointed to by the target key and the remainder.
fn get(self) -&gt; Self::TargetValue; } ```
</code></pre>

<p>Instead of <code>Index</code>, its second type param is <code>Indices</code> to reflect the fact that we’re going to need multiple <code>Index</code>s to “pluck” by field name from. The “exit” (the last, aka no-more-dots, target field name and value type are on the current struct) and “recurse” (the last target field name and value type are in an “inner” struct) implementations of this trait are as follows:</p>

<p>```rust
// For the case where we have no more field names to traverse
impl&lt;Name, PluckIndex, Traversable&gt; PathTraverser&lt;Path&lt;HCons&lt;Name, HNil», PluckIndex&gt;
    for Traversable
where
    Traversable: IntoLabelledGeneric,
    <traversable as="" intolabelledgeneric="">::Repr: ByNameFieldPlucker&lt;Name, PluckIndex&gt;,
{
    type TargetValue = &lt;<traversable as="" intolabelledgeneric="">::Repr as ByNameFieldPlucker&lt;
        Name,
        PluckIndex,
    &gt;&gt;::TargetValue;</traversable></traversable></p>

<pre><code>#[inline(always)]
fn get(self) -&gt; Self::TargetValue {
    self.into().pluck_by_name().0.value
} }
</code></pre>

<p>// For the case where a path nests another path (e.g. nested traverse)
impl&lt;HeadName, TailNames, HeadPluckIndex, TailPluckIndices, Traversable&gt;
    PathTraverser&lt;Path&lt;HCons&lt;HeadName, Path<tailnames>&gt;&gt;, HCons&lt;HeadPluckIndex, TailPluckIndices&gt;&gt;
    for Traversable
where
    Traversable: IntoLabelledGeneric,
    <traversable as="" intolabelledgeneric="">::Repr: ByNameFieldPlucker&lt;HeadName, HeadPluckIndex&gt;,
    &lt;<traversable as="" intolabelledgeneric="">::Repr as ByNameFieldPlucker&lt;HeadName, HeadPluckIndex&gt;&gt;::TargetValue:
        PathTraverser&lt;Path<tailnames>, TailPluckIndices&gt;,
{
    type TargetValue = &lt;&lt;<traversable as="" intolabelledgeneric="">::Repr as ByNameFieldPlucker&lt;HeadName, HeadPluckIndex&gt;&gt;::TargetValue as
    PathTraverser&lt;Path<tailnames>, TailPluckIndices&gt;&gt;::TargetValue ;</tailnames></traversable></tailnames></traversable></traversable></tailnames></p>

<pre><code>#[inline(always)]
fn get(self) -&gt; Self::TargetValue {
    self.into().pluck_by_name().0.value.get()
} } ```
</code></pre>

<p>That type signature is a bit hairy.</p>

<p>It’s a bit “Inceptiony” to think about what the <code>Indices</code> type param might look like at a given callsite, and for the most part it doesn’t matter for users (we make it the compiler’s job to fill it in or error out trying), but for the purposes of trying to understand what’s going on, it’s reasonable to imagine this as the <code>Indices</code> for structurally accessing <code>dog_person.pet.age</code>:</p>

<p><code>rust
HList![
  &lt;There&lt;Here&gt;&gt;, // First access is `.pet`, which is the 2nd field on `DogUser`
  &lt;There&lt;Here&gt;&gt;, // First access is `.age`, which is the 2nd field on `Dog`
]
</code></p>

<h2 id="path-path-and-path"><code>Path</code>, <code>path!</code> and <code>Path!</code></h2>

<p>The last piece we need is something that allows us to describe a path (e.g. <code>pet.age</code>). Since the path is going to be itself a type-level thing (reminder: we pluck values by type-level field name), we can model this as a newtype wrapper around the zero-sized <a href="https://doc.rust-lang.org/std/marker/struct.PhantomData.html"><code>PhantomData&lt;T&gt;</code> type</a></p>

<p>```rust
pub struct Path<t>(PhantomData<t>);</t></t></p>

<p>impl<t> Path<t> {
    /// Creates a new Path
    pub fn new() -&gt; Path<t> {
        Path(PhantomData)
    }</t></t></t></p>

<pre><code>/// Gets something using the current path
pub fn get&lt;V, I, O&gt;(&amp;self, o: O) -&gt; V
where
    O: PathTraverser&lt;Self, I, TargetValue = V&gt;,
{
    o.get()
} } ```
</code></pre>

<p><code>Path</code>s basically works like “lens”, only without the target type locked down (maybe that will be a future type in frunk…), enabling this sort of thing:</p>

<p>```rust
let p = path!(pet.name);</p>

<p>let dog_age: &amp;u32 = p.get(&amp;dog_person);
let cat_age: &amp;u32 = p.get(&amp;cat_person);
```</p>

<p>That’s all fine and good. From here on though, things get a bit tricky because we need to create friendly ways to declare <code>Path</code>s, and <code>T</code> needs to be a type level path, one that needs to be <strong>easy</strong> to use <em>and</em> <strong>compatible</strong> with the way <a href="https://beachape.com/blog/2017/03/04/labelledgeneric-in-rust-what-why-how/#type-level-characters-and-strings"><code>LabelledGeneric</code> encodes field names into type-level strings</a>. Rubber, meet road.</p>

<p>To make declaring value and type level <code>Path</code>s easy to use, we’ll need to make use of procedural macros because they allow us to take user-defined expressions and turn them into type-level paths made of type-level field names, and doing so with <a href="https://doc.rust-lang.org/book/ch19-06-macros.html#declarative-macros-with-macro_rules-for-general-metaprogramming">declarative macros</a> is extremely difficult (I gave it a stab) if not impossible.</p>

<p>A core function that is reused for generating value-level <strong>and</strong> type-value <code>Path</code>s is:</p>

<p><code>rust
fn build_path_type(path_expr: Expr) -&gt; impl ToTokens {
    let idents = find_idents_in_expr(path_expr);
    idents
        .iter()
        .map(|i| build_label_type(i))
        .fold(quote!(::frunk_core::hlist::HNil), |acc, t| {
            quote! {
            ::frunk_core::path::Path&lt;
                ::frunk_core::hlist::HCons&lt;
                   #t,
                   #acc
                &gt;
              &gt;
            }
        })
}
</code></p>

<p>Where <code>find_idents_in_expr</code> is a <a href="https://github.com/lloydmeta/frunk/blob/8eb9ccb08f9060c4aa008a4f1786bc441c97ee27/proc-macro-helpers/src/lib.rs#L193-L220">function</a> turns a path expression like <code>pet.age</code> into a vector of <a href="https://doc.rust-lang.org/proc_macro/struct.Ident.html"><code>Ident</code> identifiers</a>.</p>

<p>We then pass those through to the <a href="https://github.com/lloydmeta/frunk/blob/8eb9ccb08f9060c4aa008a4f1786bc441c97ee27/proc-macro-helpers/src/lib.rs#L131-L146"><code>build_label_type</code> function</a>, which translates each <code>Ident</code> into a type-level name. This is also re-used by <code>LabelledGeneric</code>’s derivation macro, which is important because it ensures that the way field names are encoded as types for <code>Path</code>s is compatible with the way field names are encoded as types in <code>LabelledGeneric</code>-produced labelled HLists.</p>

<h3 id="value-level">Value-level</h3>

<p>The macro for creating a <code>Path</code> <em>value</em> simply instantiates a <code>Path</code>  using <code>Path::new()</code>, but with a type ascription based on what gets returned from <code>build_path_type</code>.</p>

<p><code>rust
pub fn path(input: TokenStream) -&gt; TokenStream {
    let expr = parse_macro_input!(input as Expr);
    let path_type = build_path_type(expr);
    let ast = quote! {
        {
            let p: #path_type = ::frunk_core::path::Path::new();
            p
        }
    };
    //    println!("ast: [{}]", ast);
    TokenStream::from(ast)
}
</code></p>

<h3 id="type-level">Type-level</h3>

<p>The macro for creating a <code>Path</code> <em>type</em> simply splices the type returned from <code>build_path_type</code>.</p>

<p><code>rust
pub fn Path(input: TokenStream) -&gt; TokenStream {
    let expr = parse_macro_input!(input as Expr);
    let path_type = build_path_type(expr);
    let ast = quote! {
        #path_type
    };
    //    println!("ast: [{}]", ast);
    TokenStream::from(ast)
}
</code></p>

<h2 id="another-example">Another example</h2>

<p>Getting and setting ids of from <code>struct</code>s, without declaring a <code>GetId</code> or <code>SetId</code> trait and implementing it for each type:</p>

<p>```rust
#[derive(LabelledGeneric)]
struct User {
    id: String,
    is_admin: bool,
}</p>

<h1 id="derivelabelledgeneric-3">[derive(LabelledGeneric)]</h1>
<p>struct Book {
    id: String,
    title: String,
}</p>

<h1 id="derivelabelledgeneric-4">[derive(LabelledGeneric)]</h1>
<p>struct Store {
    id: String,
    address: String,
}</p>

<p>// Object references passed to this function just need to have an <code>id: String</code>
// in their struct defintion.
fn get_id&lt;’a, A, Idx&gt;(obj: &amp;’a A) -&gt; &amp;’a str
where
    &amp;’a A: PathTraverser&lt;Path!(id), Idx, TargetValue = &amp;’a String&gt;,
{
    path!(id).get(obj).as_str()
}</p>

<p>// DRYed-out setter
fn set_id&lt;’a, A, Idx&gt;(obj: &amp;’a mut A, set_to: String) -&gt; ()
where
    &amp;’a mut A: PathTraverser&lt;Path!(id), Idx, TargetValue = &amp;’a mut String&gt;,
{
    *path!(id).get(obj) = set_to;
}</p>

<p>let mut user = User {
    id: “user_id”.to_string(),
    is_admin: true,
};
let mut book = Book {
    id: “book_id”.to_string(),
    title: “Tale of Three structs”.to_string(),
};
let mut store = Store {
    id: “store_id”.to_string(),
    address: “Sesame street”.to_string(),
};</p>

<p>println!(“{}”, get_id(&amp;user));
println!(“{}”, get_id(&amp;book));
println!(“{}”, get_id(&amp;store));</p>

<p>// ↑ Prints:
//
// user_id
// book_id
// store_id</p>

<p>set_id(&amp;mut user, “new_user_id”.to_string());
set_id(&amp;mut book, “new_book_id”.to_string());
set_id(&amp;mut store, “new_store_id”.to_string());</p>

<p>// Print again
println!(“{}”, get_id(&amp;user));
println!(“{}”, get_id(&amp;book));
println!(“{}”, get_id(&amp;store));</p>

<p>// ↑ Prints:
//
// new_user_id
// new_book_id
// new_store_id
```</p>

<h2 id="conclusion">Conclusion</h2>

<p>The <code>PathTraverser</code> trait and <code>Path</code> type build on <code>LabelledGeneric</code> and <code>HList</code> as core abstractions, which is nice because we get some more mileage out of them, and it means that there are no additional traits that you need to import nor implement (even as a macro).</p>

<p>As usual, it’s compile-time checked, but it’s also <strong>performant</strong>. In <a href="https://beachape.com/frunk/dev/bench/">benchmarks</a>, tests comparing <code>lens_path*</code> (structurally typed traversal) versus <code>normal_path*</code> (Rust lang built-in traversal) traversals show that they perform the same: in other words, using structural typing in this way adds zero overhead.</p>

<p>As usual, please give it a spin and chime in with any questions, corrections, and suggestions !</p>

<h4 class="no_toc" id="footnotes">Footnotes</h4>

<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p>Technically, everything for writing basic structurally typed functions minus support for jumping through <code>.</code>-separated fields was available in frunk since <a href="https://github.com/lloydmeta/frunk/pull/124/files#diff-1dbf59e47bd20977b2b93de89dc0b1ca339be36509288a64602c2e33be4f7e25R552">October of 2018</a> at the latest because <code>ByNamePlucker</code> was available already by then.<a href="#fnref:1" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:2">
      <p>In Rust, macros can and have been used to approximate structural typing (macro arguments aren’t typed, so you can just do something like <code>$x.access.some.path</code> and have the compiler expand and fail it if an object at the callsite doesn’t have that path). This is fine too, but macros can be hard to read and maintain (they have no type signature, so you’ll need to look in the implementation/docs to know what it expects), and they <a href="https://doc.rust-lang.org/book/ch19-06-macros.html#the-difference-between-macros-and-functions">aren’t functions</a>; they’re code that write code. Again, The Macro Way is Fine ™; this post just offers an alternative.<a href="#fnref:2" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:3">
      <p>Rust <em>did</em> at one point have built-in support structural records, but <a href="https://github.com/rust-lang/rust/issues/3089">it was removed almost 9 years ago before 1.0 was released</a>. I found an <a href="https://internals.rust-lang.org/t/why-were-structural-records-removed/1553/2">answer to a question on the internal Rust lang forum</a> asking why, and the 3 reasons listed for removal at the time made sense; the <code>Path</code> implementation described here (and implemented in <a href="https://github.com/lloydmeta/frunk">frunk</a>) addresses 1, if not 2, of the 3 issues (field order requirement and recursion IIUC), leaving the issue of field visibility, which I believe can probably be addressed as an option to the <code>LabelledGeneric</code> derive.<a href="#fnref:3" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:4">
      <p>There are some who would call this “row polymorphism”, which is maybe (more) correct, but it’s also a term that is much more niche (pronounced: “less generally known” or “less searched for”). Indeed, depending on whom you ask, “row polymorphism” is regarded as being under the “structural typing” umbrella (<a href="https://www.cs.cmu.edu/~aldrich/courses/819/slides/rows.pdf">1</a>, <a href="https://journal.infinitenegativeutility.com/structural-types-and-duck-typing">2</a>), but in any case, I personally find the distinction to be of questionable value in the context of Rust 🤷‍♂️. Having said that, feel free to substitute “row polymorphism” in place of “structural typing” when reading this post if it helps you slog through the actual important bits :)<a href="#fnref:4" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:5">
      <p><code>trait</code>s can be adhoc and auto-implemented, and directly used as constraints in functions (though still nominally), so being structurally-typed on <code>trait</code>s feels a bit less of a problem that needs solving, and I get the feeling that it will be even less so with things like <a href="https://rust-lang.github.io/rfcs/1210-impl-specialization.html">specialization</a> coming down the pipeline, which will allow for more blanket and overlapping <code>impl</code>s.<a href="#fnref:5" rel="reference">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
</feed>
