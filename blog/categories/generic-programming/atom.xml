<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Generic Programming | BeachApe.]]></title>
  <link href="https://beachape.com/blog/categories/generic-programming/atom.xml" rel="self"/>
  <link href="https://beachape.com/"/>
  <updated>2025-10-04T16:47:59+00:00</updated>
  <id>https://beachape.com/</id>
  <author>
    <name><![CDATA[Lloyd]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Structural Typing in Rust]]></title>
    <link href="https://beachape.com/blog/2021/05/25/structural-typing-in-rust/"/>
    <updated>2021-05-25T21:42:00+00:00</updated>
    <id>https://beachape.com/blog/2021/05/25/structural-typing-in-rust</id>
    <content type="html"><![CDATA[<p>Have you ever wanted to write a structurally typed function in Rust? Do you spend a lot of time and effort getting your Rust <code>struct</code>s <em>just so</em>, and want to DRY-out data access for common field paths without declaring a new <code>trait</code> and implementing it for each struct (let’s say, <code>Cat</code> and <code>Dog</code> both have a <code>name: String</code> field)? If so, read on.</p>

<p><img class="center" src="/images/shape-sorter-child-with-hammer.gif" title="‘A child trying and failing to use a hammer to bash a shape into a shape sorter toy’" ></p>

<p>This post talks about how we can leverage <code>LabelledGeneric</code> to build <code>Path</code> traversers (functionally similar to <a href="https://en.wikibooks.org/wiki/Haskell/Lenses_and_functional_references">lenses</a>), and use them to write clean and performant structurally typed functions with all the compile-time safety that you’ve come to expect from Rust.</p>

<!-- more -->

<h2 class="no_toc" id="re-radio-silence">Re: radio silence</h2>

<p>It’s been a while (4 years!) since I last updated this blog. Why?</p>

<ul>
  <li>I started working on the <a href="https://cloud.elastic.co">Cloud</a> SWE team at <a href="https://www.elastic.co">Elastic</a> (we’re <a href="https://grnh.se/baff303b1">hiring!</a>). I’ve been busy leading project teams, implementing features, and writing (and deleting!) lots of Scala code (no Rust though, sadly 😭)</li>
  <li>My kid gained sentience: Around the same time, my daughter turned 2, and it’s just been a complete whirlwind of activities, learning, viruses, emotions, etc. It’s been awesome and I wouldn’t trade it for the world, but people are DOWNRIGHT LYING if they claim having kids doesn’t change anything.</li>
  <li>2020: Covid was a big one, but the whole year felt like a trainwreck in slow motion … if the train was pulling dumpster fires.</li>
</ul>

<p>Lastly, I just didn’t have the oomph to write a post that describes <code>transmogrify()</code> to follow up on <a href="/blog/2017/04/12/boilerplate-free-struct-transforms-in-rust/">the post on Struct transforms</a>. <code>Transmogrifier</code>, which allows flexibile <a href="https://docs.rs/frunk/0.3.0/frunk/labelled/trait.Transmogrifier.html#example">recursive transformation between similarly-structured <code>structs</code></a>, was added over 2.5 years ago, but writing about it was … intimidating.</p>

<p>Still, I recently decided to <em>try</em> to start writing again, so I picked a topic that’s slightly simpler, but related: <a href="https://docs.rs/frunk/0.3.2/frunk/path/index.html"><code>Path</code></a>, which introduced <a href="https://blog.rust-lang.org/2015/05/11/traits.html">zero-overhead</a> structurally-typed functions that you could use with normal <code>struct</code>s to stable Rust <a href="https://github.com/lloydmeta/frunk/blob/master/CHANGELOG.md#024---2019-02-10">back in Februrary of 2019</a> <sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>.</p>

<p>Is the post late? Yes. Better than never? I hope so 🙏</p>

<h2 class="no_toc" id="overview">Overview</h2>
<ul id="markdown-toc">
  <li><a href="#structural-typing-you-say">Structural typing, you say?</a></li>
  <li><a href="#show-me-yours">Show me yours</a></li>
  <li><a href="#derivelabelledgeneric">[derive(LabelledGeneric)]</a></li>
  <li><a href="#derivelabelledgeneric-1">[derive(LabelledGeneric)]</a></li>
  <li><a href="#derivelabelledgeneric-2">[derive(LabelledGeneric)]</a>    <ul>
      <li><a href="#quick-review-of-labelledgeneric">Quick review of <code>LabelledGeneric</code></a></li>
      <li><a href="#detour-plucking-by-labelled-field">Detour: Plucking by labelled field</a></li>
      <li><a href="#pathtraverser"><code>PathTraverser</code></a></li>
      <li><a href="#path-path-and-path"><code>Path</code>, <code>path!</code> and <code>Path!</code></a>        <ul>
          <li><a href="#value-level">Value-level</a></li>
          <li><a href="#type-level">Type-level</a></li>
        </ul>
      </li>
      <li><a href="#another-example">Another example</a></li>
    </ul>
  </li>
  <li><a href="#derivelabelledgeneric-3">[derive(LabelledGeneric)]</a></li>
  <li><a href="#derivelabelledgeneric-4">[derive(LabelledGeneric)]</a>    <ul>
      <li><a href="#conclusion">Conclusion</a></li>
    </ul>
  </li>
</ul>

<h2 id="structural-typing-you-say">Structural typing, you say?</h2>

<p>“Structural typing” was thrown around up there ↑, but what do we mean? To quote <a href="https://en.wikipedia.org/wiki/Structural_type_system">Wiki</a>:</p>

<blockquote>
  <p>A structural type system (or property-based type system) is a major class of type system in which type compatibility and equivalence are determined by the type’s actual structure or definition and not by other characteristics such as its name or place of declaration. Structural systems are used to determine if types are equivalent and whether a type is a subtype of another. It contrasts with nominative systems, where comparisons are based on the names of the types or explicit declarations, and duck typing, in which only the part of the structure accessed at runtime is checked for compatibility.</p>
</blockquote>

<p>Out-of-the-box-Rust has <a href="https://en.wikipedia.org/wiki/Nominal_type_system">nominally typed</a> functions <sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup> <sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>. For the purposes of this post (and <a href="https://github.com/lloydmeta/frunk">frunk</a>), we specifically mean <code>struct</code>s and their fields when it comes to “structure”<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup>, and <strong>not</strong> <a href="https://doc.rust-lang.org/rust-by-example/fn/methods.html">methods</a> that they get from <code>impl</code>s of themselves or <code>trait</code>s. Why? Well, you can’t spell “structural typing without <code>struct</code>, I’ve been mostly focused on <code>struct</code>s, and … simplicity 😂. Also, to my mind, <code>trait</code>s already enable a kind of part-way “structural typing” of methods <sup id="fnref:5"><a href="#fn:5" rel="footnote">5</a></sup>.</p>

<h2 id="show-me-yours">Show me yours</h2>

<p>I Read Somewhere ™ that giving a concrete example upfront helps people decide if they want to keep reading (if it aligns with their interests), plus there are lots of movies where the first scene you see is chronologically from the end of the story, followed by a rewinding sound and jump back to the beginning … and Hollywood knows engagement. Anyway, we’ll end up with something that allows us to do write this sort of thing:</p>

<p>```rust
/// Function that generically takes any struct <code>A</code> that is traversable with <code>.pet.name</code>, if
/// doing so returns a <code>String</code>
///
/// This is done without declaring any traits specific to this traversal
fn print_pet_name&lt;A, Idx&gt;(obj: A) -&gt; ()
                                 // ↓ dot-separated structural path
    where A: PathTraverser&lt;Path!(pet.name), Idx, TargetValue=String&gt;
                                 // ↑ 🎉
{
    println!(
        “Pet name [{}]”,
        path!(pet.name).get(obj)
    );
}</p>

<p>// Pass it any object that has <code>pet.name</code>
print_pet_name(dog_person);
print_pet_name(cat_person);
print_pet_name(hamster_person);
print_pet_name(snake_person);
print_pet_name(goldfish_person);
print_pet_name(house);
```</p>

<p>The objects you pass to the <code>print_pet_name</code> function don’t need to know anything specific to it nor structurally typed functions in general: their struct declarations just need to <code>derive(LabelledGeneric)</code> and have a structure that complies with the function’s type signature (i.e. have a <code>pet.name</code> path that returns a <code>String</code>):</p>

<p>```rust
#[derive(LabelledGeneric)]
struct Dog {
    name: String,
    age: u32
}</p>

<h1 id="derivelabelledgeneric">[derive(LabelledGeneric)]</h1>
<p>struct Cat {
    name: String,
    age: u32
}</p>

<p>// The next two structs can both be traversed with <code>pet.age</code></p>

<h1 id="derivelabelledgeneric-1">[derive(LabelledGeneric)]</h1>
<p>struct DogPerson {
  name: String,
  pet: Dog
}</p>

<h1 id="derivelabelledgeneric-2">[derive(LabelledGeneric)]</h1>
<p>struct CatPerson {
  name: String,
  pet: Cat
}</p>

<p>// etc etc</p>

<p>let dog = Dog {
    name: “Odie”.to_string(),
    age: 32
};</p>

<p>let cat = Cat {
    name: “Garfield”.to_string(),
    age: 16
};</p>

<p>let dog_person = DogPerson {
  name: “Jon”.to_string(),
  pet: dog
};</p>

<p>let cat_person = CatPerson {
  name: “Jon”.to_string(),
  pet: cat
};
```</p>

<p>That’s it. The API is relatively clean, simple to write, read, and understand (IMO), and there are no <code>unsafe</code> or <code>dyn</code> traits anywhere (even in the implementation). And, you can still declare and treat your <code>struct</code>s as you normally would, passing them to nominally typed functions, implementing <code>trait</code>s as you normally would etc.</p>

<p>Still, when used with structurally typed functions like <code>print_pet_name</code>, the compiler will as usual ensure that:</p>

<ol>
  <li>The paths accessed on the generic parameter <code>A</code> inside the structurally typed function are constrained by the function’s type signature.</li>
  <li>The <code>LabelledGeneric</code> objects passed as arguments to the structurally typed function support the required path in the function’s type signature.</li>
</ol>

<p>The functions themselves are not constrained to just <em>getting</em> values, they can also <em>set</em> values too (see the <a href="#another-example">other example at the end of the post</a>)</p>

<h2 id="quick-review-of-labelledgeneric">Quick review of <code>LabelledGeneric</code></h2>

<p>By adding a <code>#[derive(LabelledGeneric)]</code> attribute to a struct, like so:</p>

<p><code>rust
#[derive(LabelledGeneric)]
struct Dog {
    name: String,
    age: u32
}
</code></p>

<p>we gain the ability to turn a <code>Dog</code> object into a labelled heterogenous list:</p>

<p><code>rust
let dog = Dog {
    name: "Odie".to_string(),
    age: 32
};
let as_labelled = &lt;Dog as LabelledGeneric&gt;::into(dog);
let expected_labelled = hlist![
    // in reality the field label is a tuple of type-level chars, but ignore that for now
    field!(name, "Odie".to_string()),
    field!(age, 32)
];
assert_eq!(expected_labelled, as_labelled);
</code></p>

<p>This ability to turn a <code>struct</code> into a heterogenous List of “fields” (type-level labels and values, henceforth “labelled HList”) paves the way for us to go from nominative typing  (does this type have the right name?) to structural typing (does this type have a given structure?).</p>

<p>For a more thorough review of HLists and <code>LabelledGeneric</code>, see <a href="/blog/2017/03/04/labelledgeneric-in-rust-what-why-how/">this post</a>.</p>

<h2 id="detour-plucking-by-labelled-field">Detour: Plucking by labelled field</h2>

<p>Given a labelled HList, it would be useful to be able to “pluck” a value out of it by using a type-level field name. That would allow us to have compile-time-checked access of a field in a labelled Hlist by type-level name:</p>

<p><code>rust
// Following from the above `Dog` example
let (age_field, _): (Field&lt;age, _&gt;, _) = as_labelled.pluck_by_name();
assert_eq!(32, age_field.value);
</code></p>

<p>This is the equivalent of accessing a specific <code>.age</code> field on a <code>Dog</code> struct in the normal Rust Way ™, but we’re doing it our own way on its labelled HList equivalent, using user-declared types and taking advantage of the type system.</p>

<p>The trait would look like this:</p>

<p>```rust
pub trait ByNameFieldPlucker&lt;TargetKey, Index&gt; {
    type TargetValue;
    type Remainder;</p>

<pre><code>/// Returns a pair consisting of the value pointed to by the target key and the remainder.
fn pluck_by_name(self) -&gt; (Field&lt;TargetKey, Self::TargetValue&gt;, Self::Remainder); } ```
</code></pre>

<p>The implementation of this “by-name-field” Plucker shares much with the normal <code>Plucker</code> mentioned in the previous post, so instead of re-explaining things like the <code>Index</code> type param, I’ll simply add <a href="https://beachape.com/blog/2017/03/12/gentle-intro-to-type-level-recursion-in-Rust-from-zero-to-frunk-hlist-sculpting/#plucking-from-hlists">a link to that section</a> and show the implementation for the exit and recursion implementations here:</p>

<p>```rust
/// Implementation when the pluck target key is in the head.
impl&lt;K, V, Tail&gt; ByNameFieldPlucker&lt;K, Here&gt; for HCons&lt;Field&lt;K, V&gt;, Tail&gt; {
    type TargetValue = V;
    type Remainder = Tail;</p>

<pre><code>#[inline(always)]
fn pluck_by_name(self) -&gt; (Field&lt;K, Self::TargetValue&gt;, Self::Remainder) {
    let field = field_with_name(self.head.name, self.head.value);
    (field, self.tail)
} }
</code></pre>

<p>/// Implementation when the pluck target key is in the tail.
impl&lt;Head, Tail, K, TailIndex&gt; ByNameFieldPlucker&lt;K, There<tailindex>&gt; for HCons&lt;Head, Tail&gt;
where
    Tail: ByNameFieldPlucker&lt;K, TailIndex&gt;,
{
    type TargetValue = &lt;Tail as ByNameFieldPlucker&lt;K, TailIndex&gt;&gt;::TargetValue;
    type Remainder = HCons&lt;Head, &lt;Tail as ByNameFieldPlucker&lt;K, TailIndex&gt;&gt;::Remainder&gt;;</tailindex></p>

<pre><code>#[inline(always)]
fn pluck_by_name(self) -&gt; (Field&lt;K, Self::TargetValue&gt;, Self::Remainder) {
    let (target, tail_remainder) =
        &lt;Tail as ByNameFieldPlucker&lt;K, TailIndex&gt;&gt;::pluck_by_name(self.tail);
    (
        target,
        HCons {
            head: self.head,
            tail: tail_remainder,
        },
    )
} } ```
</code></pre>

<p>In truth, it probably makes sense to re-write the <code>ByNameFieldPlucker</code> implementation(s) in terms of <code>Plucker</code>, but this felt somewhat more straightforward when I wrote it at the time for <code>transmogrify</code>ing.</p>

<h2 id="pathtraverser"><code>PathTraverser</code></h2>

<p><code>ByNameFieldPlucker</code> provides us with a way of accessing <em>a</em> field on <em>single</em> struct, but we want to be able to traverse multiple levels of structs. For instance, given the aformentioned <code>Dog</code> and <code>DogPerson</code> structs, Rust allows us to get the age of his dog by doing <code>dog_person.pet.age</code>, and we’d like to be able to do that structurally. Enter <code>PathTraverser</code>:</p>

<p>```rust
pub trait PathTraverser&lt;Path, Indices&gt; {
    type TargetValue;</p>

<pre><code>/// Returns a pair consisting of the value pointed to by the target key and the remainder.
fn get(self) -&gt; Self::TargetValue; } ```
</code></pre>

<p>Instead of <code>Index</code>, its second type param is <code>Indices</code> to reflect the fact that we’re going to need multiple <code>Index</code>s to “pluck” by field name from. The “exit” (the last, aka no-more-dots, target field name and value type are on the current struct) and “recurse” (the last target field name and value type are in an “inner” struct) implementations of this trait are as follows:</p>

<p>```rust
// For the case where we have no more field names to traverse
impl&lt;Name, PluckIndex, Traversable&gt; PathTraverser&lt;Path&lt;HCons&lt;Name, HNil», PluckIndex&gt;
    for Traversable
where
    Traversable: IntoLabelledGeneric,
    <traversable as="" intolabelledgeneric="">::Repr: ByNameFieldPlucker&lt;Name, PluckIndex&gt;,
{
    type TargetValue = &lt;<traversable as="" intolabelledgeneric="">::Repr as ByNameFieldPlucker&lt;
        Name,
        PluckIndex,
    &gt;&gt;::TargetValue;</traversable></traversable></p>

<pre><code>#[inline(always)]
fn get(self) -&gt; Self::TargetValue {
    self.into().pluck_by_name().0.value
} }
</code></pre>

<p>// For the case where a path nests another path (e.g. nested traverse)
impl&lt;HeadName, TailNames, HeadPluckIndex, TailPluckIndices, Traversable&gt;
    PathTraverser&lt;Path&lt;HCons&lt;HeadName, Path<tailnames>&gt;&gt;, HCons&lt;HeadPluckIndex, TailPluckIndices&gt;&gt;
    for Traversable
where
    Traversable: IntoLabelledGeneric,
    <traversable as="" intolabelledgeneric="">::Repr: ByNameFieldPlucker&lt;HeadName, HeadPluckIndex&gt;,
    &lt;<traversable as="" intolabelledgeneric="">::Repr as ByNameFieldPlucker&lt;HeadName, HeadPluckIndex&gt;&gt;::TargetValue:
        PathTraverser&lt;Path<tailnames>, TailPluckIndices&gt;,
{
    type TargetValue = &lt;&lt;<traversable as="" intolabelledgeneric="">::Repr as ByNameFieldPlucker&lt;HeadName, HeadPluckIndex&gt;&gt;::TargetValue as
    PathTraverser&lt;Path<tailnames>, TailPluckIndices&gt;&gt;::TargetValue ;</tailnames></traversable></tailnames></traversable></traversable></tailnames></p>

<pre><code>#[inline(always)]
fn get(self) -&gt; Self::TargetValue {
    self.into().pluck_by_name().0.value.get()
} } ```
</code></pre>

<p>That type signature is a bit hairy.</p>

<p>It’s a bit “Inceptiony” to think about what the <code>Indices</code> type param might look like at a given callsite, and for the most part it doesn’t matter for users (we make it the compiler’s job to fill it in or error out trying), but for the purposes of trying to understand what’s going on, it’s reasonable to imagine this as the <code>Indices</code> for structurally accessing <code>dog_person.pet.age</code>:</p>

<p><code>rust
HList![
  &lt;There&lt;Here&gt;&gt;, // First access is `.pet`, which is the 2nd field on `DogUser`
  &lt;There&lt;Here&gt;&gt;, // First access is `.age`, which is the 2nd field on `Dog`
]
</code></p>

<h2 id="path-path-and-path"><code>Path</code>, <code>path!</code> and <code>Path!</code></h2>

<p>The last piece we need is something that allows us to describe a path (e.g. <code>pet.age</code>). Since the path is going to be itself a type-level thing (reminder: we pluck values by type-level field name), we can model this as a newtype wrapper around the zero-sized <a href="https://doc.rust-lang.org/std/marker/struct.PhantomData.html"><code>PhantomData&lt;T&gt;</code> type</a></p>

<p>```rust
pub struct Path<t>(PhantomData<t>);</t></t></p>

<p>impl<t> Path<t> {
    /// Creates a new Path
    pub fn new() -&gt; Path<t> {
        Path(PhantomData)
    }</t></t></t></p>

<pre><code>/// Gets something using the current path
pub fn get&lt;V, I, O&gt;(&amp;self, o: O) -&gt; V
where
    O: PathTraverser&lt;Self, I, TargetValue = V&gt;,
{
    o.get()
} } ```
</code></pre>

<p><code>Path</code>s basically works like “lens”, only without the target type locked down (maybe that will be a future type in frunk…), enabling this sort of thing:</p>

<p>```rust
let p = path!(pet.name);</p>

<p>let dog_age: &amp;u32 = p.get(&amp;dog_person);
let cat_age: &amp;u32 = p.get(&amp;cat_person);
```</p>

<p>That’s all fine and good. From here on though, things get a bit tricky because we need to create friendly ways to declare <code>Path</code>s, and <code>T</code> needs to be a type level path, one that needs to be <strong>easy</strong> to use <em>and</em> <strong>compatible</strong> with the way <a href="https://beachape.com/blog/2017/03/04/labelledgeneric-in-rust-what-why-how/#type-level-characters-and-strings"><code>LabelledGeneric</code> encodes field names into type-level strings</a>. Rubber, meet road.</p>

<p>To make declaring value and type level <code>Path</code>s easy to use, we’ll need to make use of procedural macros because they allow us to take user-defined expressions and turn them into type-level paths made of type-level field names, and doing so with <a href="https://doc.rust-lang.org/book/ch19-06-macros.html#declarative-macros-with-macro_rules-for-general-metaprogramming">declarative macros</a> is extremely difficult (I gave it a stab) if not impossible.</p>

<p>A core function that is reused for generating value-level <strong>and</strong> type-value <code>Path</code>s is:</p>

<p><code>rust
fn build_path_type(path_expr: Expr) -&gt; impl ToTokens {
    let idents = find_idents_in_expr(path_expr);
    idents
        .iter()
        .map(|i| build_label_type(i))
        .fold(quote!(::frunk_core::hlist::HNil), |acc, t| {
            quote! {
            ::frunk_core::path::Path&lt;
                ::frunk_core::hlist::HCons&lt;
                   #t,
                   #acc
                &gt;
              &gt;
            }
        })
}
</code></p>

<p>Where <code>find_idents_in_expr</code> is a <a href="https://github.com/lloydmeta/frunk/blob/8eb9ccb08f9060c4aa008a4f1786bc441c97ee27/proc-macro-helpers/src/lib.rs#L193-L220">function</a> turns a path expression like <code>pet.age</code> into a vector of <a href="https://doc.rust-lang.org/proc_macro/struct.Ident.html"><code>Ident</code> identifiers</a>.</p>

<p>We then pass those through to the <a href="https://github.com/lloydmeta/frunk/blob/8eb9ccb08f9060c4aa008a4f1786bc441c97ee27/proc-macro-helpers/src/lib.rs#L131-L146"><code>build_label_type</code> function</a>, which translates each <code>Ident</code> into a type-level name. This is also re-used by <code>LabelledGeneric</code>’s derivation macro, which is important because it ensures that the way field names are encoded as types for <code>Path</code>s is compatible with the way field names are encoded as types in <code>LabelledGeneric</code>-produced labelled HLists.</p>

<h3 id="value-level">Value-level</h3>

<p>The macro for creating a <code>Path</code> <em>value</em> simply instantiates a <code>Path</code>  using <code>Path::new()</code>, but with a type ascription based on what gets returned from <code>build_path_type</code>.</p>

<p><code>rust
pub fn path(input: TokenStream) -&gt; TokenStream {
    let expr = parse_macro_input!(input as Expr);
    let path_type = build_path_type(expr);
    let ast = quote! {
        {
            let p: #path_type = ::frunk_core::path::Path::new();
            p
        }
    };
    //    println!("ast: [{}]", ast);
    TokenStream::from(ast)
}
</code></p>

<h3 id="type-level">Type-level</h3>

<p>The macro for creating a <code>Path</code> <em>type</em> simply splices the type returned from <code>build_path_type</code>.</p>

<p><code>rust
pub fn Path(input: TokenStream) -&gt; TokenStream {
    let expr = parse_macro_input!(input as Expr);
    let path_type = build_path_type(expr);
    let ast = quote! {
        #path_type
    };
    //    println!("ast: [{}]", ast);
    TokenStream::from(ast)
}
</code></p>

<h2 id="another-example">Another example</h2>

<p>Getting and setting ids of from <code>struct</code>s, without declaring a <code>GetId</code> or <code>SetId</code> trait and implementing it for each type:</p>

<p>```rust
#[derive(LabelledGeneric)]
struct User {
    id: String,
    is_admin: bool,
}</p>

<h1 id="derivelabelledgeneric-3">[derive(LabelledGeneric)]</h1>
<p>struct Book {
    id: String,
    title: String,
}</p>

<h1 id="derivelabelledgeneric-4">[derive(LabelledGeneric)]</h1>
<p>struct Store {
    id: String,
    address: String,
}</p>

<p>// Object references passed to this function just need to have an <code>id: String</code>
// in their struct defintion.
fn get_id&lt;’a, A, Idx&gt;(obj: &amp;’a A) -&gt; &amp;’a str
where
    &amp;’a A: PathTraverser&lt;Path!(id), Idx, TargetValue = &amp;’a String&gt;,
{
    path!(id).get(obj).as_str()
}</p>

<p>// DRYed-out setter
fn set_id&lt;’a, A, Idx&gt;(obj: &amp;’a mut A, set_to: String) -&gt; ()
where
    &amp;’a mut A: PathTraverser&lt;Path!(id), Idx, TargetValue = &amp;’a mut String&gt;,
{
    *path!(id).get(obj) = set_to;
}</p>

<p>let mut user = User {
    id: “user_id”.to_string(),
    is_admin: true,
};
let mut book = Book {
    id: “book_id”.to_string(),
    title: “Tale of Three structs”.to_string(),
};
let mut store = Store {
    id: “store_id”.to_string(),
    address: “Sesame street”.to_string(),
};</p>

<p>println!(“{}”, get_id(&amp;user));
println!(“{}”, get_id(&amp;book));
println!(“{}”, get_id(&amp;store));</p>

<p>// ↑ Prints:
//
// user_id
// book_id
// store_id</p>

<p>set_id(&amp;mut user, “new_user_id”.to_string());
set_id(&amp;mut book, “new_book_id”.to_string());
set_id(&amp;mut store, “new_store_id”.to_string());</p>

<p>// Print again
println!(“{}”, get_id(&amp;user));
println!(“{}”, get_id(&amp;book));
println!(“{}”, get_id(&amp;store));</p>

<p>// ↑ Prints:
//
// new_user_id
// new_book_id
// new_store_id
```</p>

<h2 id="conclusion">Conclusion</h2>

<p>The <code>PathTraverser</code> trait and <code>Path</code> type build on <code>LabelledGeneric</code> and <code>HList</code> as core abstractions, which is nice because we get some more mileage out of them, and it means that there are no additional traits that you need to import nor implement (even as a macro).</p>

<p>As usual, it’s compile-time checked, but it’s also <strong>performant</strong>. In <a href="https://beachape.com/frunk/dev/bench/">benchmarks</a>, tests comparing <code>lens_path*</code> (structurally typed traversal) versus <code>normal_path*</code> (Rust lang built-in traversal) traversals show that they perform the same: in other words, using structural typing in this way adds zero overhead.</p>

<p>As usual, please give it a spin and chime in with any questions, corrections, and suggestions !</p>

<h4 class="no_toc" id="footnotes">Footnotes</h4>

<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p>Technically, everything for writing basic structurally typed functions minus support for jumping through <code>.</code>-separated fields was available in frunk since <a href="https://github.com/lloydmeta/frunk/pull/124/files#diff-1dbf59e47bd20977b2b93de89dc0b1ca339be36509288a64602c2e33be4f7e25R552">October of 2018</a> at the latest because <code>ByNamePlucker</code> was available already by then.<a href="#fnref:1" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:2">
      <p>In Rust, macros can and have been used to approximate structural typing (macro arguments aren’t typed, so you can just do something like <code>$x.access.some.path</code> and have the compiler expand and fail it if an object at the callsite doesn’t have that path). This is fine too, but macros can be hard to read and maintain (they have no type signature, so you’ll need to look in the implementation/docs to know what it expects), and they <a href="https://doc.rust-lang.org/book/ch19-06-macros.html#the-difference-between-macros-and-functions">aren’t functions</a>; they’re code that write code. Again, The Macro Way is Fine ™; this post just offers an alternative.<a href="#fnref:2" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:3">
      <p>Rust <em>did</em> at one point have built-in support structural records, but <a href="https://github.com/rust-lang/rust/issues/3089">it was removed almost 9 years ago before 1.0 was released</a>. I found an <a href="https://internals.rust-lang.org/t/why-were-structural-records-removed/1553/2">answer to a question on the internal Rust lang forum</a> asking why, and the 3 reasons listed for removal at the time made sense; the <code>Path</code> implementation described here (and implemented in <a href="https://github.com/lloydmeta/frunk">frunk</a>) addresses 1, if not 2, of the 3 issues (field order requirement and recursion IIUC), leaving the issue of field visibility, which I believe can probably be addressed as an option to the <code>LabelledGeneric</code> derive.<a href="#fnref:3" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:4">
      <p>There are some who would call this “row polymorphism”, which is maybe (more) correct, but it’s also a term that is much more niche (pronounced: “less generally known” or “less searched for”). Indeed, depending on whom you ask, “row polymorphism” is regarded as being under the “structural typing” umbrella (<a href="https://www.cs.cmu.edu/~aldrich/courses/819/slides/rows.pdf">1</a>, <a href="https://journal.infinitenegativeutility.com/structural-types-and-duck-typing">2</a>), but in any case, I personally find the distinction to be of questionable value in the context of Rust 🤷‍♂️. Having said that, feel free to substitute “row polymorphism” in place of “structural typing” when reading this post if it helps you slog through the actual important bits :)<a href="#fnref:4" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:5">
      <p><code>trait</code>s can be adhoc and auto-implemented, and directly used as constraints in functions (though still nominally), so being structurally-typed on <code>trait</code>s feels a bit less of a problem that needs solving, and I get the feeling that it will be even less so with things like <a href="https://rust-lang.github.io/rfcs/1210-impl-specialization.html">specialization</a> coming down the pipeline, which will allow for more blanket and overlapping <code>impl</code>s.<a href="#fnref:5" rel="reference">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Boilerplate-free Struct Transforms in Rust.]]></title>
    <link href="https://beachape.com/blog/2017/04/12/boilerplate-free-struct-transforms-in-rust/"/>
    <updated>2017-04-12T12:45:00+00:00</updated>
    <id>https://beachape.com/blog/2017/04/12/boilerplate-free-struct-transforms-in-rust</id>
    <content type="html"><![CDATA[<p>The last several posts have introduced a number of abstractions, namely HList, Generic, LabelledGeneric, as well as <code>pluck()</code> and <code>sculpt()</code>. Although each of those have impressive party tricks of their own, I’d like to share how you can use them to write a reuseable, generic function that handles converting between structs with mis-matched fields and thus have different <code>LabelledGeneric</code> representations.</p>

<p><img class="center" src="/images/optimus-prime.gif" title="‘All together now’" ></p>

<p>Unlike the last post, this one will be relatively light on recursion and mind-bending type-level stuff; it’s time to sit back and enjoy the fruits of our labour.</p>

<!-- more -->

<h2 id="adding-frunk-to-your-project">Adding Frunk to your project</h2>

<p>Much of this post will make use of <a href="https://github.com/lloydmeta/frunk">Frunk’s</a> types (e.g. <code>HCons</code>, <code>HNil</code>), methods, macros (esp. for describing macro types via the <code>Hlist!</code> <a href="https://beachape.com/frunk/frunk_core/macro.Hlist.html">type macro</a>), and terminology.</p>

<p>It might be easier to follow along if you add Frunk to your project and play around with it. <a href="https://github.com/lloydmeta/frunk">Frunk</a> is published to <a href="//crates.io/crates/frunk">Crates.io</a>, so to add it your list of dependencies, simply put this in your <code>Cargo.toml</code>:</p>

<p><a href="https://crates.io/crates/frunk"><img src="https://img.shields.io/crates/v/frunk.svg" alt="Crates.io" /></a></p>

<p><code>rust
[dependencies]
frunk = "${latest_version}"
</code></p>

<p>Alternatively, take a look at the <a href="https://beachape.com/frunk">published Rustdocs</a>.</p>

<h2 id="boilerplate-free-conversions-between-structs">Boilerplate-free conversions between Structs</h2>

<p>Suppose we have a bunch of structs that are similar-ish in terms of their data but ultimately, not necessarily
exactly the same. This means we can’t just use the normal <code>LabelledGeneric</code> <code>convert_from</code> method to convert between them.</p>

<p>```rust
#[derive(LabelledGeneric)]
struct UserFromDb&lt;’a&gt; {
    id: u64,
    first_name: &amp;’a str,
    last_name: &amp;’a str,
    email: &amp;’a str,
    age: u32,
    pw_hash: &amp;’a str,
    is_admin: bool,
    created_at: i64
}</p>

<p>// Holds User data for rendering in a front-end view
// or for sending over an API. Striped of any sensitive
// information
#[derive(LabelledGeneric)]
struct PresentableUser&lt;’a&gt; {
    last_name: &amp;’a str,
    first_name: &amp;’a str,
    age: u32,
    created_at: i64
}</p>

<p>// Holds data for sending a User over our internal API
#[derive(LabelledGeneric)]
struct InternalApiUser&lt;’a&gt; {
    id: u64,
    first_name: &amp;’a str,
    last_name: &amp;’a str,
    age: u32,
    email: &amp;’a str,
    is_admin: bool,
    created_at: i64
}
```</p>

<p>In our example, <code>PresentableUser</code> and <code>InternalApiUser</code> structs have fields that are subsets of the fields in <code>UserFromDb</code>, and not in the same order either. The scenario is that <code>UserFromDb</code> is a struct that we get from reading our persistence layer, and the other 2 are types that we use in our application for business logic.</p>

<p>Assuming a flow where we want to be able to go from <code>UserFromDb</code> to either <code>PresentableUser</code> or <code>InternalApiUser</code>, the idea is that we don’t want be holding on to sensitive data like <code>pw_hash</code> when we don’t need to, thus lowering the risk of accidentally leaking said data (e.g. serialising it by accident, or by rendering it in debug messages, etc).</p>

<p>While we could go about writing <code>From</code>s by hand for each of these, and for every other time a similar situation arises, that’s quite a lot of boilerplate to write and maintain. Thankfully, we can make use of Frunk’s <code>LabelledGeneric</code> and <code>Sculptor</code> to write a single, reuseable generic function.</p>

<p>Note, for a review of:</p>

<ul>
  <li><code>LabelledGeneric</code>, see <a href="/blog/2017/03/04/labelledgeneric-in-rust-what-why-how/">this post</a></li>
  <li><code>Sculptor</code>, see <a href="/blog/2017/03/12/gentle-intro-to-type-level-recursion-in-Rust-from-zero-to-frunk-hlist-sculpting/">this post</a></li>
</ul>

<p><code>rust
/// Converts from another type A into B assuming that A and B have labelled generic representations
/// that can be sculpted into each other.
///
/// Note that this method tosses away the "remainder" of the sculpted representation.
fn transform_from&lt;A, B, Indices&gt;(a: A) -&gt; B
    where A: LabelledGeneric,
          B: LabelledGeneric,
// The labelled representation of A must be sculpt-able into the labelled representation of Self
          &lt;A as LabelledGeneric&gt;::Repr: Sculptor&lt;&lt;B as LabelledGeneric&gt;::Repr, Indices&gt; {
    // Turn A into its labelled generic representation
    let a_gen = &lt;A as LabelledGeneric&gt;::into(a);
    // Sculpt the generic labelled representation of A into the labelled generic representation
    // of B. We ignore the remainder.
    let (b_gen, _): (&lt;B as LabelledGeneric&gt;::Repr, _) = a_gen.sculpt();
    // Turn the lablled generic representation of B into B
    &lt;B as LabelledGeneric&gt;::from(b_gen)
}
</code></p>

<p>Not bad. The body of the function is literally 3 lines long :) Now we can do this:</p>

<p>```rust
let u_db = UserFromDb {
    id: 3,
    first_name: “Joe”,
    last_name: “Blow”,
    email: “joe@gmail.com”,
    age: 30,
    pw_hash: “asd35235adsf”,
    is_admin: true,
    created_at: 12345,
};</p>

<p>let p_user: PresentableUser = transform_from(udb);
// or
let i_user: InternalApiUser = transform_from(udb);
```</p>

<p>In actuality, Frunk already <a href="https://beachape.com/frunk/frunk_core/labelled/fn.transform_from.html">ships with this function</a> so you can use it out of the box.</p>

<h2 id="conclusion">Conclusion</h2>

<p>Often times, you’ll hear that heterogeneous lists enable developers to write reuseable generic functions because they abstract over arity and types, and it might not be obvious exactly what that means on a practical level. The example shown in this post just scratches the surface of what is made possible through <code>HList</code> and <code>LabelledGeneric</code>, and there are definitely more creative usages out there, such as building of boilerplate-free (e.g. JSON) codecs (hint: look to Haskell and Scala libs for more).</p>

<p>As usual, please give it a spin and chime in with any questions, corrections, and suggestions !</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Boilerplate-free Struct Transforms in Rust.]]></title>
    <link href="https://beachape.com/blog/2017/04/12/boilerplate-free-struct-transforms-in-rust/"/>
    <updated>2017-04-12T12:45:00+00:00</updated>
    <id>https://beachape.com/blog/2017/04/12/boilerplate-free-struct-transforms-in-rust</id>
    <content type="html"><![CDATA[<p>The last several posts have introduced a number of abstractions, namely HList, Generic, LabelledGeneric, as well as <code>pluck()</code> and <code>sculpt()</code>. Although each of those have impressive party tricks of their own, I’d like to share how you can use them to write a reuseable, generic function that handles converting between structs with mis-matched fields and thus have different <code>LabelledGeneric</code> representations.</p>

<p><img class="center" src="/images/optimus-prime.gif" title="‘All together now’" ></p>

<p>Unlike the last post, this one will be relatively light on recursion and mind-bending type-level stuff; it’s time to sit back and enjoy the fruits of our labour.</p>

<!-- more -->

<h2 id="adding-frunk-to-your-project">Adding Frunk to your project</h2>

<p>Much of this post will make use of <a href="https://github.com/lloydmeta/frunk">Frunk’s</a> types (e.g. <code>HCons</code>, <code>HNil</code>), methods, macros (esp. for describing macro types via the <code>Hlist!</code> <a href="https://beachape.com/frunk/frunk_core/macro.Hlist.html">type macro</a>), and terminology.</p>

<p>It might be easier to follow along if you add Frunk to your project and play around with it. <a href="https://github.com/lloydmeta/frunk">Frunk</a> is published to <a href="//crates.io/crates/frunk">Crates.io</a>, so to add it your list of dependencies, simply put this in your <code>Cargo.toml</code>:</p>

<p><a href="https://crates.io/crates/frunk"><img src="https://img.shields.io/crates/v/frunk.svg" alt="Crates.io" /></a></p>

<p><code>rust
[dependencies]
frunk = "${latest_version}"
</code></p>

<p>Alternatively, take a look at the <a href="https://beachape.com/frunk">published Rustdocs</a>.</p>

<h2 id="boilerplate-free-conversions-between-structs">Boilerplate-free conversions between Structs</h2>

<p>Suppose we have a bunch of structs that are similar-ish in terms of their data but ultimately, not necessarily
exactly the same. This means we can’t just use the normal <code>LabelledGeneric</code> <code>convert_from</code> method to convert between them.</p>

<p>```rust
#[derive(LabelledGeneric)]
struct UserFromDb&lt;’a&gt; {
    id: u64,
    first_name: &amp;’a str,
    last_name: &amp;’a str,
    email: &amp;’a str,
    age: u32,
    pw_hash: &amp;’a str,
    is_admin: bool,
    created_at: i64
}</p>

<p>// Holds User data for rendering in a front-end view
// or for sending over an API. Striped of any sensitive
// information
#[derive(LabelledGeneric)]
struct PresentableUser&lt;’a&gt; {
    last_name: &amp;’a str,
    first_name: &amp;’a str,
    age: u32,
    created_at: i64
}</p>

<p>// Holds data for sending a User over our internal API
#[derive(LabelledGeneric)]
struct InternalApiUser&lt;’a&gt; {
    id: u64,
    first_name: &amp;’a str,
    last_name: &amp;’a str,
    age: u32,
    email: &amp;’a str,
    is_admin: bool,
    created_at: i64
}
```</p>

<p>In our example, <code>PresentableUser</code> and <code>InternalApiUser</code> structs have fields that are subsets of the fields in <code>UserFromDb</code>, and not in the same order either. The scenario is that <code>UserFromDb</code> is a struct that we get from reading our persistence layer, and the other 2 are types that we use in our application for business logic.</p>

<p>Assuming a flow where we want to be able to go from <code>UserFromDb</code> to either <code>PresentableUser</code> or <code>InternalApiUser</code>, the idea is that we don’t want be holding on to sensitive data like <code>pw_hash</code> when we don’t need to, thus lowering the risk of accidentally leaking said data (e.g. serialising it by accident, or by rendering it in debug messages, etc).</p>

<p>While we could go about writing <code>From</code>s by hand for each of these, and for every other time a similar situation arises, that’s quite a lot of boilerplate to write and maintain. Thankfully, we can make use of Frunk’s <code>LabelledGeneric</code> and <code>Sculptor</code> to write a single, reuseable generic function.</p>

<p>Note, for a review of:</p>

<ul>
  <li><code>LabelledGeneric</code>, see <a href="/blog/2017/03/04/labelledgeneric-in-rust-what-why-how/">this post</a></li>
  <li><code>Sculptor</code>, see <a href="/blog/2017/03/12/gentle-intro-to-type-level-recursion-in-Rust-from-zero-to-frunk-hlist-sculpting/">this post</a></li>
</ul>

<p><code>rust
/// Converts from another type A into B assuming that A and B have labelled generic representations
/// that can be sculpted into each other.
///
/// Note that this method tosses away the "remainder" of the sculpted representation.
fn transform_from&lt;A, B, Indices&gt;(a: A) -&gt; B
    where A: LabelledGeneric,
          B: LabelledGeneric,
// The labelled representation of A must be sculpt-able into the labelled representation of Self
          &lt;A as LabelledGeneric&gt;::Repr: Sculptor&lt;&lt;B as LabelledGeneric&gt;::Repr, Indices&gt; {
    // Turn A into its labelled generic representation
    let a_gen = &lt;A as LabelledGeneric&gt;::into(a);
    // Sculpt the generic labelled representation of A into the labelled generic representation
    // of B. We ignore the remainder.
    let (b_gen, _): (&lt;B as LabelledGeneric&gt;::Repr, _) = a_gen.sculpt();
    // Turn the lablled generic representation of B into B
    &lt;B as LabelledGeneric&gt;::from(b_gen)
}
</code></p>

<p>Not bad. The body of the function is literally 3 lines long :) Now we can do this:</p>

<p>```rust
let u_db = UserFromDb {
    id: 3,
    first_name: “Joe”,
    last_name: “Blow”,
    email: “joe@gmail.com”,
    age: 30,
    pw_hash: “asd35235adsf”,
    is_admin: true,
    created_at: 12345,
};</p>

<p>let p_user: PresentableUser = transform_from(udb);
// or
let i_user: InternalApiUser = transform_from(udb);
```</p>

<p>In actuality, Frunk already <a href="https://beachape.com/frunk/frunk_core/labelled/fn.transform_from.html">ships with this function</a> so you can use it out of the box.</p>

<h2 id="conclusion">Conclusion</h2>

<p>Often times, you’ll hear that heterogeneous lists enable developers to write reuseable generic functions because they abstract over arity and types, and it might not be obvious exactly what that means on a practical level. The example shown in this post just scratches the surface of what is made possible through <code>HList</code> and <code>LabelledGeneric</code>, and there are definitely more creative usages out there, such as building of boilerplate-free (e.g. JSON) codecs (hint: look to Haskell and Scala libs for more).</p>

<p>As usual, please give it a spin and chime in with any questions, corrections, and suggestions !</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gentle Intro to Type-level Recursion in Rust: From Zero to HList Sculpting.]]></title>
    <link href="https://beachape.com/blog/2017/03/12/gentle-intro-to-type-level-recursion-in-Rust-from-zero-to-frunk-hlist-sculpting/"/>
    <updated>2017-03-12T12:03:00+00:00</updated>
    <id>https://beachape.com/blog/2017/03/12/gentle-intro-to-type-level-recursion-in-Rust-from-zero-to-frunk-hlist-sculpting</id>
    <content type="html"><![CDATA[<blockquote>
  <p>Getting the type signature right was 99% of the work in implementing <code>pluck</code> and <code>sculpt</code> for <code>HList</code>s in Frunk.</p>

  <p>Here’s what I’ve learnt along the way: what works, and what doesn’t work (and why).</p>
</blockquote>

<p>As you may already know, Rust eschews the now-mainstream object-oriented model of programming (e.g. in Java, where behaviour for a type is added to the type/interface definition directly) in favour of a typeclass-like approach (e.g. in Haskell where you can ad-hoc add behaviour to a type separate from the type definition itself).  Both approaches have their merits, and indeed, some languages, such as Scala, allow for a mix of both.</p>

<p>For those coming from the OOP school of programming, Rust’s system of adding behaviour to types might be daunting to come to grips with. At a glance, it might not be obvious how to get things done, especially when what you want to build goes beyond implementing <code>Debug</code> or <code>Eq</code>. If your abstraction has a certain degree of type-level recursiveness, it might be even harder to see the light at the end of the tunnel, and the lack of online material covering that sort of thing doesn’t help.</p>

<p>As a Scala guy with Haskell knowledge, I’m no stranger to typeclasses, but it took me a while and several failed attempts to figure out how to implement the following:</p>

<ol>
  <li>Plucking out a value by type from an HList and getting back the remainder **</li>
  <li>Sculpting an HList into another shape, and getting back the remainder (in the case where we only want a smaller subset than the original) **</li>
</ol>

<p>Of course, the type signature of the finished product can be intimidating !</p>

<p><img class="center" src="/images/sculptor-typesig.png" title="‘6 type parameters, 1 fills in a type parameter on the trait that is recursive, and a recursive associated type. WTF? ‘" ></p>

<p>In this post, I’ll briefly introduce Rust’s trait system and present my mental model for writing trait implementations that deal with type-level recursion. To do so, I will go through how <code>pluck()</code> and <code>sculpt()</code> were written in Frunk, as well as recount some of my failed approaches so you can learn from my mistakes.</p>

<p>Hopefully, by the end of it, you’ll be able to look at signatures like the one above and not go “WTF”, but rather, “FTW”.</p>

<!-- more -->

<h2 class="no_toc" id="type-level-recursion">“Type-level recursion”?</h2>

<p>Ok, I may be butchering/making up a term, but by “type-level recursion”, I’m referring to recursive expansions/evaluations of types  at compile-time, particularly for the purpose of proving that a certain typeclass instance exists at a function call site. This is distinct from runtime “value”-level recursion that occurs when you call a function that calls itself.</p>

<p>If you’re having trouble understanding the difference:</p>

<ul>
  <li><strong>Value-level recursion</strong>: If it can’t find an exit condition, your program is stuck running forever.</li>
  <li><strong>Type-level recursion</strong>: If it can’t expand/find the exit-type, your compiler will either give up or never finish compiling; you won’t even have a program to run.</li>
</ul>

<h2 class="no_toc" id="outline">Outline</h2>
<ul id="markdown-toc">
  <li><a href="#basic-gist-of-rust-typeclasses-traits">Basic Gist of Rust typeclasses (traits)</a>    <ul>
      <li><a href="#dependent-trait-implementations">Dependent trait implementations</a></li>
      <li><a href="#mental-model-for-type-level-recursion">Mental model for type-level recursion</a>        <ul>
          <li><a href="#recursion-on-the-value-level">Recursion on the value level</a></li>
          <li><a href="#recursion-on-the-type-level">Recursion on the type level</a></li>
        </ul>
      </li>
    </ul>
  </li>
  <li><a href="#what-the-frunk">What the Frunk?</a></li>
  <li><a href="#plucking-from-hlists">Plucking from HLists</a>    <ul>
      <li><a href="#implementation-intuition">Implementation intuition</a></li>
      <li><a href="#first-attempt">First attempt</a></li>
      <li><a href="#second-attempt">Second attempt</a></li>
      <li><a href="#type-level-walkthrough">Type-level walkthrough</a></li>
    </ul>
  </li>
  <li><a href="#sculpting-hlists">Sculpting HLists</a>    <ul>
      <li><a href="#implementation-intuition-1">Implementation intuition</a></li>
      <li><a href="#first-attempt-1">First attempt</a></li>
      <li><a href="#second-attempt-1">Second attempt</a></li>
    </ul>
  </li>
  <li><a href="#conclusion">Conclusion</a>    <ul>
      <li><a href="#credit">Credit</a></li>
    </ul>
  </li>
</ul>

<h2 id="basic-gist-of-rust-typeclasses-traits">Basic Gist of Rust typeclasses (traits)</h2>

<p>In Rust, typeclass is spelt <code>trait</code>, and although that word is somewhat ambiguous and overloaded with different meanings depending on context (e.g. in Scala), I’ll try to stick with it throughout this article. Subsequently, a typeclass instance is called an “implementation” (<code>impl</code> in code) in Rust.</p>

<p>Here is a basic example of a simple trait and implementation for a type <code>Circle</code>, taken from the official <a href="https://doc.rust-lang.org/book/traits.html">Rust book</a>.</p>

<p>```rust
// A trait that allows you to call “area” on something
trait HasArea {
    fn area(&amp;self) -&gt; f64;
}</p>

<p>// Our type
struct Circle {
    x: f64,
    y: f64,
    radius: f64,
}</p>

<p>// Our implementation of HasArea for Circle
impl HasArea for Circle {
    fn area(&amp;self) -&gt; f64 {
        std::f64::consts::PI * (self.radius * self.radius)
    }
}
```</p>

<p>For comparison, here is the Haskell equivalent</p>

<p>```haskell
– Our typeclass
class HasArea a where
  area :: a -&gt; Float</p>

<p>– Our type
data Circle = Circle { x :: Float, y :: Float, radius :: Float }</p>

<p>– Our typeclass instance for Circle
instance HasArea Circle where
  area c = pi * radius c ^ 2
```</p>

<p>In both of these cases, what we see is</p>

<ol>
  <li>There is a trait, <code>HasArea</code>, which describes behaviour (must implement an <code>area</code> function that takes as its first argument the implementing type) for types that want to belong to, or join it.</li>
  <li>Next, we have a type, <code>Circle</code>, which has one purpose: hold data.</li>
  <li>Then, we add <code>Circle</code> to the <code>HasArea</code> trait by implementing an instance of the trait, fulfilling the contract by writing the <code>area</code> function.</li>
</ol>

<p>The key difference between this approach and the OOP approach is that adding behaviour to an existing type does not require us to edit the original type declaration, nor does it require us to create a wrapper type. This allows us to add behaviour to types that do not belong to us (e.g. we don’t have access to its source)! This flexibility is a key advantage of the typeclass/trait approach. For a much more detailed comparison between OOP and typeclasses (traits), checkout this <a href="https://wiki.haskell.org/OOP_vs_type_classes">wiki entry on haskell.org</a>.</p>

<h3 id="dependent-trait-implementations">Dependent trait implementations</h3>

<p>Sometimes, you’ll want to write trait implementations for data types that have one or more type parameters. In these cases, your trait implementation will likely require that implementations of the trait exist for each of those type parameters.</p>

<p>For example</p>

<p>```rust
// The Add trait, which exists in core::ops, copied verbatim here.
//
// Note that the Add trait has a right hand side (RHS) type parameter
// to represent the type that the implementing trait is being added
// with.
pub trait Add&lt;RHS=Self&gt; {
    /// The resulting type after applying the <code>+</code> operator
    #[stable(feature = “rust1”, since = “1.0.0”)]
    type Output;</p>

<pre><code>/// The method for the `+` operator
#[stable(feature = "rust1", since = "1.0.0")]
fn add(self, rhs: RHS) -&gt; Self::Output; }
</code></pre>

<p>// Our Cup struct. We signal that its contents can be
// anything because it has an unrestricted type parameter
// of A
struct Cup<a> {
    content: A,
}</a></p>

<p>// In our case, we want to implement Add&lt;Cup<a>&gt; because we want to add
// 2 cups with the same content type together, but we don’t know in
// advance what kind of content would be in them; hence we keep
// it parameterised with A.
//
// Thus, we write an implementation of Cup for Add, but add a restriction:
// the implementation only exists for Cups where the content is bound to a
// type that is already implements the Add trait (thus “A: Add<a>”)
impl&lt;A: Add<a>&gt; Add&lt;Cup<a>&gt; for Cup<a>
{
    // This is what is called an associated type.
    // Here, Output is the type that will be returned
    // from the add operation
    type Output = Cup« A as Add<a> &gt;::Output&gt;;</a></a></a></a></a></a></p>

<pre><code>fn add(self, rhs: Cup&lt;A&gt;) -&gt; Self::Output {
    // Here we make use of the Add trait for A to add
    // the contents from both cups together
    let added_content = self.content.add(rhs.content);
    Cup { content: added_content }
} } ```
</code></pre>

<p>Making <code>Cup</code> part of the <code>Add</code> typeclass will allow us to call <code>cup_a + cup_b</code>, which is kind of neat. One thing to take note of here is the <code>Output</code> associated type. Pay attention to the fact that in our implementation of <code>Add</code> for <code>Cup</code>, the type of <code>Output</code> is <code>Cup&lt;&lt; A as Add&lt;A&gt; &gt;::Output&gt;</code>, which means that ultimately, the output of <code>Add</code>ing of 2 <code>Cup&lt;A&gt;</code>s will depend on what the <code>Output</code> of <code>Add&lt;A&gt;</code> is.  The <code>&lt; A as Add&lt;A&gt; &gt;</code> part can be read as “summon the <code>Add&lt;A&gt;</code> implementation for the type A” (the compiler will do the actual lookup work here; if one doesn’t exist, your code will fail to compile), and the <code>::Output</code> following it means “retrieve the associated type, Output, from <em>that</em> implementation”. Let this sink in, because it’s important in order for us to move towards the concept of type-level recursion for traits.</p>

<p>Here is another way to write the same thing: using <a href="https://doc.rust-lang.org/book/traits.html#where-clause">where clause</a> syntax, so that the restriction goes at the end of the initial type signature in our implementation declaration. This is useful when you have more than 2 or 3 type parameters for your typeclass instance and you have a complex set of restraints. Using <code>where</code> can help cut down on initial noise.</p>

<p>```rust
impl<a> Add&lt;Cup<a>&gt; for Cup<a>
    where A: Add<a>
{
    type Output = Cup«A as Add<a>&gt;::Output&gt;;</a></a></a></a></a></p>

<pre><code>fn add(self, rhs: Cup&lt;A&gt;) -&gt; Self::Output {
    let added_content = self.content.add(rhs.content);
    Cup { content: added_content }
} } ```
</code></pre>

<p>Here’s another, more general implementation of <code>Add</code> for <code>Cup</code>. It’s more general because it lets us add <code>Cup</code>s of <em>different</em> content types, provided that there exists an <code>Add&lt;B&gt;</code> implementation for whatever concrete type is bound to <code>A</code> in any given <code>Cup&lt;A&gt;</code>.</p>

<p>```rust
// Instead of just A, we introduce another type parameter, B, which
// is passed as the type parameter for the Cup that we want to add with
impl&lt;A, B&gt; Add&lt;Cup<b>&gt; for Cup<a>
    // This next line means “A must have an Add<b> implementation”
    where A: Add<b>
{
    // The Output associated type now depends on the Output of &lt;A as Add<b>&gt;
    type Output = Cup«A as Add<b>&gt;::Output&gt;;</b></b></b></b></a></b></p>

<pre><code>fn add(self, rhs: Cup&lt;B&gt;) -&gt; Self::Output {
    // Notice that we can use the operator "+"
    let added_content = self.content + rhs.content;
    Cup { content: added_content }
} } ```
</code></pre>

<h3 id="mental-model-for-type-level-recursion">Mental model for type-level recursion</h3>

<p>By this point, we have covered most of the basic understanding required to write more complex traits and implementations. To recap, they are:</p>

<ol>
  <li>The differences between a trait, a type, and a trait implementation</li>
  <li>How to use bounds (<code>A: Add&lt;A&gt;</code> or <code>where</code> clauses) when writing implementations for generic types</li>
  <li>How to summon an implementation for a given type (<code>&lt;A as Display&gt;</code>)</li>
  <li>How to write and use associated types (see <code>Output</code> in the above examples)</li>
</ol>

<p>For a more thorough introduction to Rust’s trait system, by all means refer to the official Rust <a href="https://doc.rust-lang.org/book/traits.html">docs on traits</a>.</p>

<p>Before going any further, I’d like to provide you with my mental model of how to think about recursion on the <em>type level</em>.</p>

<h4 id="recursion-on-the-value-level">Recursion on the value level</h4>
<blockquote>
  <p>You write a function that keeps calling itself until an exit condition is met, then returns a value.</p>
</blockquote>

<h4 id="recursion-on-the-type-level">Recursion on the type level</h4>
<blockquote>
  <p>You write implementations of your trait for exit-types and work-to-be-done types. In order to prove an implementation of your trait exists for a concrete type at a function call site, the compiler will try to lookup and expand/expand types recursively until it can figure out a concrete implementation to use, or gives up with an error.</p>
</blockquote>

<p>This may not make much sense at the moment, but hopefully it will soon.</p>

<h2 id="what-the-frunk">What the Frunk?</h2>

<p>Much of this post will make use of <a href="https://github.com/lloydmeta/frunk">Frunk’s</a> types (e.g. <code>HCons</code>, <code>HNil</code>), methods, macros (esp. for describing macro types via the <code>Hlist!</code> <a href="https://beachape.com/frunk/frunk_core/macro.Hlist.html">type macro</a>), and terminology.</p>

<p>It might be easier to follow along if you add Frunk to your project and play around with it.  <a href="https://github.com/lloydmeta/frunk">Frunk</a> is published to <a href="//crates.io/crates/frunk">Crates.io</a>, so to add it your list of dependencies, simply put this in your <code>Cargo.toml</code>:</p>

<p><a href="https://crates.io/crates/frunk"><img src="https://img.shields.io/crates/v/frunk.svg" alt="Crates.io" /></a></p>

<p><code>rust
[dependencies]
frunk = "${latest_version}"
</code></p>

<p>Alternatively, take a look at the <a href="https://beachape.com/frunk">published Rustdocs</a>.</p>

<h2 id="plucking-from-hlists">Plucking from HLists</h2>

<p>Given an <a href="/blog/2016/10/23/rust-hlists-heterogenously-typed-list/">HList</a>, how can we write a function that allows us to pluck out a value by type (if the <code>HList</code> does not contain this type, the compiler should let us know), and also return the rest of the <code>HList</code>?</p>

<p>Suppose we call this function <code>pluck()</code>, it should behave like so:</p>

<p>```rust
// h has type Hlist![ {integer}, &amp;str, f32, bool ]
let h = hlist![ 1, “Joe”, 42f32, true ];</p>

<p>// We tell it the target type, and let the compiler infer the rest
let (target, remainder): (f32, _) = h.pluck();</p>

<p>assert_eq!(target, 42f32);
assert_eq!(remainder, hlist![1, “Joe”, true]);
```</p>

<h4 id="implementation-intuition">Implementation intuition</h4>

<p>Our basic logic is fairly simple, given an <code>HList</code> and a <code>Target</code> type:</p>

<ol>
  <li>If the head of the Hlist matches the <code>Target</code> type, return the head of the Hlist and the tail of the Hlist as the remainder in a pair (2 element tuple)</li>
  <li>Otherwise,
    <ol>
      <li>Store the head in <code>current_head</code></li>
      <li>Call <code>pluck()</code> again on the tail of the current Hlist with the same <code>Target</code> type (i.e. recursively call 1. with the tail), and store the result in <code>(tail_target, tail_remainder)</code> pair.</li>
      <li>Return the target plucked from the tail, and prepend <code>current_head</code> to the remainder from the tail. Return both in a tuple like so: <code>(tail_target, HCons { head: current_head, tail: tail_remainder} )</code>.</li>
    </ol>
  </li>
</ol>

<h4 id="first-attempt">First attempt</h4>

<p>First, let’s assume we’ll be working with a trait; call it <code>Plucker</code>. For now, let’s also assume that it will be parameterised with 1 type, the target type, and will also have an associated type, <code>Remainder</code>. There isn’t really a hard and fast rule for when you should use type parameters vs associated types, but if you’re interested, you can take a look at <a href="http://stackoverflow.com/questions/32059370/when-is-it-appropriate-to-use-an-associated-type-versus-a-generic-type">this Stackoverflow question</a> because Matthieu offers some great advice.</p>

<p>Personally, I always try use an associated type when I need to refer to the type from somewhere else (espescially recursively; more on this later). However, going with a type parameter is useful when you need to have different implementations of a trait for the same type in different circumstances. We saw this with <code>Add</code>, where the right hand side was a type parameter, <code>RHS</code>, allowing you to declare different <code>Add</code> implementations for the same left-hand-side type and letting the compiler find the correct implementation to use at <code>+</code> call sites depending on the type of thing being added with.</p>

<p>```rust
// Our trait
trait Plucker<target> {</target></p>

<p>type Remainder;</p>

<p>// Pluck should return the target type and the Remainder in a pair
  fn pluck(self) -&gt; (Target, Self::Remainder);
}
```</p>

<p>The “exit-type” implementation is for when the current head of the <code>HList</code> contains the target type, so let’s jot that down that:</p>

<p>```rust
impl &lt;Target, Tail&gt; Plucker<target> for HCons&lt;Target, Tail&gt; {</target></p>

<p>// Target is the head element, so the Remainder type is the tail!
  type Remainder = Tail;</p>

<p>fn pluck(self) -&gt; (Target, Self::Remainder) {
    (self.head, self.tail)
  }
}
```</p>

<p>Now let’s implement the second piece; the non-trivial part where the target type is <em>not</em> in <code>Head</code>, but in the <code>Tail</code> of our HList. I’ll sometimes refer to this as the “work-to-be-done” type.</p>

<p>```rust
impl &lt;Target, Head, Tail&gt; Plucker<target> for HCons&lt;Head, Tail&gt;
  where Tail: Plucker<target></target></target></p>

<p>// Target is in the tail, so we add the current head type to the remainder
  // And use the Tail’s Plucker’s Remainder type as the tail :)
  type Remainder = HCons&lt;Head, &lt;Tail as Plucker<target>&gt;::Remainder&gt;;</target></p>

<p>fn pluck(self) -&gt; (Target, Self::Remainder) {
    let (tail_target, tail_remainder): (Target, &lt;Tail as Plucker<target>&gt;::Remainder) = self.tail.pluck();
    (
      tail_target,
      HCons { head: self.head, tail: tail_remainder}
    )</target></p>

<p>}
}
```</p>

<p>Looks good right? But if you send that to the compiler, you’ll be hit with this message:</p>

<p><code>bash
error[E0119]: conflicting implementations of trait `Plucker&lt;_&gt;` for type `frunk_core::hlist::HCons&lt;_, _&gt;`:
   --&gt; tests/example.rs:306:1
    |
296 |   impl &lt;Target, Tail&gt; Plucker&lt;Target&gt; for HCons&lt;Target, Tail&gt; {
    |  _- starting here...
297 | |
298 | |     // Target is the head element, so the Remainder type is the tail!
299 | |     type Remainder = Tail;
300 | |
301 | |     fn pluck(self) -&gt; (Target, Self::Remainder) {
302 | |         (self.head, self.tail)
303 | |     }
304 | | }
    | |_- ...ending here: first implementation here
305 |
306 |   impl &lt;Target, Head, Tail&gt; Plucker&lt;Target&gt; for HCons&lt;Head, Tail&gt;
    |   ^ conflicting implementation for `frunk_core::hlist::HCons&lt;_, _&gt;`
</code></p>

<p>What the Rust compiler is helpfully is telling us, is that it can’t distinguish between our two implementations, and if we look closely at the types, that is indeed true:</p>

<p>```rust
// exit (work done) type implementation
impl &lt;Target, Tail&gt;  Plucker<target> for HCons&lt;Target, Tail&gt;</target></p>

<p>// work-to-be-done implementation
impl &lt;Target, Head, Tail&gt; Plucker<target> for HCons&lt;Head, Tail&gt;
```</target></p>

<p>The <code>Plucker&lt;Target&gt;</code> part is exactly the same, and sure, we’ve used <code>Target</code> instead of <code>Head</code> in the <code>for HCons&lt;..&gt;</code> part in the first case, but simply using different type parameters isn’t enough to distinguish between the two.</p>

<p>Furthermore, note that you can’t use the lack of constraints (or <code>where</code> clauses) to distinguish between implementations either. This is because the current lack of an implementation for a given type parameter doesn’t mean that it can’t be added later (see <a href="http://stackoverflow.com/a/39161143/1814775">this Stackoverflow questions</a> for more details).</p>

<p>Welp, back to the drawing board.</p>

<h4 id="second-attempt">Second attempt</h4>

<p>What we’ve learnt is that we need to have another type parameter in order to distinguish the exit-type and the work-to-be-done-type implementations, so let’s add one to <code>Plucker</code>. Intuitively, we know that we want to have a way to distinguish between “the target is here in the HList” (exit) and “the target is over there in the HList” (recursion), so let’s call our type parameter <code>Index</code>.</p>

<p>```rust
// the new and improved Plucker trait
trait Plucker&lt;Target, Index&gt; {
    type Remainder;</p>

<pre><code>fn pluck(self) -&gt; (Target, Self::Remainder); } ```
</code></pre>

<p>Then, let’s add a type to identify the <code>index</code> for the exit-type implementation. We’ll use an empty <code>enum</code> because we just want to have a type, and we don’t want it to be available at runtime (ensuring zero runtime cost for our type).</p>

<p>```rust
// This will be the type we’ll use to denote that the Target is in the Head
enum Here {}</p>

<p>impl &lt;Target, Tail&gt; Plucker&lt;Target, Here&gt; for HCons&lt;Target, Tail&gt; {</p>

<p>// Target type is in the Head, so the Remainder type must be the tail!
  type Remainder = Tail;</p>

<p>fn pluck(self) -&gt; (Target, Self::Remainder) {
    (self.head, self.tail)
  }
}
```</p>

<p>What about the work-to-be-done-type? Let’s imagine a scenario where we want to pluck a <code>Target</code> of type <code>MagicType</code> (let’s assume it’s declared as <code>struct MagicType</code>, so a type with a single element in it), and we have the following <code>HList</code>s to <code>pluck()</code> from; what would the <code>Index</code> be?</p>

<ol>
  <li>
    <p><code>HNil</code></p>

    <p>Trick question, there is no <code>Index</code> because our target of <code>MagicType</code> isn’t here. The compiler should fail to find an instance/implementation of our trait.</p>
  </li>
  <li>
    <p><code>hlist[ MagicType ]</code> (this is syntactic sugar for <code>HCons&lt;MagicType, HNil&gt;</code>)</p>

    <p><code>Index</code> would clearly be our <code>Here</code> enum type</p>
  </li>
  <li>
    <p><code>hlist![ Foo, MagicType ]</code> (this is syntactic sugar for <code>HCons&lt;Foo, HCons&lt;MagicType, HNil&gt;&gt;</code>)</p>

    <p><code>Index</code> can’t be <code>Here</code>, but we know that in order for the compiler to be satisfied that it can reach our end-type in 1. <code>Here</code> needs to be <em>somewhere</em> inside the type, but we <em>can’t</em> just use it as is, otherwise we’ll run into the same “conflicting implementation” error as before. So, let’s introduce new type <code>There&lt;A&gt;</code>, that has one type parameter. In this case, the <code>Index</code> should resolve to <code>There&lt;Here&gt;</code> because the target type is in the head of the tail.</p>
  </li>
  <li>
    <p><code>hlist![ Foo, Foo, MagicType ]</code></p>

    <p>Following from 3. <code>Index</code> would have to be <code>There&lt;There&lt;Here&gt;&gt;</code></p>
  </li>
  <li>
    <p><code>hlist![ Foo, Foo, Foo, MagicType ]</code></p>

    <p>What else could <code>Index</code> be but <code>There&lt;There&lt;There&lt;Here&gt;&gt;&gt;</code></p>
  </li>
</ol>

<p>That Looks alright, so let’s give it a go. Since the new type has a type parameter but no real data to associate it with, we’ll need use the <code>PhantomData</code> trick (discussed in <a href="blog/2017/03/04/labelledgeneric-in-rust-what-why-how/#fieldname-type">the last post</a>).</p>

<p>```rust
// Type for representing a not-here Index
struct There<t>(PhantomData<t>);</t></t></p>

<p>impl&lt;Head, Tail, Target, TailIndex&gt; Plucker&lt;Target, There<tailindex>&gt; for HCons&lt;Head, Tail&gt;
    // This where clause can be interpreted as "the target must be pluckable from the Tail"
    where Tail: Plucker&lt;Target, TailIndex&gt;
{
    type Remainder = HCons&lt;Head, &lt;Tail as Plucker&lt;Target, TailIndex&gt;&gt;::Remainder&gt;;</tailindex></p>

<pre><code>fn pluck(self) -&gt; (Target, Self::Remainder) {
    let (target, tail_remainder): (Target, &lt;Tail as Plucker&lt;Target, TailIndex&gt;&gt;::Remainder) =
        &lt;Tail as Plucker&lt;Target, TailIndex&gt;&gt;::pluck(self.tail);
    (target,
     HCons {
         head: self.head,
         tail: tail_remainder,
     })
} } ```
</code></pre>

<p>And that’s it, we’ve written implementations of <code>Plucker</code> for <code>HList</code>. The implementation for work-to-be-done type is type-recursive in its <code>Index</code> type as well as its <code>Remainder</code> associated type. The cool thing is that the compiler is in charge of figuring out what the <em>concrete</em> types should be at any given <code>pluck()</code> call-site. In fact, you can see <a href="https://beachape.com/frunk/frunk_core/hlist/trait.Plucker.html">from this example</a> in Frunk that the compiler will also happily infer the remainder for us too.</p>

<h3 id="type-level-walkthrough">Type-level walkthrough</h3>

<p>Let’s take a step back and work through what we’ve done.</p>

<p>We’ve declared an implementation of <code>Plucker</code> for the trivial exit-type (<code>Target</code> is in the head).</p>

<p>We’ve also declared an implementation for the work-to-be-done type (<code>Target</code> is in the tail). This implementation, however, is dependent on its recursive types of <code>Tail</code> and <code>TailIndex</code> (hint: look at the <code>where</code> clause).  Intuitively speaking, an implementation of this type only exists if the current HList’s <code>Tail</code> has either:</p>

<ol>
  <li>An implementation for the exit-type; the <code>Target</code> type is in the head</li>
  <li>Another work-to-be-done implementation of <code>Plucker</code>. This ultimately means that <em>eventually</em> there has to be a 1. in the tail <em>somewhere</em>.</li>
</ol>

<p>Let’s try to walk through a mental model of how <code>pluck()</code> gets associated to the proper implementation.</p>

<p>```rust
// Given an HList (type explicitly declared for clarity)
let h: Hlist![ &amp;str, bool, f32, i32 ] = hlist![ “Joe”, false, 42f32, 9 ];</p>

<p>// Suppose we want to get the float (f32) value out
// We’re ignoring the remainder and its type (Rust will figure it out),
// because it isn’t relevant for now.
let (v, <em>): (f32,</em>) = h.pluck();
```</p>

<p>We’re ignoring the remainder and its type (Rust will figure it out if we use the underscore binding <code>_</code>), because it isn’t relevant for what we’re about to do.</p>

<p>In the following steps, we’ll substitute concrete types into our implementations where possible; similar to how functions get bound to values during the <a href="http://www.cs.cornell.edu/courses/cs3110/2013sp/lectures/lec06-subst-model/lec06.html">substitution model of evaluation</a> (normally used for evaluating runtime values). We’ll do this in steps, so it’s possible that in the earlier stages, we don’t quite know the concrete type yet, but we’ll go down the “stack”, and come back up and fill those types in, too, once we know them.</p>

<ol>
  <li>
    <p><code>pluck()</code> on <code>Hlist![ &amp;str, bool, f32, i32 ]</code></p>

    <p>Since our <code>Target</code> type (<code>f32</code>) is not in the head, it doesn’t match with the <code>Here</code> case, so we will try to use the work-to-be-done case (<code>Index</code> is <code>There&lt;TailIndex&gt;</code>) and fill in as many types as we can for now. Let’s replace some type parameters with their concrete types where possible.</p>

    <p>Concrete types:</p>

    <ul>
      <li><code>Head</code> → <code>&amp;str</code></li>
      <li><code>Tail</code> → <code>Hlist![bool, f32, i32 ]</code> (remember, this is syntactic sugar for <code>HCons&lt;bool, HCons&lt;f32, HCons&lt;i32, HNil&gt;</code>)</li>
      <li><code>Target</code> → <code>f32</code> (this doesn’t change)</li>
      <li><code>Remainder</code> → Don’t know yet, but we already know that the current <code>Head</code> will be in it, since it isn’t the <code>target</code> type. And we know the tail of <code>Remainder</code> will be the remainder from <code>pluck()</code>ing <code>f32</code> from the tail, so we can reference it as <code>HCons&lt; &amp;str, &lt; Hlist![bool, f32, i32] as Plucker&lt;f32, There&lt;Here&gt;&gt; &gt;::Remainder &gt;</code> for now.</li>
      <li><code>TailIndex</code> → Don’t know yet, but we’ll find out. Let’s call reference it as <code>TailIndex1</code> for now.</li>
    </ul>
  </li>
  <li>
    <p><code>pluck()</code> on <code>Hlist![bool, f32, i32]</code> (<code>Tail</code> from 1.)</p>

    <p>Again, <code>f32</code> is not in the head of our type, so we know we aren’t going to be working with the exit-type typeclass implementation (e.g., <code>Index</code> is not <code>Here</code> yet.)</p>

    <p>Concrete types:</p>

    <ul>
      <li><code>Head</code> → <code>bool</code></li>
      <li><code>Tail</code> → <code>Hlist![ f32, i32 ]</code></li>
      <li><code>Target</code> → <code>f32</code> (again, this doesn’t change)</li>
      <li><code>Remainder</code> → Still don’t know yet, but we do know that <code>bool</code> will be in it since it isn’t our target. Similar to the previous step, we’ll tentatively call it <code>HCons&lt; bool, &lt; Hlist![ f32, i32] as Plucker&lt;f32, Here&gt; &gt;::Remainder &gt;</code></li>
      <li><code>TailIndex</code> → Don’t know yet, but let’s rename it <code>TailIndex2</code> for now and fill it in later.</li>
    </ul>
  </li>
  <li>
    <p><code>pluck()</code> on <code>Hlist![ f32, i32 ]</code> (<code>Tail</code> from 2.)</p>

    <p>The head has type <code>f32</code> and the target type is <code>f32</code>, so we’ve arrived at the exit-type implementation.</p>

    <p>Concrete types:</p>

    <ul>
      <li><code>Head</code> → <code>f32</code></li>
      <li><code>Tail</code> → <code>Hlist![ i32 ]</code></li>
      <li><code>Target</code> → <code>f32</code> !</li>
      <li><code>Remainder</code> → Since we’ve found our target, we know that <code>Remainder</code> must be the tail, and thus <code>Hlist![ i32 ]</code>, or its equivalent <code>HCons&lt; i32, HNil &gt;</code></li>
      <li><code>Index</code> → <code>Here</code> !</li>
    </ul>
  </li>
</ol>

<p>Now, that we’ve finally resolved a concrete type for <code>Index</code>, we can go backwards up the type-level stack and fill in our unknowns:</p>

<ul>
  <li>Step 2:
    <ul>
      <li><code>TailIndex2</code> → <code>Here</code>, which means that <code>Index</code> is <code>There&lt;Here&gt;&gt;</code></li>
      <li><code>Remainder</code> → <code>HList![ boo, i32 ]</code></li>
    </ul>
  </li>
  <li>Step 1:
    <ul>
      <li><code>TailIndex1</code> → <code>There&lt;Here&gt;</code>, which means that <code>Index</code> is <code>There&lt;There&lt;Here&gt;&gt;&gt;</code></li>
      <li><code>Remainder</code> → <code>HList![ &amp;str, boo, i32 ]</code></li>
    </ul>
  </li>
</ul>

<p>The compiler is thus able to find a trait implementation to <code>pluck()</code> a <code>f32</code> out of an <code>Hlist![ &amp;str, bool, f32, i32 ]</code> that looks like this (with all the type parameters bound to a concrete type):</p>

<p>```rust
// Remember Hlist![ … ] is just a type-macro to make it easier to write nested Hcons
impl Plucker&lt; f32, There&lt;There<here>&gt; &gt; for Hlist![ &amp;str, bool, f32, i32 ]
   where Hlist![ bool, f32, i32 ]: Plucker&lt; f32, There<here> &gt;
{
  type Remainder = HList![ &amp;str, boo, i32 ];</here></here></p>

<p>fn pluck(self) -&gt; (f32, Self::Remainder) {
    let (target, tail_remainder): (f32, &lt; Hlist![bool, f32, i32] as Plucker&lt;f32, There<here>&gt; &gt;::Remainder) =
      &lt; Hlist![ bool, f32, i32 ] as Plucker&lt;f32, There<here>&gt; &gt;::pluck(self.tail);
    (target,
     HCons {
         head: self.head,
         tail: tail_remainder,
     })
  }
}
```</here></here></p>

<p>Whew! That took a while, but I hope it helps illustrate how you can use a mental model similar to the substitution model of evaluation, but with types, in order to prove the existence of implementations for a given type.</p>

<p>By the way, by default, the compiler has a limit on how many levels of recursion/expansion this search for a typeclass instance goes. In my testing, I found this to be 64 levels and verified it to be so by looking at <a href="https://github.com/rust-lang/rust/blob/be304afc8c2b1a364bd406888b5378897ed82a9f/src/libsyntax/ext/expand.rs#L1122">Rust’s source code</a>. If you hit the limit, the compiler blow up, but will helpfully offer you a solution:</p>

<p><code>
error[E0275]: overflow evaluating the requirement `frunk_core::hlist::HNil: frunk_core::hlist::Plucker&lt;bool, _&gt;`
   --&gt; tests/derivation_tests.rs:296:35
    |
296 |     let (e, _): (bool, _) = hello.pluck();
    |                                   ^^^^^
    |
    = note: consider adding a `#![recursion_limit="128"]` attribute to your crate
    = note: required because of the requirements on the impl of `frunk_core::hlist::Plucker&lt;bool, frunk_core::hlist::There&lt;_&gt;&gt;` for `frunk_core::hlist::HCons&lt;bool, frunk_core::hlist::HNil&gt;`
</code></p>

<p>So, simply add <code>#![recursion_limit="128"]</code> to your crate. If you hit the limit again, the compiler will tell you to double the limit again. Ad infinitum.</p>

<h2 id="sculpting-hlists">Sculpting HLists</h2>

<p>Great ! Now that we’ve finished with <code>Plucker</code>, let’s go one level deeper: making use of <code>Plucker</code> to do something even more interesting; sculpting <code>HList</code>s !</p>

<p>Here is the basic idea of what we want to be able to do:</p>

<p>```rust
// Given an HList of type Hlist![ i32, &amp;str, f32, bool ]
let h] = hlist![9000, “joe”, 41f32, true];</p>

<p>// We’d like to be able to “sculpt” it into another, differently shaped HList.
//
// Of course, the types in the new HList must be a subset of the original HList,
// and if not, compilation should fail.
//
// Similar to pluck(), we’d also want the remainder of the original HList <em>not</em>
// used in the final result.
let (reshaped, remainder): (Hlist![ f32, i32, &amp;str ], _) = h.sculpt();
assert_eq!(reshaped, hlist![41f32, 9000, “joe”]);
assert_eq!(remainder, hlist![true]);</p>

<p>// the following should fail to compile, because there is no char in the original Hlist
let (reshaped, _) = (Hlist![char], _) = h.sculpt();
```</p>

<h3 id="implementation-intuition-1">Implementation intuition</h3>

<p>Let’s call our trait <code>Sculptor</code>. We should be able to re-use our <code>Plucker</code> trait, which which means we’ll work with <code>Target</code>s and <code>Index</code>s, <em>but</em> there’s more than one of each!</p>

<p>Intuitively, this is the kind of logic that we want:</p>

<p>Given <code>TargetHList</code> (target HList) and <code>SourceHList</code> (source HList), and assuming the types in the former is a subset (not necessarily in order though) of the latter:</p>

<ol>
  <li>Pluck value with the head type of <code>TargetHList</code> from <code>SourceHList</code>:
    <ul>
      <li>Store the result in a <code>(plucked, remainder)</code> tuple</li>
    </ul>
  </li>
  <li>Call <code>sculpt</code> on <code>remainder</code>, passing the tail type of the current <code>TargetHList</code> as the new    <code>TargetHList</code> type.
    <ul>
      <li>Store the result in a <code>(sculpted_tail, sculpted_remainder)</code> tuple</li>
    </ul>
  </li>
  <li>Return <code>(HCons { head: plucked, tail: sculpted_tail }, sculpted_remainder)</code></li>
</ol>

<p>Note that in 1. we are making use of <code>pluck()</code>, and there is a recursive call to <code>sculpt()</code> in 2. Since there is a recursive call to <code>sculpt()</code>, it means that we need an exit-type as well. Intuitively, we’ll pencil one in:</p>

<blockquote>
  <p>When the target HList is empty (HNil), return a tuple <code>(HNil, SourceHList)</code></p>
</blockquote>

<h3 id="first-attempt-1">First attempt</h3>

<p>Given our logic, let’s assume we want 4 type parameters in our trait. Our trait is a bit more complicated than our <code>Pluck</code> trait, but not by much. We make use of the same associated-type trick to hold the type of <code>Remainder</code> to be returned as the 2nd element in our type that will be filled-in when we write instances of the trait.</p>

<p>```rust
trait Sculptor&lt;Target, TargetTail, HeadIndex, TailIndices&gt; {</p>

<p>type Remainder;</p>

<p>fn sculpt(self) -&gt; (HCons&lt;Target, TargetTail&gt;, Self::Remainder);
}
```</p>

<p>The instance of <code>Sculptor</code> for the exit-type should be simple, right?:</p>

<p>```rust
// Our exit condition is when Target is HNil, so we don’t care about the tail of the target
// nor do we really care about the type of SourceHList
impl &lt;TargetTail, HeadIndex, TailIndices, SourceHList&gt; Sculptor&lt;HNil, TargetTail, HeadIndex, TailIndices&gt; for SourceHList {</p>

<pre><code>type Remainder = Source;

// ?!?!? HNil as the head type of an HCons doesn't make sense
fn sculpt(self) -&gt; (HCons&lt;HNil, TargetTail&gt;, Self::Remainder) {
    // nevermind
}
</code></pre>

<p>}
```</p>

<p>Ooops; that didn’t work; our type signature for the trait can’t be fulfilled when implementing our instance! We simply have too many type parameters in our trait, even for the exit-type implementation (try implementing for the recursion case…it’ll become more apparent)</p>

<p>Back to the drawing board.</p>

<h3 id="second-attempt-1">Second attempt</h3>

<p>Let’s collapse our target-related type parameters into a single <code>Target</code> type parameter and our indices-related type parameters into a single <code>Indices</code> type parameter in our <code>Sculptor</code> trait declaration, and rely on the implementations to dictate (specialise) what types they should be (similar to how the <code>Plucker</code> trait had no mention of <code>There</code> or <code>Here</code>).</p>

<p>```rust
trait Sculptor&lt;Target, Indices&gt; {</p>

<pre><code>type Remainder;

fn sculpt(self) -&gt; (Target, Self::Remainder); } ```
</code></pre>

<p>The exit-type implementation will still be when we have <code>HNil</code> as the target. Thinking it through further, in the case that we don’t have a <code>HNil</code> as the target, it’s obvious that <code>Source</code> can then be literally anything, so we’ll rename its type parameter <code>Source</code>. Since our intention for <code>Sculptor</code> is for <code>Indices</code> to be an HList of <code>Here</code> or <code>There&lt;A&gt;</code> (one for each type in our <code>Target</code> HList), the exit <code>Indices</code> must therefore be a valid Hlist. Since we don’t need an index to find an empty target, let’s make <code>Indices</code> <code>HNil</code> for simplicity.</p>

<p>```rust
impl<source /> Sculptor&lt;HNil, HNil&gt; for Source {
    // Since Our Target is HNil, we just return the Source
    type Remainder = Source;</p>

<pre><code>fn sculpt(self) -&gt; (HNil, Self::Remainder) {
    (HNil, self)
} } ```
</code></pre>

<p>To figure out the type parameters needed for our work-to-be-done type, let’s work through the logic we laid out earlier.</p>

<p>At minimum, we know we’re writing an instance of <code>Sculptor</code> for a Source of type HList, and our Target type is also an HList, so we’ll use <code>SHead</code> and <code>STail</code> to describe the “Source” HList (so <code>HCons&lt;SHead, STail&gt;</code>), and <code>THead</code> and <code>TTail</code> to denote the “Target” HList (similarly, <code>HCons&lt;THead, TTail&gt;</code>).</p>

<blockquote>
  <ol>
    <li>Pluck value with the head type of <code>TargetHList</code> from <code>SourceHList</code>:
      <ul>
        <li>Store the result in a <code>(plucked, remainder)</code> tuple</li>
      </ul>
    </li>
  </ol>
</blockquote>

<p>Since we need to <code>pluck()</code> a <code>THead</code> from our Source HList, we’ll need a type parameter for the first index, so let’s name it <code>IndexHead</code>. In addition, in order to <code>pluck()</code>, we need a <code>Plucker</code> too, so this constraint is needed somewhere in our implementation declaration:</p>

<p><code>rust
 HCons&lt;SHead, STail&gt;: Plucker&lt;THead, IndexHead&gt;
</code></p>

<blockquote>
  <ol>
    <li>Call <code>sculpt()</code> on <code>remainder</code>, passing the tail type of the current <code>TargetHList</code> as the new <code>TargetHList</code> type.
      <ul>
        <li>Store the result in a <code>(sculpted_tail, sculpted_remainder)</code> tuple</li>
      </ul>
    </li>
  </ol>
</blockquote>

<p>Since we want to sculpt the remainder of calling <code>pluck()</code> in step 1. into type <code>TTail</code> (tail of <code>TargetHList</code>), we’ll need to have an HList of indices for that purpose too, so let’s call it <code>IndexTail</code>. Note that we don’t need a separate type parameter for the remainder from 1 because we can take advantage of the associated type on <code>Plucker</code>.</p>

<p><code>rust
// In English, this is read as:
// "The remainder of plucking the Target head type (THead) out of the source HList
// must have a Sculptor implementation that lets us turn it into the tail type of
// the Target HList (TTail) using the tail of the current Indices (IndexTail)"
&lt;HCons&lt;SHead, STail&gt; as Plucker&lt;THead, IndexHead&gt;&gt;::Remainder: Sculptor&lt;TTail, IndexTail&gt;
</code></p>

<blockquote>
  <ol>
    <li>Return <code>(HCons { head: plucked, tail: sculpted_tail }, sculpted_remainder)</code></li>
  </ol>
</blockquote>

<p>What will the <code>Remainder</code> type be? It should be the remainder of sculpting the remainder from plucking the head type (<code>THead</code>) out of the current source HList into <code>TTail</code> (yeah…)</p>

<p><code>rust
type Remainder = &lt;&lt;HCons&lt;SHead, STail&gt; as Plucker&lt;THead, IndexHead&gt;&gt;::Remainder as Sculptor&lt;TTail, IndexTail&gt;&gt;::Remainder;
</code></p>

<p>Putting all these types together with the logic, we have</p>

<p>```rust
impl &lt;THead, TTail, SHead, STail, IndexHead, IndexTail&gt; Sculptor&lt;HCons&lt;THead, TTail&gt;, HCons&lt;IndexHead, IndexTail»
    for HCons&lt;SHead, STail&gt;
    where
        HCons&lt;SHead, STail&gt;: Plucker&lt;THead, IndexHead&gt;,
        &lt;HCons&lt;SHead, STail&gt; as Plucker&lt;THead, IndexHead»::Remainder: Sculptor&lt;TTail, IndexTail&gt; {</p>

<pre><code>type Remainder = &lt;&lt;HCons&lt;SHead, STail&gt; as Plucker&lt;THead, IndexHead&gt;&gt;::Remainder as Sculptor&lt;TTail, IndexTail&gt;&gt;::Remainder;

fn sculpt(self) -&gt; (HCons&lt;THead, TTail&gt;, Self::Remainder) {
    let (p, r): (THead, &lt;HCons&lt;SHead, STail&gt; as Plucker&lt;THead, IndexHead&gt;&gt;::Remainder) = self.pluck();
    let (tail, tail_remainder): (TTail, Self::Remainder) = r.sculpt();
    (
        HCons {
            head: p,
            tail: tail
        },
        tail_remainder
    )
}
</code></pre>

<p>}
```</p>

<p>As you can see, our implementations of <code>Sculptor</code> is type-recursive in an interesting way, and there are quite a few dependencies that need to be worked out between all the type parameters and the <code>Plucker</code> trait <em>as well as</em> the <code>Sculptor</code> trait itself (it appears in the <code>where</code> after all). Fortunately, the Rust compiler will do that for us (and if need be, tell you to raise the <code>#![recursion_limit]</code> in your crate).</p>

<p>If you’re not convinced this works, please by all means check out the <a href="https://beachape.com/frunk/frunk_core/hlist/index.html"><code>hlist</code> module</a> in Frunk, in particular the <a href="https://beachape.com/frunk/frunk_core/hlist/trait.Sculptor.html">Sculptor trait</a>.</p>

<h2 id="conclusion">Conclusion</h2>

<p>One last thing: the <code>Plucker</code> and <code>Sculptor</code> things aren’t just cute exercises; <code>Plucker</code> has already paid dividends when modeling <code>Sculptor</code>, and <code>Sculptor</code>, well, it’s instrumental in letting us do cool stuff like convert between structs with different <a href="/blog/2017/03/04/labelledgeneric-in-rust-what-why-how/">LabelledGeneric implementations</a> (to an extent, anyways), and other, even cooler generic functions. We’ll talk more about this in <a href="/blog/2017/04/12/boilerplate-free-struct-transforms-in-rust/">another post</a>.</p>

<p>If you do a search, you’ll find a number of articles on the Interwebs that introduce Rust’s trait system, but not many that go deep into how to use it when you need to do non-trivial type-level recursion in your trait implementations (though how often this need arises is … another topic altogether). I also find that people generally don’t talk about what they did <em>wrong</em>, so I wanted to share my failed approaches as well.</p>

<p>The goal of this post is to hopefully help others who are curious, or have a need to do something similar, as well as to leave notes for myself in case I ever need to revisit this in the future. The mental models for breaking down the problem, defining types, and building up to an implementation might not work for everyone, but they’ve helped me.</p>

<p>Personally, I think it’s awesome that a close-to-the-metal systems programming language like Rust has a powerful enough compiler and type-system to allow for these kinds of techniques. As you can see, we’ve managed to build powerful, reusable abstractions without doing anything unsafe, and we’ve exposed an API that requires just the bare minimum of type annotations; Rust infers the rest :) In any case, I hope this post was useful, and as usual, please chime in with questions and suggestions.</p>

<h3 id="credit">Credit</h3>
<ol>
  <li>The <code>Here</code> and <code>There&lt;A&gt;</code> design was largely gleaned from <a href="https://github.com/Sgeo/hlist/blob/master/src/lib.rs#L30">this code</a>. I stand on the shoulders of giants :)</li>
</ol>

<p>** It goes without saying that these operations need to be type-safe. That is, they are verified by the compiler without using any unsafe tricks that could blow up at runtime.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LabelledGeneric in Rust: What, Why, How?]]></title>
    <link href="https://beachape.com/blog/2017/03/04/labelledgeneric-in-rust-what-why-how/"/>
    <updated>2017-03-04T12:23:00+00:00</updated>
    <id>https://beachape.com/blog/2017/03/04/labelledgeneric-in-rust-what-why-how</id>
    <content type="html"><![CDATA[<p>What is <code>LabelledGeneric</code>? How does one encode type-level Strings in Rust? What is a labelled HList?</p>

<p>Hold on, let’s take a step back.</p>

<p>In a previous post about <a href="/blog/2017/02/04/rust-generic-not-generics/">implementing <code>Generic</code> in Rust</a>, I briefly mentioned the fact that <code>Generic</code> could cause silent failures at runtime if you have 2 structs that are identically shaped type-wise, but have certain fields swapped.</p>

<p>While we can work around this using wrapper types, that solution leaves something to be desired, because, well, more boilerplate adds noise and requires more maintenance.</p>

<p>Ideally, we want to have something like this, where the following works:</p>

<p>```rust
#[derive(LabelledGeneric)]
struct NewUser&lt;’a&gt; {
    first_name: &amp;’a str,
    last_name: &amp;’a str,
    age: usize,
}</p>

<h1 id="derivelabelledgeneric">[derive(LabelledGeneric)]</h1>
<p>struct SavedUser&lt;’a&gt; {
    first_name: &amp;’a str,
    last_name: &amp;’a str,
    age: usize,
}</p>

<p>let n_user = NewUser {
                    first_name: “Moe”,
                    last_name: “Ali”,
                    age: 30
                };</p>

<p>// Convert from NewUser to SavedUser
let s_user: SavedUser = labelled_convert_from(n_user);
```</p>

<p>but the following fails at compile-time because the fields are mis-matched (<code>first_name</code> and <code>last_name</code> have been swapped):</p>

<p>```rust
// Uh-oh! Fields are jumbled :(
#[derive(LabelledGeneric)]
struct JumbledUser&lt;’a&gt; {
    last_name: &amp;’a str,
    first_name: &amp;’a str,
    age: usize
}</p>

<p>// This should fail at compile-time because last_name and first_name are swapped
// even if they have the same type
let d_user = <jumbleduser as="" labelledgeneric="">::convert_from(s_user);
```</jumbleduser></p>

<p>The solution to this sort of problem has been in <a href="https://github.com/milessabin/shapeless">Shapeless</a> for some time; by using <code>HList</code>s where each cell contains not just a value, but instead hold <em>named</em> fields, where each value is labelled <em>at the type level</em>.</p>

<p>Let’s take a look at how Frunk implements <code>Field</code> values and <code>LabelledGeneric</code> in Rust :)</p>

<!-- more -->

<h2 class="no_toc" id="add-frunk-to-your-project">Add Frunk to your project</h2>

<p><a href="https://github.com/lloydmeta/frunk">Frunk</a> is published to <a href="//crates.io/crates/frunk">Crates.io</a>, so to begin, add the crate to your list of dependencies:</p>

<p><a href="https://crates.io/crates/frunk"><img src="https://img.shields.io/crates/v/frunk.svg" alt="Crates.io" /></a></p>

<p><code>rust
[dependencies]
frunk = "${latest_version}"
</code></p>

<h2 class="no_toc" id="outline">Outline</h2>
<ul id="markdown-toc">
  <li><a href="#derivelabelledgeneric">[derive(LabelledGeneric)]</a>    <ul>
      <li><a href="#why-motivation">Why? (Motivation)</a>        <ul>
          <li><a href="#silent-runtime-errors-with-generic">Silent runtime errors with <code>Generic</code></a></li>
        </ul>
      </li>
    </ul>
  </li>
  <li><a href="#derivegeneric">[derive(Generic)]</a>    <ul>
      <li><a href="#labelledgeneric-to-the-rescue"><code>LabelledGeneric</code> to the rescue</a></li>
    </ul>
  </li>
  <li><a href="#derivelabelledgeneric-1">[derive(LabelledGeneric)]</a></li>
  <li><a href="#derivegeneric-1">[derive(Generic)]</a>    <ul>
      <li><a href="#field-"><code>Field</code> ??</a></li>
      <li><a href="#how-it-works">How it works</a>        <ul>
          <li><a href="#fieldname-type"><code>Field&lt;Name, Type&gt;</code></a>            <ul>
              <li><a href="#type-level-characters-and-strings">Type-level characters and strings</a></li>
            </ul>
          </li>
          <li><a href="#anonymous-records">(Anonymous) Records!</a></li>
          <li><a href="#field-and-labelledgeneric"><code>Field</code> and <code>LabelledGeneric</code></a></li>
          <li><a href="#how-the-labelledgeneric-derivation-is-generated">How the <code>LabelledGeneric</code> derivation is generated</a></li>
        </ul>
      </li>
      <li><a href="#conclusion">Conclusion</a></li>
      <li><a href="#links">Links</a></li>
    </ul>
  </li>
</ul>

<h2 id="why-motivation">Why? (Motivation)</h2>

<h3 id="silent-runtime-errors-with-generic">Silent runtime errors with <code>Generic</code></h3>

<p>To illustrate the problem, observe that the following 2 structs have the exact same “shape”</p>

<p>```rust
#[derive(Generic)]
struct NewUser&lt;’a&gt; {
    first_name: &amp;’a str,
    last_name: &amp;’a str,
    age: usize,
}</p>

<h1 id="derivegeneric">[derive(Generic)]</h1>
<p>struct JumbledUser&lt;’a&gt; {
    last_name: &amp;’a str,
    first_name: &amp;’a str,
    age: usize
}
```</p>

<p>That is, the <code>Generic</code> representation of their fields as <code>Generic</code> is simply <code>HList![&amp;'a str, &amp;'a str, usize]</code>. As a result, when we do the following:</p>

<p>```rust
let n_user = NewUser {
                    first_name: “Moe”,
                    last_name: “Ali”,
                    age: 30
                };</p>

<p>// Convert from NewUser to JumbledUser
let s_user: JumbledUser = convert_from(n_user);
```</p>

<p>Oh no! <code>s_user</code> has <code>first_name</code> and <code>last_name</code> flipped :(</p>

<p>As explained near the end of the post <a href="/blog/2017/02/04/rust-generic-not-generics/">introducing Generic</a>, you can catch this sort of mistake by introducing wrapper types like <code>FirstName&lt;'a&gt;(&amp;' str)</code> for each field, but that introduces more boilerplate.  This sucks, because <code>Generic</code> is supposed to help <em>avoid</em> boilerplate!</p>

<p>Can we have our cake and eat it too ?</p>

<h3 id="labelledgeneric-to-the-rescue"><code>LabelledGeneric</code> to the rescue</h3>

<p><code>LabelledGeneric</code> was introduced in v0.1.12 of Frunk to solve this exact problem. This is how you use it.</p>

<p>```rust
#[derive(LabelledGeneric)]
struct NewUser&lt;’a&gt; {
    first_name: &amp;’a str,
    last_name: &amp;’a str,
    age: usize,
}</p>

<h1 id="derivelabelledgeneric-1">[derive(LabelledGeneric)]</h1>
<p>struct SavedUser&lt;’a&gt; {
    first_name: &amp;’a str,
    last_name: &amp;’a str,
    age: usize,
}</p>

<p>let n_user = NewUser {
                    first_name: “Moe”,
                    last_name: “Ali”,
                    age: 30
                };</p>

<p>// Convert from NewUser to SavedUser
let s_user: SavedUser = labelled_convert_from(n_user);</p>

<h1 id="derivegeneric-1">[derive(Generic)]</h1>
<p>struct JumbledUser&lt;’a&gt; {
    last_name: &amp;’a str,
    first_name: &amp;’a str,
    age: usize
}
// ⬇︎ This will fail at compile time
let j_user: JumbledUser = labelled_convert_from(n_user);
```
There isn’t a whole lot different to using <code>LabelledGeneric</code> vs using <code>Generic</code>:</p>

<ol>
  <li>Instead of deriving <code>Generic</code>, derive <code>LabelledGeneric</code></li>
  <li>Instead of calling <code>convert_from</code>, call <code>labelled_convert_from</code></li>
</ol>

<p>These 2 changes buy you a lot more type-safety at compile time, with zero boilerplate. By the way, if you’d like the compiler to automatically “align”, the generic representations so that you <em>could</em> instantiate a <code>JumbledUser</code> from a <code>NewUser</code>, then stay tuned for a <a href="/blog/2017/04/12/boilerplate-free-struct-transforms-in-rust/">later post</a> ;)</p>

<p>The tl;dr version of how this works is that deriving by <code>LabelledGeneric</code>, we make the struct an instance of the <code>LabelledGeneric</code> typeclass.  This typeclass is almost identical to the <code>Generic</code> typeclass, but the <code>derive</code> does something a bit different with the generic representation of the struct: it isn’t just an <code>HList</code> wrapping naked values.</p>

<p>Instead, the generic representation will be an <code>HList</code> where each cell will contain <em>field name</em> information, at the type-level, and conceptually has the following types:</p>

<p>```rust
// LabelledGeneric Representation for NewUser
type NewUserRepr = HList![
  Field&lt;first_name, &amp;’a str&gt;,
  Field&lt;last_name, &amp;’a str&gt;,
  Field&lt;age, usize&gt;];</p>

<p>// LabelledGeneric Representation for SavedUser
type SavedUserRepr = HList![
  Field&lt;first_name, &amp;’a str&gt;,
  Field&lt;last_name, &amp;’a str&gt;,
  Field&lt;age, usize&gt;];</p>

<p>// LabelledGeneric Representation for JumbledUser
type JumbledUserRepr = HList![
  Field&lt;last_name, &amp;’a str&gt;,
  Field&lt;first_name, &amp;’a str&gt;,
  Field&lt;age, usize&gt;];
```</p>

<p>This difference in type-level representation is how the compiler knows that one can’t simply convert a <code>NewUser</code> or <code>SavedUser</code> into a <code>JumbledUser</code> via <code>labelled_convert_from</code>.</p>

<h3 id="field-"><code>Field</code> ??</h3>

<p>What is <code>Field</code> ? It’s simply a container struct that is parameterised by 2 types, and has the following signature:</p>

<p><code>rust
pub struct Field&lt;Name, Type&gt; { ... }
</code></p>

<p>The first type parameter is <code>Name</code> and its purpose is to contain a type-level String, and the second type parameter is <code>Type</code>, which reflects the type of value contained inside the struct.</p>

<p>It may help to think of <code>Field</code> as an ad-hoc wrapper type.</p>

<h2 id="how-it-works">How it works</h2>

<h3 id="fieldname-type"><code>Field&lt;Name, Type&gt;</code></h3>

<p>The full definition of <code>Field</code> is currently as follows:</p>

<p><code>rust
pub struct Field&lt;Name, Type&gt; {
    name: PhantomData&lt;Name&gt;,
    pub value: Type,
}
</code></p>

<p><code>PhantomData</code> is used to allow us to bind a concrete type to the <code>Name</code> type parameter in an instance of <code>Field</code> without actually having it take up any space (for more details on Phantom data, refer to the <a href="https://doc.rust-lang.org/std/marker/struct.PhantomData.html">official docs</a>).</p>

<p>To construct a <code>Field</code>, Frunk exposes a macro called <code>field!</code> so that you don’t need to touch <code>PhantomData</code> yourself.</p>

<p>```rust
// Usage: we let the compiler figure out the value type for us
let age = field!((a, g, e), 3);</p>

<p>assert_eq!(age.name, “age”);
assert_eq!(age.value, 3);
```</p>

<p>For more information about the <code>field!</code> macro, please refer to its <a href="https://beachape.com/frunk/frunk_core/macro.field.html">Rustdoc page</a>.  Astute readers will notice the odd <code>(a,g,e)</code> type used for naming. What is that about ???</p>

<h4 id="type-level-characters-and-strings">Type-level characters and strings</h4>

<p>In order represent characters at the type level, Frunk currently uses <code>enum</code>s that have zero members. This is because empty enums have distinct types, and yet cannot be instantiated at runtime and thus are guaranteed to incur zero cost.</p>

<p>Conceptually, we declare one enum for every character we want to represent:</p>

<p>```rust
pub enum a {}
pub enum b {}
pub enum c {}
// …
pub enum A {}
// … etc
// Numbers can’t be identifiers, so we preface them with an underscore
pub enum _1 {}
pub enum _2 {}</p>

<p>// In reality, the above is generated by a macro.
```</p>

<p>This means that characters outside English alphanumeric range will need to be specially encoded (the <code>LabelledGeneric</code> derivation uses unicode, but more on this later), but for the most part, this should suffice for the use case of encoding field names as types.</p>

<p>As you may have guessed, type-level strings are then simply represented as tuple types, hence <code>(a,g,e)</code>. For the sake of reducing noise, in the rest of this post, we will refer to these name-types without commas and parentheses.</p>

<p><strong>Note</strong>: This type-level encoding of strings may change in the future.</p>

<h3 id="anonymous-records">(Anonymous) Records!</h3>

<p>Combining the <code>Field</code> and <code>HList</code> constructs gets us something else: Records. I believe once upon a time, Rust supported anonymous structs; well, you can get most of that functionality back with Frunk!</p>

<p>```rust
let record = hlist![
    field!(name, “Joe”),
    field!(age, 30)
];</p>

<p>// We’ll talk about pluck() in a later post, but just an FYI, it returns the
// target value with the type you specified as well as the remainder
// of the HList in a pair. It is checked at compile time to make sure it never
// fails at runtime.
let (name, _): (Field&lt;name, _&gt;, _) = record.pluck();
assert_eq!(name.value, “Joe”)
```</p>

<p>This kind of thing is sometimes called an “anonymous Record” in Scala (see <a href="https://github.com/scala-records/scala-records">scala-records</a>, or <a href="https://github.com/milessabin/shapeless/blob/master/examples/src/main/scala/shapeless/examples/records.scala">Shapeless</a>).</p>

<p>In the future, the anonymous Records API in Frunk might be improved. As it stands, it exists mostly for the purpose of <code>LabelledGeneric</code> and is a bit noisy to use.</p>

<h3 id="field-and-labelledgeneric"><code>Field</code> and <code>LabelledGeneric</code></h3>

<p>So, what is the relationship between <code>Field</code> and  the <code>LabelledGeneric</code> typeclass?</p>

<p>Quite simply, the associated <code>Repr</code> type of an instance of <code>LabelledGeneric</code> should have the type of an anonymous record (labelled <code>HList</code>).</p>

<p>So, given the following</p>

<p><code>rust
struct Person {
  name: String,
  age: usize
}
</code></p>

<p>This is one possible implementation of <code>LabelledGeneric</code> for <code>Person</code>:</p>

<p>```rust
impl LabelledGeneric for Person {</p>

<p>type Repr = HList![ Field&lt;name, String&gt;, Field&lt;age, usize&gt; ];</p>

<p>fn into(self) -&gt; Self::Repr {
    hlist![
      field!(name, self.name),
      field!(age, self.age)
    ]
  }</p>

<p>fn from(r: Self::Repr) -&gt; Self {
    let hlist_pat![ name, age ] = r;
    Person {
      name: name.value,
      age: age.value
    }
  }</p>

<p>}
```</p>

<p>But writing that yourself is tedious <strong>and</strong> error-prone, so Frunk provides a derivation for you.</p>

<h3 id="how-the-labelledgeneric-derivation-is-generated">How the <code>LabelledGeneric</code> derivation is generated</h3>

<p>As illustrated earlier, you can do the following to create an instance of <code>LabelledGeneric</code> for your struct:</p>

<p><code>rust
#[derive(LabelledGeneric)]
struct Person {
  name: String,
  age: usize
}
</code></p>

<p>It generates something conceptually similar to what we <a href="#labelled-and-labelledgeneric">had above</a>, so we won’t repeat that here.</p>

<p>That said, there is something special about the way that characters outside the range of the standard English alphabet and digits are handled. For each of those characters, we get the Unicode hexcode and use those digits, sandwiched by <code>_uc</code> and <code>uc_</code> delimiters, as the type-level representation.</p>

<p>```rust
// This isn’t possible (yet) in Rust, but let’s pretend it is
struct Fancy {
  ❤: usize
}</p>

<p>// Since ❤ has a Unicode hexcode of \u{2764}\u{fe0f}, the
// labelled generic representation for the above would be
type Repr = HList![ Field&lt;<em>ucu2764ufe0fuc</em>, usize&gt; ]
```</p>

<p>This allows us to effectively represent virtually any legal identifier at the type level, even when the ASCII-only restriction for identifiers is lifted from stable Rust. For more details, take a look at how characters are matched to identifiers <a href="https://github.com/lloydmeta/frunk/blob/8c75c23b1986e533ada83ba89b3b0de584db0f23/derives/src/derive_labelled_generic.rs#L105-L124">here</a>.</p>

<h2 id="conclusion">Conclusion</h2>
<p>In closing, I’d like to stress that all the abstractions and techniques described in this post are type-safe (no casting happening) and thus get fully verified by Rust’s compiler and its strong type system.</p>

<p>As far as I am aware, this is the first implementation of labelled HLists (aka anonymous Records) and <code>LabelledGeneric</code> in Rust, and I hope this post did a good job of explaining what problems they solve, what they are, how they work, and why you might want to use them. As usual, please give them a go and chime in with questions, comments, ideas, or PRs!</p>

<p>Also, as alluded to in <a href="#labelledgeneric-to-the-rescue">the section</a> introducing <code>LabelledGeneric</code>, there is a way to automatically match up out-of-order fields. We’ll go through this in another post.</p>

<h2 id="links">Links</h2>

<ol>
  <li><a href="https://github.com/lloydmeta/frunk">Frunk on Github</a></li>
  <li><a href="https://crates.io/crates/frunk">Frunk on Crates.io</a></li>
</ol>
]]></content>
  </entry>
  
</feed>
