<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Error Handling | BeachApe.]]></title>
  <link href="https://beachape.com/blog/categories/error-handling/atom.xml" rel="self"/>
  <link href="https://beachape.com/"/>
  <updated>2017-03-12T02:32:52+09:00</updated>
  <id>https://beachape.com/</id>
  <author>
    <name><![CDATA[Lloyd]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Accumulating Results in Rust With Validated]]></title>
    <link href="https://beachape.com/blog/2016/10/24/accumulating-results-in-rust-with-validated/"/>
    <updated>2016-10-24T15:00:00+09:00</updated>
    <id>https://beachape.com/blog/2016/10/24/accumulating-results-in-rust-with-validated</id>
    <content type="html"><![CDATA[<p>Rust comes out of the box with a <code>Result&lt;T, E&gt;</code> type in its standard library. For those not familiar with it, it is a union-like enum type where <code>T</code> is a type parameter denoting the kind object held in a <code>Result</code> in the success case (<code>Result::Ok&lt;T&gt;</code>), and <code>E</code> is a type paramter denoting the kind of error object held in the failure case (<code>Result::Err&lt;E&gt;</code>).  In Scala, this is represented in the standard library as <code>Either[+A, +B]</code>, where the the success and error type params are swapped (traditionally, the one on the left stands for error and the one on the right is…well, right).</p>

<p>By default, <code>Result</code> comes with really good support for what I call “early return on error”. That is, you can use <code>map</code>, <code>and_then</code> (flatMap in some other languages) to transform them, and if there’s an error at an intermediate step, the chain returns early with a <code>Result::Err&lt;E&gt;</code> :</p>

<p><code>rust
fn double_arg(mut argv: env::Args) -&gt; Result&lt;i32, String&gt; {
    argv.nth(1)
        .ok_or("Please give at least one argument".to_owned())
        .and_then(|arg| arg.parse::&lt;i32&gt;().map_err(|err| err.to_string()))
        .map(|n| 2 * n)
}
</code></p>

<p>But .. what happens when you have multiple <code>Result</code>s that are independent of each other, and you want to accumulate not only their collective success case, but also <em>all</em> their collective errors in the failure case?</p>

<p><img class="center" src="/images/oh-shit-cat.jpg" title="‘wait, we have to accumulate errors? oh … shiz’" ></p>

<p>Let’s have a look at <a href="https://beachape.com/frunk/frunk/validated">Validated</a> in <a href="https://crates.io/crates/frunk">Frunk</a> (which is itself inspired by <a href="http://typelevel.org/cats/datatypes/validated.html"><code>Validated</code> in Cats</a>)</p>

<!-- more -->

<p><a href="https://github.com/lloydmeta/frunk">Frunk</a> is published to <a href="//crates.io/crates/frunk">Crates.io</a>, so to begin, add the crate to your list of dependencies:</p>

<p><code>rust
[dependencies]
frunk = "0.1.9"
</code></p>

<p>By the way, to take a dive into the deep end, jump <a href="https://beachape.com/frunk/frunk/validated/index.html" target="_blank">straight to Validated’s Rustdocs</a>.</p>

<h3 id="imports">Imports</h3>

<p>Next, let’s add a few imports.</p>

<p><code>rust
use frunk::hlist::*; // brings the .to_tuple2() method in scope so we can destructure our HList easily
use frunk::validated::*;
</code></p>

<h3 id="scenario">Scenario</h3>

<p>Suppose we have a <code>Person</code> struct defined as follows:</p>

<p><code>rust
#[derive(PartialEq, Eq, Debug)]
struct Person {
    age: i32,
    name: String,
    email: String,
}
</code></p>

<p>And, we have 3 methods that produce age, name and email for us, but all could potentially fail with a <code>Nope</code> error.</p>

<p>```rust
/// For demonstrations purposes only
#[derive(PartialEq, Eq, Debug)]
pub enum YahNah {
    Yah,
    Nah,
}</p>

<p>/// Our Errors
#[derive(PartialEq, Eq, Debug)]
pub enum Nope {
    NameNope,
    AgeNope,
    EmailNope,
}</p>

<p>fn get_name(yah_nah: YahNah) -&gt; Result&lt;String, Nope&gt; {
    match yah_nah {
        YahNah::Yah =&gt; Result::Ok(“James”.to_owned()),
        _ =&gt; Result::Err(Nope::NameNope),
    }
}</p>

<p>fn get_age(yah_nah: YahNah) -&gt; Result&lt;i32, Nope&gt; {
    match yah_nah {
        YahNah::Yah =&gt; Result::Ok(32),
        _ =&gt; Result::Err(Nope::AgeNope),
    }
}</p>

<p>fn get_email(yah_nah: YahNah) -&gt; Result&lt;String, Nope&gt; {
    match yah_nah {
        YahNah::Yah =&gt; Result::Ok(“hello@world.com”.to_owned()),
        _ =&gt; Result::Err(Nope::EmailNope),
    }
}
```</p>

<p>In real life, these methods would probably be taking an HTML form as an argument and doing some kind of parsing/validation or making calls to a service somewhere, but for simplicity, in our example, each of them takes a single argument that will let us toggle between the success and error cases.</p>

<h3 id="using-validated">Using Validated</h3>

<p>Having set all that up, actually using <code>Validated</code> to accumulate our <code>Results</code> is actually very simple:</p>

<p>```rust
let v = get_name(YahNah::Yah).into_validated() +
           get_age(YahNah::Yah) +
           get_email(YahNah::Yah);</p>

<p>// Turn it into a result and then map, passing a lambda that takes the HList contained inside
let person = v.into_result()
              .map(|hlist| {
                  let hlist_pat!(name, age, email) = hlist;
                  Person {
                      name: name,
                      age: age,
                      email: email,
                  }
              });</p>

<p>assert_eq!(person.unwrap(),
                   Person {
                       name: “James”.to_owned(),
                       age: 32,
                       email: “hello@world.com”.to_owned(),
                   });
```</p>

<p>As you can see, all we need to do is call <code>into_validated()</code> on a given <code>Result</code> to kick off the validation context, and use <code>+</code> to add subsequent <code>Result</code>s into it. At the end, you call <code>into_result()</code> on the <code>Validated</code> to turn it back into a <code>Result</code> and map on the <code>HList</code> that is contained inside.  Inside the lambda, we destructure the <code>HList</code> using the <code>hlist_pat!</code> macro, and then instantiate our <code>Person</code>.</p>

<p>Oh, in case it isn’t obvious, the <code>hlist</code> passed to the lambda when we map is <strong>statically typed</strong> in the order that your <code>Result</code>s were added into the <code>Validated</code> context, so your code is completely type safe. If you want to learn more about HLists in Frunk, check out <a href="/blog/2016/10/23/rust-hlists-heterogenously-typed-list/">this blog post</a>.</p>

<p>Having said that, perhaps in the success case, not much has really changed in comparison to using naked <code>Result</code>s. That is, you could have gotten here simply by chaining with <code>map</code> and/or <code>and_then</code>. But take a look at what happens when one or more of these fail:</p>

<p>```rust
let v = get_name(YahNah::Nah).into_validated() +  // get_name will fail
           get_age(YahNah::Yah) +  // get_age will succeed
           get_email(YahNah::Nah); // get_email will fail</p>

<p>let person = v.into_result()
              .map(|_| unimplemented!()); // won’t get here anyways</p>

<p>assert_eq!(person.unwrap_err(),
           vec![Nope::NameNope, Nope::EmailNope]);
```</p>

<p>As you can see, the failure case is more interesting because <code>Validated</code> gives us the ability to accumulate <em>all</em> errors cleanly. For operations like parsing user input or checking parameters passed into our API, this non-early-abort behaviour is highly desirable compared with telling the user what went wrong One. Thing. At. At. Time.</p>

<p>Oh, <code>Validated</code>s can also be appended to each other:</p>

<p><code>rust
let r1: Result&lt;String, String&gt; = Result::Ok(String::from("hello"));
let r2: Result&lt;i32, String&gt; = Result::Ok(1);
let r3: Result&lt;i32, String&gt; = Result::Ok(3);
let v1 = r1.into_validated();
let v2 = r2.into_validated();
let v3 = r3.into_validated();
let comb = v1 + v2 + v3;
assert_eq!(comb, Validated::Ok(hlist!(String::from("hello"), 1, 3)))
</code></p>

<h2 id="conclusion">Conclusion</h2>

<p>Please take <code>Validated</code> out for a spin and send suggestions, comments, PRs !  I’ve found this abstraction to be helpful in the Scala world so I’m eager to hear impressions from Rustaceans.</p>

<h2 id="links">Links</h2>

<ol>
  <li><a href="https://github.com/lloydmeta/frunk">Frunk on Github</a></li>
  <li><a href="https://crates.io/crates/frunk">Frunk on Crates.io</a></li>
</ol>

]]></content>
  </entry>
  
</feed>
