<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Rust | BeachApe.]]></title>
  <link href="https://beachape.com/blog/categories/rust/atom.xml" rel="self"/>
  <link href="https://beachape.com/"/>
  <updated>2017-05-29T02:32:07+09:00</updated>
  <id>https://beachape.com/</id>
  <author>
    <name><![CDATA[Lloyd]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Rust: A Scala Engineer's Perspective]]></title>
    <link href="https://beachape.com/blog/2017/05/24/rust-from-scala/"/>
    <updated>2017-05-24T13:45:00+09:00</updated>
    <id>https://beachape.com/blog/2017/05/24/rust-from-scala</id>
    <content type="html"><![CDATA[<p>The 1st year anniversary of my first line of Rust code is coming up, and it’s getting for 5 years since I wrote my first line of Scala code. I thought it would be a good idea to summarise my Scala-tinted perspective of The Rust Experience <sup>TM</sup>, one year on.</p>

<p><span class='caption-wrapper center' style='width: 468px'><img class='caption' src='/images/rusty-spiral-staircase.jpg' width='450' height='450' title='<a href="https://www.flickr.com/photos/janodecesare/2947948666/in/photolist-5uv1r9-56xXaX-4bDqR-SebcMQ-maN4i-7N23dr-7xSH4D-7rhtiD-pHDnby-62icy-pZNZN8-6cZ79B-5uv1BG-4cTa1X-Bwg7kq-7ahJE2-pb2Mcq-5DQf7p-o2NMu4-3VwpKy-nKqFJu-nJCpHS-aA3uj1-zi3AJf-9iUi3a-maMRE-maMUM-maMSb-5bpZDr-388hw8-maMSL-maN4Q-68jZPS-dWFLCF-aA3urd-4vjtb6-7B76ht-36fhwZ-maMYH-7jPJw9-avc8L2-4SQCD3-4C4njx-h46Ev-maN5y-DuqqVb-CpMJiF-maMY4-maN7f-Raj8Es">Rusty spiral staircase</a> by Jano De Cesare'><span class='caption-text'><a href="https://www.flickr.com/photos/janodecesare/2947948666/in/photolist-5uv1r9-56xXaX-4bDqR-SebcMQ-maN4i-7N23dr-7xSH4D-7rhtiD-pHDnby-62icy-pZNZN8-6cZ79B-5uv1BG-4cTa1X-Bwg7kq-7ahJE2-pb2Mcq-5DQf7p-o2NMu4-3VwpKy-nKqFJu-nJCpHS-aA3uj1-zi3AJf-9iUi3a-maMRE-maMUM-maMSb-5bpZDr-388hw8-maMSL-maN4Q-68jZPS-dWFLCF-aA3urd-4vjtb6-7B76ht-36fhwZ-maMYH-7jPJw9-avc8L2-4SQCD3-4C4njx-h46Ev-maN5y-DuqqVb-CpMJiF-maMY4-maN7f-Raj8Es">Rusty spiral staircase</a> by Jano De Cesare</span></span></p>

<p>This is <em>not</em> an objective language vs language comparison. I’ve written this post as part experience dump, part breadcrumb trail for other Scala devs who are exploring or thinking of exploring Rust.</p>

<!-- more -->

<h2 class="no_toc" id="a-bit-about-me">A bit about me</h2>

<p>I’ve written <a href="https://github.com/lloydmeta?utf8=%E2%9C%93&amp;tab=repositories&amp;q=&amp;type=&amp;language=rust">a few Rust libraries/tools</a> as well as <a href="https://github.com/lloydmeta?utf8=%E2%9C%93&amp;tab=repositories&amp;q=&amp;type=&amp;language=scala">Scala ones</a>. For all intents and purposes, I’m a Scala engineer: I get paid to do it and it’s by far my strongest language. I’ve used Rust in a few of my side projects (libraries and smaller utilities).</p>

<p>On the Scala side, I’m the author of <a href="https://github.com/lloydmeta/enumeratum">enumeratum</a>, which brings flexible enums and <a href="https://github.com/lloydmeta/enumeratum#valueenum">value-enums</a> to Scala as a library. I’ve also dabbled in writing macro-based libraries to make things like <a href="https://github.com/lloydmeta/freast">Free Monads</a> and <a href="https://github.com/lloydmeta/diesel">Tagless Final</a> nicer to use.</p>

<p>On the Rust side, I’ve written <a href="https://github.com/lloydmeta/frunk">frunk</a>, a Rust functional programming toolbelt that is roughly a port of <a href="https://github.com/milessabin/shapeless">Shapeless</a> with a bit of <a href="https://github.com/typelevel/cats">cats</a>/<a href="https://github.com/scalaz/scalaz">scalaz</a> mixed in, which does some pretty funky things with the type system that I’ve blogged about (<a href="/blog/2017/03/04/labelledgeneric-in-rust-what-why-how/">1</a>, <a href="/blog/2017/03/12/gentle-intro-to-type-level-recursion-in-Rust-from-zero-to-frunk-hlist-sculpting/">2</a>, <a href="/blog/2017/04/12/boilerplate-free-struct-transforms-in-rust/">3</a>, <a href="/blog/2017/02/04/rust-generic-not-generics/">4</a>). I also wrote a Rust port of <a href="https://requestb.in">requestb.in</a> called <a href="https://github.com/lloydmeta/rusqbin">rusqbin</a> based on Hyper, and a small WIP async client for Microsoft Cognitive services called <a href="https://github.com/lloydmeta/cogs">cogs</a>.</p>

<h3 class="no_toc" id="forewarning">Forewarning</h3>

<ul>
  <li>I’m biased towards Scala and I’ve mostly gotten used to <a href="http://www.lihaoyi.com/post/WartsoftheScalaProgrammingLanguage.html">Scala’s warts</a>. That said, I make an effort to try to be as neutral as possible.</li>
  <li>When I talk about Rust, I mean Rust stable. This is because I only use Scala stable.</li>
  <li>Some of the stuff that I write about with regards to Rust might have changed by the time you read this. After all, there is an ongoing <a href="https://blog.rust-lang.org/2017/03/02/lang-ergonomics.html">ergonomics initiative</a></li>
</ul>

<h2 class="no_toc" id="overview">Overview</h2>
<ul id="markdown-toc">
  <li><a href="#things-im-happy-with">Things I’m happy with</a>    <ul>
      <li><a href="#batteries-included">Batteries included</a></li>
      <li><a href="#type-system">Type System</a></li>
      <li><a href="#macros">Macros</a></li>
      <li><a href="#compiler-optimisations">Compiler optimisations</a></li>
      <li><a href="#syntax">Syntax</a></li>
      <li><a href="#interoperability-with-c">Interoperability with C</a></li>
      <li><a href="#the-current-zeitgeist">The current Zeitgeist</a></li>
    </ul>
  </li>
  <li><a href="#things-ive-adjusted-to">Things I’ve adjusted to</a>    <ul>
      <li><a href="#semicolons">Semicolons</a></li>
      <li><a href="#ownership-model-stack-vs-heap">Ownership model: Stack vs heap</a></li>
    </ul>
  </li>
  <li><a href="#things-i-wish-were-different">Things I wish were different</a>    <ul>
      <li><a href="#async-io">Async IO</a></li>
      <li><a href="#strings">Strings</a></li>
      <li><a href="#cross-compiling">Cross compiling</a></li>
      <li><a href="#odd-headscratchers">Odd headscratchers</a>        <ul>
          <li><a href="#scoping-of-lifetimes-with-braces">Scoping of lifetimes with braces</a></li>
        </ul>
      </li>
      <li><a href="#gimme">Gimme</a></li>
    </ul>
  </li>
  <li><a href="#conclusion">Conclusion</a></li>
</ul>

<h2 id="things-im-happy-with">Things I’m happy with</h2>

<h3 id="batteries-included">Batteries included</h3>

<p>The dev-environment-setup experience with Rust is amazing. The Rust community has striven to make it super easy to <a href="https://doc.rust-lang.org/book/getting-started.html">get started with Rust</a> and it shows. Literally <a href="https://doc.rust-lang.org/book/getting-started.html#installing-rust">one shell command</a> will set everything you need up.</p>

<ul>
  <li><code>rustup</code> for managing your Rust toolbelts (different versions/channels of Rust)</li>
  <li><code>cargo</code> for managing your build and for publishing to crates.io, which includes, among other things:
    <ul>
      <li>A <a href="https://doc.rust-lang.org/book/testing.html"><code>test</code> subcommand</a> for running tests</li>
      <li>A <a href="https://doc.rust-lang.org/book/benchmark-tests.html"><code>bench</code> subcommand</a> for running benchmarks</li>
    </ul>
  </li>
  <li><code>rustfmt</code> for formatting your code (runs on cargo projects via <code>cargo fmt</code>)</li>
  <li><code>rustdoc</code> for generating beautiful <a href="https://api.rocket.rs/rocket/">documentation websites</a>.
    <ul>
      <li>This tool supports doc tests with zero additional configuration/setup (runs as part of <code>cargo test</code>)</li>
    </ul>
  </li>
</ul>

<p>Coming from Scala, having all of this set up with no fuss right out of the gate is a breath of fresh air and feels like a big win for productivity. I know there are reasons for Scala’s more <em>modular</em> approach, but I think it would be nice if <em>some</em> of this rubbed off on <del>Scala</del> other languages.</p>

<h4 class="no_toc" id="editoride"><strong>Editor/IDE</strong></h4>

<p>When I first started with Rust, I used IntelliJ’s Rust plugin, but later switched to <a href="https://code.visualstudio.com/">Microsoft Studio Code</a> with the <a href="https://github.com/editor-rs/vscode-rust">Rust plugin</a>, which interfaces very well with Rust Language Server (installable as a <a href="https://github.com/rust-lang-nursery/rls#step-3-install-the-rls">rustup toolchain component</a>). It feels very lightweight, and offers all the assistance I need.</p>

<h3 id="type-system">Type System</h3>

<p>If you lean more towards the functional programming paradigm side of Scala then you’ll probably love the following about Rust’s type system:</p>

<ul>
  <li>No inheritance for data types (there is a bottom type but it’s used much more sparingly)</li>
  <li>No universal equality</li>
  <li>No nulls</li>
  <li>Traits are basically Haskell typeclasses</li>
  <li>Many more primary types (instead of just <code>Int</code>, there are <code>i8</code>, <code>i16</code>, <code>i32</code>, <code>i64</code>, <code>isize</code>, as well as <code>u8</code>, <code>u16</code> … )</li>
</ul>

<p>Essentially Rust has a <em>lot</em> of the good things about Scala’s type system. One thing currently missing from Rust is first class support for higher-kinded types (HKT), which, to be honest, I don’t miss too much because:</p>

<ol>
  <li>There are ways to emulate it to an extent</li>
  <li>Rust’s ownership/memory model tends to push you towards thinking more granularly about your values/references, something which is perhaps in conflict with the kind of programming typically involving HKT-based abstractions.</li>
</ol>

<p>If this still sounds unacceptable, just know that you can get quite far in building reuseable abstractions using Rust’s traits + associated types, and BurnSushi’s <a href="https://github.com/BurntSushi/quickcheck">port of quickcheck</a> is available for writing and enforcing laws.</p>

<p>There are a few interesting things in the pipeline as well:</p>

<ol>
  <li><a href="https://github.com/rust-lang/rfcs/issues/324">Higher kinded polymorphism</a></li>
  <li><a href="https://github.com/rust-lang/rfcs/issues/1930">Pi (value) types</a></li>
</ol>

<p>Adding functionality by using Rust’s traits should be familiar territory if you’ve written typeclass-like stuff in Scala. In fact, Rust’s trait system feels a lot more similar to Haskell’s typeclass system than Scala’s, something which has its pros and cons (no scoping of implementations for a given type, for example). I’ve written an intro/guide to Rust’s trait system in <a href="/blog/2017/03/12/gentle-intro-to-type-level-recursion-in-Rust-from-zero-to-frunk-hlist-sculpting/">another post</a>.</p>

<h4 class="no_toc" id="type-inference"><strong>Type inference</strong></h4>

<p>Both Rust and Scala have local type inference, and overall, they work in pretty much the same way. In both of them, you need to write the types for your function parameters. In Scala, you can leave the return type off and have the compiler infer it for you, in Rust you can’t (if you leave it off, it is assumed to be <code>()</code>, unit).</p>

<h3 id="macros">Macros</h3>

<p>The <a href="https://doc.rust-lang.org/book/macros.html">Rust macro system</a>, while less powerful than Scala’s, is quite useful for keeping your code DRY and importantly, integrates really well with the rest of the language. It is in fact enabled and available out of the box without any additional dependencies/flags.</p>

<p>Compared with Scala’s macros, Rust’s macros feel like a very natural part of the language, and you’ll run into them quite often when reading/using Rust libraries. In Rust code bases, you’ll often see macros declared and used immediately for the purpose of code generation (e.g. deriving trait implementations for a list of numeric types, or for tuples up to N elements), something that Scala users have generally done “out-of-band” by <a href="http://www.scala-sbt.org/0.13/docs/Howto-Generating-Files.html">hooking into SBT</a> and using another templating or AST-based tool.</p>

<p>On the other hand, in Scala, the usual refrain is “don’t write macros if you don’t have to”. When I compare the approaches the two languages have taken, I feel that Scala may have been overambitious in terms of giving developers power, thus leading to deprecations of APIs that can’t be maintained due to complexity. Indeed, Scala’s metaprogramming toolkit is going through another reform with the migration to <a href="http://scalameta.org/">Scalameta</a>.</p>

<p>Because of its simplicity (the macros work based on a series of patterns), Rust’s macro API may feel limited at first, but if you stick with it, you’ll likely find that you can accomplish more than what you initially thought. For example, the fact that you can build/restructure macro arguments recursively (!) and call the macro again (or even call another macro) is <a href="https://stackoverflow.com/a/40070907/1814775">a fairly powerful tool</a>.</p>

<p>Having said that, in addition to the legacy macro system, Rust will soon be getting <a href="https://github.com/rust-lang/rfcs/blob/master/text/1566-proc-macros.md">procedural macros</a>, which are more similar to what Scala devs are used to seeing. You can get a peek of what procedural macros are like by looking at <a href="https://doc.rust-lang.org/book/procedural-macros.html">custom derives</a>, which I’ve used to implement <a href="/blog/2017/03/04/labelledgeneric-in-rust-what-why-how/"><code>derive</code> for <code>LabelledGeneric</code> in Rust</a>.</p>

<h3 id="compiler-optimisations">Compiler optimisations</h3>

<p>I think it’s not news to anyone that Rust is fast and efficient. The <a href="https://www.rust-lang.org">home page of the official site</a> says it runs “blazingly fast” and features “zero-cost abstractions”, and the Rust-faithfuls loudly trumpted <a href="https://www.reddit.com/r/rust/comments/5vcrvb/rust_is_now_the_fastest_language_on_knucleotide/">Rust’s defeat of GCC-C in in k-nucleotide</a> a few months ago. Even if you don’t strictly believe in the conclusion of Rust being faster than C as a result of these microbenchmarks, it’s not a big jump to say that Rust performance is in the same ballpark as C, or at least, there is no reason for it not to be (yes, language and implementation are different, compilers make a difference, etc.).</p>

<p>I’m particularly impressed by the Rust compiler’s (though I’m not sure if it’s LLVM?) ability to compile abstractions away so that they operations they enable have zero cost. As a personal anecdote, when I wrote <a href="https://github.com/lloydmeta/frunk#labelledgeneric">LabelledGeneric in frunk</a>, I expected there to be <em>some</em> performance difference between using that abstraction for conversions between structs versus writing the conversions by hand (using <code>From</code>). After all, there are non-negligible differences in the Shapeless version of it in Scala land (<a href="https://github.com/lloydmeta/caseclass-conversion-benches#results">benchmark code</a>):</p>

<p>```
// JMH benchmark results</p>

<p>[info] Benchmark                               Mode  Cnt     Score     Error  Units
[info] Benchmarks.from24FieldsManual           avgt   30    33.626 ±   1.032  ns/op
[info] Benchmarks.from24FieldsShapeless        avgt   30  4443.018 ± 101.612  ns/op
[info] Benchmarks.from25FieldsManual           avgt   30    33.066 ±   0.650  ns/op
[info] Benchmarks.from25FieldsShapeless        avgt   30  4859.432 ± 104.763  ns/op
```</p>

<p>To my surprise, Rust manages to compile frunk’s LabelledGeneric-based, non-trivial, multi-step, unoptimised (other than using the stack, no effort was spent) transform between structs into a zero-cost abstraction. That is, using LabelledGeneric for conversion adds <em>zero</em> overhead over writting the transform by hand (<a href="https://github.com/lloydmeta/frunk/blob/master/benches/labelled.rs">benchmark code</a>):</p>

<p>```
// Cargo benchmark results</p>

<p>test from<em>24fields_manual           … bench:         109 ns/iter (+/- 49)
test from</em>24fields_labelledgeneric  … bench:         104 ns/iter (+/- 24)
test from<em>25fields_manual           … bench:         129 ns/iter (+/- 9)
test from</em>25fields_labelledgeneric  … bench:         131 ns/iter (+/- 13)
```</p>

<p><img class="center" src="/images/mind-blown.gif" title="‘Mind Blown’" ></p>

<p><em>Note</em>: The Rust vs Scala <code>LabelledGeneric</code> benchmarks are not completely apples-to-apples (the Rust version needs to instantiate new source objects every run because of move semantics), but they illustrate the performance difference between LabelledGeneric-based vs handwritten conversion in the two languages.</p>

<h3 id="syntax">Syntax</h3>

<p>Overall, the Rust’s syntax is very similar to Scala’s. Sure, there are small adjustments here and there (<code>let</code> and <code>let mut</code> vs <code>var</code> and <code>val</code>, you’ll be using angle brackets instead of square ones, etc), but overall the languages feel very similar because they’re both C-like languages that are heavily inspired by ML.</p>

<p>Scala people will probably rejoice at things like the <a href="https://doc.rust-lang.org/book/enums.html"><code>enum</code></a> being available (coming soon to Scala via Dotty) as well as partial destructuring (e.g. assuming <code>struct Point { x: i32, y: 32}</code>, you can do <code>let Point { x, .. } = p;</code>).</p>

<p>There are a handful of things that you’ll miss just from muscle memory in the beginning, but are either implemented as libraries or are done slightly differently, such as lazy values (<a href="https://github.com/reem/rust-lazy">rust-lazy</a> or <a href="https://github.com/rust-lang-nursery/lazy-static.rs">lazy-static</a>) and methods such as Option’s <code>foreach</code> (try <code>if let Some(x) = myOption { /* use x here */ }</code> instead). Others are just plain missing, such as by-name parameters (not too big of a deal for me) and keyword arguments (this one hurts).</p>

<p>Oh, in Rust, types and traits are named the same way as in Scala, in CamelCase, but identifiers (bindings and methods) use snake_case, which I still find makes code look longer but isn’t a big problem. You’ll find <a href="https://aturon.github.io/style/naming.html">references</a> that can help if you are unsure and you’ll likely pick it up from reading library code anyways.</p>

<p>As with Swift, I haven’t been able to find conclusive evidence nor credit given to suggest that there was any influence from Scala on Rust …</p>

<h3 id="interoperability-with-c">Interoperability with C</h3>

<p>Rust makes working with C as smooth as possible while sticking to its mantra of keeping things safe. For reference take a look at the section in the Rust book that deals with <a href="https://doc.rust-lang.org/book/ffi.html">FFI</a>.</p>

<p>```rust
// Taken from the Rust book
#[link(name = “snappy”)]
extern {
    fn snappy_max_compressed_length(source_length: size_t) -&gt; size_t;
}</p>

<p>let x = unsafe { snappy_max_compressed_length(100) };
```</p>

<p>The syntax might look familiar to those who have played around with <a href="https://scala-native.readthedocs.io/en/latest/">Scala.Native</a>.</p>

<p>```scala
// Taken from Scala Native homepage
@extern object stdlib {
  def malloc(size: CSize): Ptr[Byte] = extern
}</p>

<p>val ptr = stdlib.malloc(32)
```</p>

<p>Since calling C-code can be unsafe (wrt memory, thread-safety), Rust requires you to wrap your C-calls in unsafe. If you wish to hide this from your users, you can wrap these calls in another function.</p>

<p><code>rust
// Taken from the Rust book
pub fn validate_compressed_buffer(src: &amp;[u8]) -&gt; bool {
    unsafe {
        snappy_validate_compressed_buffer(src.as_ptr(), src.len() as size_t) == 0
    }
}
</code></p>

<p>Calling Rust code from C is also <a href="https://doc.rust-lang.org/book/ffi.html#callbacks-from-c-code-to-rust-functions">very smooth</a>, something that Scala Native has yet to implement.</p>

<h3 id="the-current-zeitgeist">The current Zeitgeist</h3>

<p>The current “feel” of Rust, and its community (or communities, since libraries/frameworks can have their own) is very welcoming and helpful. It’s very difficult to quantify this so I’ll list some observations</p>

<ul>
  <li>Rust stable is only 2 years old and yet there is an official <a href="https://blog.rust-lang.org/2017/03/02/lang-ergonomics.html">ergonomics initiative</a> to reduce friction</li>
  <li>Rust is the #1 “most loved” language in <a href="https://insights.stackoverflow.com/survey/2016#technology-most-loved-dreaded-and-wanted">StackOverflow’s 2017 survey</a></li>
  <li>Rust feels very community driven: its got a very lively <a href="https://github.com/rust-lang/rfcs/issues">RFC repo</a> and since I’ve started tinkering in it I’ve seen at least 3 RFCs make it into the language (type macros, custom derives, and <code>?</code> syntax for <code>Try</code>s).</li>
</ul>

<h2 id="things-ive-adjusted-to">Things I’ve adjusted to</h2>

<h3 id="semicolons">Semicolons</h3>

<p>In Scala, semicolons are optional and <em>almost</em> everything is an expression and therefore return values.</p>

<p>```scala
3 // returns 3</p>

<p>val x = 3 // assignment, returns unit</p>

<p>// certain things don’t return anything though, such as import
// statements, and blocks</p>

<p>import com.beachape._ // returns nothing
object Hello {} // returns nothing
```</p>

<p>In Rust, semicolons are non-optional and <a href="http://rustbyexample.com/expression.html">are of significance</a>. Statements that end with semicolons return <code>()</code> (unit) and those that do not get turned into expressions and thus return a value.</p>

<p>```rust
// taken from the Rust book</p>

<p>let x = 5u32; // this is a statement</p>

<p>let y = {
    let x_squared = x * x;
    let x_cube = x_squared * x;</p>

<pre><code>// This expression will be assigned to `y`
x_cube + x_squared + x };
</code></pre>

<p>let z = {
    // The semicolon suppresses this expression and <code>()</code> is assigned to <code>z</code>
    2 * x;
};
```</p>

<h3 id="ownership-model-stack-vs-heap">Ownership model: Stack vs heap</h3>

<p>Rust’s memory/ownership model is, to me, its main killer feature; it gives you tighter control over the way your program consumes memory while maintaining memory-safety, all without having to ship a garbage collector with the runtime. You get to decide whether to pass things by value or by reference as well as mutability of bindings (including when pattern matching).</p>

<p>There is also the matter of <em>where</em> things get allocated. In Scala (and perhaps with most JVM-based languages), there are a set of rules that decide whether or not something gets put on the stack or on the heap (and thus incur the future cost of garbage collection). In general, the only time something gets allocated on the stack are primitives that do not escape methods as fields of objects, and references to objects which themselves get allocated on the heap. There might be fun runtime tricks the runtime environment does, like escape analysis, but overall, you don’t get to choose.</p>

<p>In Rust, you can choose to allocate things on the heap by instantiating them inside (or transferring ownership of them to) data structures such as <code>Box</code>es or <code>Mutex</code>es, etc. Or you can choose to work with plain values. You get to pick your abstraction based on the cost you want to pay for the features and guarantees they offer, such as safe multi-thread access (<a href="http://manishearth.github.io/blog/2015/05/27/wrapper-types-in-rust-choosing-your-guarantees/">this page</a> is a great reference point). Either way, Rust’s ownership system will, at compile time, make sure that you won’t get data races caused by, for instance, modifying naked values in different threads with no access control.</p>

<p>Scala’s doesn’t give its users the same level of control, so naturally there is some adjustment to be made. However, contrary to the experiences of some others, I didn’t find the ownership stuff <strong>too</strong> hard to understand and get used to. Having experience with Scala’s rich type system meant that the lifetime annotation stuff was quite easy to come to grips with. Maybe doing C and C++ in Comsci courses in university helped too.</p>

<ul>
  <li><strong>Note</strong>: If you’re a glass-half-full kind of person, I guess you can say that Rust <em>forces</em> you to take control rather than <em>gives</em> you control. It’s all a matter of perspective …</li>
  <li><strong>Note 2</strong>: If you find yourself doing lots of <code>.clone()</code>s to get the compiler off your back, maybe you’re doing something not quite right.</li>
</ul>

<h4 class="no_toc" id="mutability"><strong>Mutability</strong></h4>

<p>Mutability deserves to be mentioned separately. If you’re coming from years of Scala (or pretty much any other language that stresses immutability and referential transparency as the road to enlightenment), writing your first <code>let mut</code> or <code>self: &amp;mut</code> can feel dirty.</p>

<p>It took me a while to get used to the idea, but hey, when in Rome, right? If it helps, remember that Rust is focused on speed and efficiency through (near, or actually) zero-cost abstractions and that, thanks to its strict ownership model, data races due to mutability are not a problem.</p>

<h2 id="things-i-wish-were-different">Things I wish were different</h2>

<h3 id="async-io">Async IO</h3>

<p>In Scala, most frameworks that deal with any sort of IO have embraced non-blocking IO by utilising some kind of wrapper data type, such as <code>Future[A]</code>, <code>Task[A]</code>, or <code>IO[A]</code> (usually a Monad), that separates the description of your program from its execution, and identify, by type, the effect of talking with the scary and dirty outside world. This allows you to not block the executing thread when waiting for stuff to happen (such as data to come back) by choosing a suitable execution strategy.</p>

<p>In Rust land, most of the widely-used libraries that I’ve seen, such as the Redis client, and and Hyper (and all the various things built on it, such as Rusoto, Rocket, etc) are all blocking. While this works okay for stuff like single-user utilities, this is suboptimal for applications that are IO heavy and need to serve a large number of concurrent users because your application threads can get tied up just waiting for data, leaving it unable to serve other requests. Or, you end up with potentially huge thread pools (à la old school Java Servlet apps..), which seems to go against Rust’s spirit of efficiency.</p>

<p>Having said that I know that advances are being made in this area:</p>

<ul>
  <li><a href="https://tokio.rs/">Tokio</a>, “tokenised IO”, an async IO framework that exposes a Future-based API is making lots of progress. Looks production-ready.</li>
  <li><a href="https://github.com/hyperium/hyper">Hyper</a>, the defacto HTTP client server framework, is going to hit 0.11 soon, which will bring with it a Futures-based API based on Tokio. This will likely (I hope) cascade down to any libs based on Hyper.</li>
</ul>

<p>Also, as of now, it’s painful to transform and return Futures from functions because every transformation causes the concrete type of your object to get chained and tagged with an arbitrary closure type. Since writing the result type is non-optional in Rust, the current solution is to declare your return type as <code>Box&lt;Future&lt;A&gt;&gt;</code>, but it’s less efficient at runtime because boxed <a href="https://doc.rust-lang.org/book/trait-objects.html">trait objects</a> necessitate dynamic dispatch and heap allocation. Hopefully soon “impl Trait” will be released to address this issue (<a href="https://github.com/rust-lang/rust/issues/34511">tracking RFC</a>)</p>

<h3 id="strings">Strings</h3>

<p>In Rust there are a number of ways to represent Strings:</p>

<ul>
  <li><code>String</code> runtime string value, with its contents allocated on the heap</li>
  <li><code>&amp;'a str</code> string with a lifetime
    <ul>
      <li><code>&amp;' static str</code> string with static lifetime (baked into your binary)</li>
    </ul>
  </li>
  <li><code>Vec&lt;u8&gt;</code></li>
</ul>

<p>While I’ve mostly gotten used to this by now and understand the purpose of having each one, I hope the ergonomics initiative can make this situation better to understand, since strings are so ubiquitous. How? I have no idea..maybe I’m just ranting.</p>

<h3 id="cross-compiling">Cross compiling</h3>

<p>Obviously, Scala devs are used to compiling once and running the same binaries everywhere thanks to the JVM (mostly :p). While I don’t expect the same for Rust because it compiles to native machine code, I do wish the cross-compilation tools were better out of the box (for example, like <a href="https://dave.cheney.net/2015/08/22/cross-compilation-with-go-1-5">it is in Golang</a>).</p>

<p>At the moment, depending on the target platform, cross-compilation for Rust is a bit involved and there are several options:</p>

<ol>
  <li>Adding a target toolchain via Rustup and possibly installing some more packages specifically for your target platform (as in <a href="https://hackernoon.com/compiling-rust-for-the-raspberry-pi-49fdcd7df658">this guide</a>)</li>
  <li>Using a pre-built Docker container that holds all the settings/environment variables/installations needed to compile to your target platform (see <a href="https://github.com/Ragnaroek/rust-on-raspberry-docker">rust-on-raspberry-docker</a>)</li>
  <li>Using the <a href="https://github.com/japaric/cross"><code>cross</code></a>, cargo tool that seems like it automates 2.</li>
</ol>

<p>My use case is building for the my Raspberry Pi and I’ve only tried the first 2, but that last one looks to be the winner here and it would be awesome to see something like that included by default as part of rustup or cargo.</p>

<h3 id="odd-headscratchers">Odd headscratchers</h3>

<p>Just a few things I still don’t quite get:</p>

<h4 class="no_toc" id="do-we-actually-need-ref"><strong>Do we actually need <code>ref</code>?</strong></h4>

<p>In my opinion, <code>ref</code> is unnecessarily confusing, even thought it’s mostly used for binding pointers during pattern matching</p>

<p><code>rust
match some_int {
  // Why not Some(&amp; s) =&gt; ... ???
  Some(ref s) =&gt; println!("{}",s),
  None =&gt; unreachable!()
}
</code></p>

<h4 class="no_toc" id="mut"><strong><code>&amp;mut</code></strong></h4>

<p>When handing out references of something bound with let mut, why do i need to do <code>&amp;mut</code> instead of just <code>&amp;</code> ?</p>

<p>```rust
// This uses mut for no reason other than to prove a point.
fn non_empty(s: &amp;mut String) -&gt; bool { s.len() &gt; 0 }</p>

<p>let mut string = “hello”.to_string();
hello(&amp;mut string); // why can’t this just be hello(&amp; string) ??
```</p>

<h4 id="scoping-of-lifetimes-with-braces">Scoping of lifetimes with braces</h4>

<p>I somehow managed to code my way into a deadlock when using <code>RWLock</code> because the lifetime-scoping behaviour of <code>{}</code> braces when pattern matching is, in my opinion, non-intuitive. If you’re interested, more about it in <a href="https://github.com/rust-lang/rust/issues/37612">this issue</a>.</p>

<h3 id="gimme">Gimme</h3>

<p>I know these things are in the pipeline but I wish they were in Rust yesterday:</p>

<ol>
  <li>Higher kinded types</li>
  <li>“Specialisation”, aka finding the most specific implementations of a traits according to the type of value at the call site. Right now, if you implement a Rust trait <code>for A</code>, then it clashes with every other implementation you write. Specialisation should remedy that (<a href="https://github.com/rust-lang/rust/issues/31844">tracking RFC</a>)</li>
  <li>A REPL. There’s <a href="https://github.com/murarth/rusti">Rusti</a> but I think Rust is missing a trick by not supplying one out of the box in this day and age.</li>
</ol>

<h2 id="conclusion">Conclusion</h2>

<p>That concludes my take on what it’s like to use Rust, from a Scala dev’s perspective, one year on, in 2017. Overall I’m very happy that the me a year ago decided to look into Rust. It’s been a fun and exciting ride: for a while it felt like every few months I was getting new toys that I could immediately use: type macros and custom derives were game changers because they made it ergonomic to write <a href="https://beachape.com/frunk/frunk/macro.Hlist.html">Hlist types</a> by hand, and made <a href="https://beachape.com/frunk/frunk_core/generic/trait.Generic.html">Generic</a>/<a href="https://beachape.com/frunk/frunk_core/labelled/trait.LabelledGeneric.html">LabelledGeneric</a> practical, respectively.</p>

<p>Overall, I believe there are a lot of things in Rust for Scala engineers to like. The community is friendly and diverse so you can easily find a library that interests you to get involved in (shameless plug: contributions to <a href="https://github.com/lloydmeta/frunk">frunk</a> are always welcome). Or, you can do your own side project and write a small system utility or program a microcontroller; online resources are very easy to find. In any case, with Rust, you really can’t say it’s hard to get started !</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Boilerplate-free Struct Transforms in Rust.]]></title>
    <link href="https://beachape.com/blog/2017/04/12/boilerplate-free-struct-transforms-in-rust/"/>
    <updated>2017-04-12T12:45:00+09:00</updated>
    <id>https://beachape.com/blog/2017/04/12/boilerplate-free-struct-transforms-in-rust</id>
    <content type="html"><![CDATA[<p>The last several posts have introduced a number of abstractions, namely HList, Generic, LabelledGeneric, as well as <code>pluck()</code> and <code>sculpt()</code>. Although each of those have impressive party tricks of their own, I’d like to share how you can use them to write a reuseable, generic function that handles converting between structs with mis-matched fields and thus have different <code>LabelledGeneric</code> representations.</p>

<p><img class="center" src="/images/optimus-prime.gif" title="‘All together now’" ></p>

<p>Unlike the last post, this one will be relatively light on recursion and mind-bending type-level stuff; it’s time to sit back and enjoy the fruits of our labour.</p>

<!-- more -->

<h2 id="adding-frunk-to-your-project">Adding Frunk to your project</h2>

<p>Much of this post will make use of <a href="https://github.com/lloydmeta/frunk">Frunk’s</a> types (e.g. <code>HCons</code>, <code>HNil</code>), methods, macros (esp. for describing macro types via the <code>Hlist!</code> <a href="https://beachape.com/frunk/frunk_core/macro.Hlist.html">type macro</a>), and terminology.</p>

<p>It might be easier to follow along if you add Frunk to your project and play around with it. <a href="https://github.com/lloydmeta/frunk">Frunk</a> is published to <a href="//crates.io/crates/frunk">Crates.io</a>, so to add it your list of dependencies, simply put this in your <code>Cargo.toml</code>:</p>

<p><a href="https://crates.io/crates/frunk"><img src="https://img.shields.io/crates/v/frunk.svg" alt="Crates.io" /></a></p>

<p><code>rust
[dependencies]
frunk = "${latest_version}"
</code></p>

<p>Alternatively, take a look at the <a href="https://beachape.com/frunk">published Rustdocs</a>.</p>

<h2 id="boilerplate-free-conversions-between-structs">Boilerplate-free conversions between Structs</h2>

<p>Suppose we have a bunch of structs that are similar-ish in terms of their data but ultimately, not necessarily
exactly the same. This means we can’t just use the normal <code>LabelledGeneric</code> <code>convert_from</code> method to convert between them.</p>

<p>```rust
#[derive(LabelledGeneric)]
struct UserFromDb&lt;’a&gt; {
    id: u64,
    first_name: &amp;’a str,
    last_name: &amp;’a str,
    email: &amp;’a str,
    age: u32,
    pw_hash: &amp;’a str,
    is_admin: bool,
    created_at: i64
}</p>

<p>// Holds User data for rendering in a front-end view
// or for sending over an API. Striped of any sensitive
// information
#[derive(LabelledGeneric)]
struct PresentableUser&lt;’a&gt; {
    last_name: &amp;’a str,
    first_name: &amp;’a str,
    age: u32,
    created_at: i64
}</p>

<p>// Holds data for sending a User over our internal API
#[derive(LabelledGeneric)]
struct InternalApiUser&lt;’a&gt; {
    id: u64,
    first_name: &amp;’a str,
    last_name: &amp;’a str,
    age: u32,
    email: &amp;’a str,
    is_admin: bool,
    created_at: i64
}
```</p>

<p>In our example, <code>PresentableUser</code> and <code>InternalApiUser</code> structs have fields that are subsets of the fields in <code>UserFromDb</code>, and not in the same order either. The scenario is that <code>UserFromDb</code> is a struct that we get from reading our persistence layer, and the other 2 are types that we use in our application for business logic.</p>

<p>Assuming a flow where we want to be able to go from <code>UserFromDb</code> to either <code>PresentableUser</code> or <code>InternalApiUser</code>, the idea is that we don’t want be holding on to sensitive data like <code>pw_hash</code> when we don’t need to, thus lowering the risk of accidentally leaking said data (e.g. serialising it by accident, or by rendering it in debug messages, etc).</p>

<p>While we could go about writing <code>From</code>s by hand for each of these, and for every other time a similar situation arises, that’s quite a lot of boilerplate to write and maintain. Thankfully, we can make use of Frunk’s <code>LabelledGeneric</code> and <code>Sculptor</code> to write a single, reuseable generic function.</p>

<p>Note, for a review of:</p>

<ul>
  <li><code>LabelledGeneric</code>, see <a href="/blog/2017/03/04/labelledgeneric-in-rust-what-why-how/">this post</a></li>
  <li><code>Sculptor</code>, see <a href="/blog/2017/03/12/gentle-intro-to-type-level-recursion-in-Rust-from-zero-to-frunk-hlist-sculpting/">this post</a></li>
</ul>

<p><code>rust
/// Converts from another type A into B assuming that A and B have labelled generic representations
/// that can be sculpted into each other.
///
/// Note that this method tosses away the "remainder" of the sculpted representation.
fn transform_from&lt;A, B, Indices&gt;(a: A) -&gt; B
    where A: LabelledGeneric,
          B: LabelledGeneric,
// The labelled representation of A must be sculpt-able into the labelled representation of Self
          &lt;A as LabelledGeneric&gt;::Repr: Sculptor&lt;&lt;B as LabelledGeneric&gt;::Repr, Indices&gt; {
    // Turn A into its labelled generic representation
    let a_gen = &lt;A as LabelledGeneric&gt;::into(a);
    // Sculpt the generic labelled representation of A into the labelled generic representation
    // of B. We ignore the remainder.
    let (b_gen, _): (&lt;B as LabelledGeneric&gt;::Repr, _) = a_gen.sculpt();
    // Turn the lablled generic representation of B into B
    &lt;B as LabelledGeneric&gt;::from(b_gen)
}
</code></p>

<p>Not bad. The body of the function is literally 3 lines long :) Now we can do this:</p>

<p>```rust
let u_db = UserFromDb {
    id: 3,
    first_name: “Joe”,
    last_name: “Blow”,
    email: “joe@gmail.com”,
    age: 30,
    pw_hash: “asd35235adsf”,
    is_admin: true,
    created_at: 12345,
};</p>

<p>let p_user: PresentableUser = transform_from(udb);
// or
let i_user: InternalApiUser = transform_from(udb);
```</p>

<p>In actuality, Frunk already <a href="https://beachape.com/frunk/frunk_core/labelled/fn.transform_from.html">ships with this function</a> so you can use it out of the box.</p>

<h2 id="conclusion">Conclusion</h2>

<p>Often times, you’ll hear that heterogeneous lists enable developers to write reuseable generic functions because they abstract over arity and types, and it might not be obvious exactly what that means on a practical level. The example shown in this post just scratches the surface of what is made possible through <code>HList</code> and <code>LabelledGeneric</code>, and there are definitely more creative usages out there, such as building of boilerplate-free (e.g. JSON) codecs (hint: look to Haskell and Scala libs for more).</p>

<p>As usual, please give it a spin and chime in with any questions, corrections, and suggestions !</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gentle Intro to Type-level Recursion in Rust: From Zero to HList Sculpting.]]></title>
    <link href="https://beachape.com/blog/2017/03/12/gentle-intro-to-type-level-recursion-in-Rust-from-zero-to-frunk-hlist-sculpting/"/>
    <updated>2017-03-12T12:03:00+09:00</updated>
    <id>https://beachape.com/blog/2017/03/12/gentle-intro-to-type-level-recursion-in-Rust-from-zero-to-frunk-hlist-sculpting</id>
    <content type="html"><![CDATA[<blockquote>
  <p>Getting the type signature right was 99% of the work in implementing <code>pluck</code> and <code>sculpt</code> for <code>HList</code>s in Frunk.</p>

  <p>Here’s what I’ve learnt along the way: what works, and what doesn’t work (and why).</p>
</blockquote>

<p>As you may already know, Rust eschews the now-mainstream object-oriented model of programming (e.g. in Java, where behaviour for a type is added to the type/interface definition directly) in favour of a typeclass-like approach (e.g. in Haskell where you can ad-hoc add behaviour to a type separate from the type definition itself).  Both approaches have their merits, and indeed, some languages, such as Scala, allow for a mix of both.</p>

<p>For those coming from the OOP school of programming, Rust’s system of adding behaviour to types might be daunting to come to grips with. At a glance, it might not be obvious how to get things done, especially when what you want to build goes beyond implementing <code>Debug</code> or <code>Eq</code>. If your abstraction has a certain degree of type-level recursiveness, it might be even harder to see the light at the end of the tunnel, and the lack of online material covering that sort of thing doesn’t help.</p>

<p>As a Scala guy with Haskell knowledge, I’m no stranger to typeclasses, but it took me a while and several failed attempts to figure out how to implement the following:</p>

<ol>
  <li>Plucking out a value by type from an HList and getting back the remainder **</li>
  <li>Sculpting an HList into another shape, and getting back the remainder (in the case where we only want a smaller subset than the original) **</li>
</ol>

<p>Of course, the type signature of the finished product can be intimidating !</p>

<p><img class="center" src="/images/sculptor-typesig.png" title="‘6 type parameters, 1 fills in a type parameter on the trait that is recursive, and a recursive associated type. WTF? ‘" ></p>

<p>In this post, I’ll briefly introduce Rust’s trait system and present my mental model for writing trait implementations that deal with type-level recursion. To do so, I will go through how <code>pluck()</code> and <code>sculpt()</code> were written in Frunk, as well as recount some of my failed approaches so you can learn from my mistakes.</p>

<p>Hopefully, by the end of it, you’ll be able to look at signatures like the one above and not go “WTF”, but rather, “FTW”.</p>

<!-- more -->

<h2 class="no_toc" id="type-level-recursion">“Type-level recursion”?</h2>

<p>Ok, I may be butchering/making up a term, but by “type-level recursion”, I’m referring to recursive expansions/evaluations of types  at compile-time, particularly for the purpose of proving that a certain typeclass instance exists at a function call site. This is distinct from runtime “value”-level recursion that occurs when you call a function that calls itself.</p>

<p>If you’re having trouble understanding the difference:</p>

<ul>
  <li><strong>Value-level recursion</strong>: If it can’t find an exit condition, your program is stuck running forever.</li>
  <li><strong>Type-level recursion</strong>: If it can’t expand/find the exit-type, your compiler will either give up or never finish compiling; you won’t even have a program to run.</li>
</ul>

<h2 class="no_toc" id="outline">Outline</h2>
<ul id="markdown-toc">
  <li><a href="#basic-gist-of-rust-typeclasses-traits">Basic Gist of Rust typeclasses (traits)</a>    <ul>
      <li><a href="#dependent-trait-implementations">Dependent trait implementations</a></li>
      <li><a href="#mental-model-for-type-level-recursion">Mental model for type-level recursion</a>        <ul>
          <li><a href="#recursion-on-the-value-level">Recursion on the value level</a></li>
          <li><a href="#recursion-on-the-type-level">Recursion on the type level</a></li>
        </ul>
      </li>
    </ul>
  </li>
  <li><a href="#what-the-frunk">What the Frunk?</a></li>
  <li><a href="#plucking-from-hlists">Plucking from HLists</a>    <ul>
      <li><a href="#implementation-intuition">Implementation intuition</a></li>
      <li><a href="#first-attempt">First attempt</a></li>
      <li><a href="#second-attempt">Second attempt</a></li>
      <li><a href="#type-level-walkthrough">Type-level walkthrough</a></li>
    </ul>
  </li>
  <li><a href="#sculpting-hlists">Sculpting HLists</a>    <ul>
      <li><a href="#implementation-intuition-1">Implementation intuition</a></li>
      <li><a href="#first-attempt-1">First attempt</a></li>
      <li><a href="#second-attempt-1">Second attempt</a></li>
    </ul>
  </li>
  <li><a href="#conclusion">Conclusion</a>    <ul>
      <li><a href="#credit">Credit</a></li>
    </ul>
  </li>
</ul>

<h2 id="basic-gist-of-rust-typeclasses-traits">Basic Gist of Rust typeclasses (traits)</h2>

<p>In Rust, typeclass is spelt <code>trait</code>, and although that word is somewhat ambiguous and overloaded with different meanings depending on context (e.g. in Scala), I’ll try to stick with it throughout this article. Subsequently, a typeclass instance is called an “implementation” (<code>impl</code> in code) in Rust.</p>

<p>Here is a basic example of a simple trait and implementation for a type <code>Circle</code>, taken from the official <a href="https://doc.rust-lang.org/book/traits.html">Rust book</a>.</p>

<p>```rust
// A trait that allows you to call “area” on something
trait HasArea {
    fn area(&amp;self) -&gt; f64;
}</p>

<p>// Our type
struct Circle {
    x: f64,
    y: f64,
    radius: f64,
}</p>

<p>// Our implementation of HasArea for Circle
impl HasArea for Circle {
    fn area(&amp;self) -&gt; f64 {
        std::f64::consts::PI * (self.radius * self.radius)
    }
}
```</p>

<p>For comparison, here is the Haskell equivalent</p>

<p>```haskell
– Our typeclass
class HasArea a where
  area :: a -&gt; Float</p>

<p>– Our type
data Circle = Circle { x :: Float, y :: Float, radius :: Float }</p>

<p>– Our typeclass instance for Circle
instance HasArea Circle where
  area c = pi * radius c ^ 2
```</p>

<p>In both of these cases, what we see is</p>

<ol>
  <li>There is a trait, <code>HasArea</code>, which describes behaviour (must implement an <code>area</code> function that takes as its first argument the implementing type) for types that want to belong to, or join it.</li>
  <li>Next, we have a type, <code>Circle</code>, which has one purpose: hold data.</li>
  <li>Then, we add <code>Circle</code> to the <code>HasArea</code> trait by implementing an instance of the trait, fulfilling the contract by writing the <code>area</code> function.</li>
</ol>

<p>The key difference between this approach and the OOP approach is that adding behaviour to an existing type does not require us to edit the original type declaration, nor does it require us to create a wrapper type. This allows us to add behaviour to types that do not belong to us (e.g. we don’t have access to its source)! This flexibility is a key advantage of the typeclass/trait approach. For a much more detailed comparison between OOP and typeclasses (traits), checkout this <a href="https://wiki.haskell.org/OOP_vs_type_classes">wiki entry on haskell.org</a>.</p>

<h3 id="dependent-trait-implementations">Dependent trait implementations</h3>

<p>Sometimes, you’ll want to write trait implementations for data types that have one or more type parameters. In these cases, your trait implementation will likely require that implementations of the trait exist for each of those type parameters.</p>

<p>For example</p>

<p>```rust
// The Add trait, which exists in core::ops, copied verbatim here.
//
// Note that the Add trait has a right hand side (RHS) type parameter
// to represent the type that the implementing trait is being added
// with.
pub trait Add&lt;RHS=Self&gt; {
    /// The resulting type after applying the <code>+</code> operator
    #[stable(feature = “rust1”, since = “1.0.0”)]
    type Output;</p>

<pre><code>/// The method for the `+` operator
#[stable(feature = "rust1", since = "1.0.0")]
fn add(self, rhs: RHS) -&gt; Self::Output; }
</code></pre>

<p>// Our Cup struct. We signal that its contents can be
// anything because it has an unrestricted type parameter
// of A
struct Cup<a> {
    content: A,
}</a></p>

<p>// In our case, we want to implement Add&lt;Cup<a>&gt; because we want to add
// 2 cups with the same content type together, but we don’t know in
// advance what kind of content would be in them; hence we keep
// it parameterised with A.
//
// Thus, we write an implementation of Cup for Add, but add a restriction:
// the implementation only exists for Cups where the content is bound to a
// type that is already implements the Add trait (thus “A: Add<a>”)
impl&lt;A: Add<a>&gt; Add&lt;Cup<a>&gt; for Cup<a>
{
    // This is what is called an associated type.
    // Here, Output is the type that will be returned
    // from the add operation
    type Output = Cup« A as Add<a> &gt;::Output&gt;;</a></a></a></a></a></a></p>

<pre><code>fn add(self, rhs: Cup&lt;A&gt;) -&gt; Self::Output {
    // Here we make use of the Add trait for A to add
    // the contents from both cups together
    let added_content = self.content.add(rhs.content);
    Cup { content: added_content }
} } ```
</code></pre>

<p>Making <code>Cup</code> part of the <code>Add</code> typeclass will allow us to call <code>cup_a + cup_b</code>, which is kind of neat. One thing to take note of here is the <code>Output</code> associated type. Pay attention to the fact that in our implementation of <code>Add</code> for <code>Cup</code>, the type of <code>Output</code> is <code>Cup&lt;&lt; A as Add&lt;A&gt; &gt;::Output&gt;</code>, which means that ultimately, the output of <code>Add</code>ing of 2 <code>Cup&lt;A&gt;</code>s will depend on what the <code>Output</code> of <code>Add&lt;A&gt;</code> is.  The <code>&lt; A as Add&lt;A&gt; &gt;</code> part can be read as “summon the <code>Add&lt;A&gt;</code> implementation for the type A” (the compiler will do the actual lookup work here; if one doesn’t exist, your code will fail to compile), and the <code>::Output</code> following it means “retrieve the associated type, Output, from <em>that</em> implementation”. Let this sink in, because it’s important in order for us to move towards the concept of type-level recursion for traits.</p>

<p>Here is another way to write the same thing: using <a href="https://doc.rust-lang.org/book/traits.html#where-clause">where clause</a> syntax, so that the restriction goes at the end of the initial type signature in our implementation declaration. This is useful when you have more than 2 or 3 type parameters for your typeclass instance and you have a complex set of restraints. Using <code>where</code> can help cut down on initial noise.</p>

<p>```rust
impl<a> Add&lt;Cup<a>&gt; for Cup<a>
    where A: Add<a>
{
    type Output = Cup«A as Add<a>&gt;::Output&gt;;</a></a></a></a></a></p>

<pre><code>fn add(self, rhs: Cup&lt;A&gt;) -&gt; Self::Output {
    let added_content = self.content.add(rhs.content);
    Cup { content: added_content }
} } ```
</code></pre>

<p>Here’s another, more general implementation of <code>Add</code> for <code>Cup</code>. It’s more general because it lets us add <code>Cup</code>s of <em>different</em> content types, provided that there exists an <code>Add&lt;B&gt;</code> implementation for whatever concrete type is bound to <code>A</code> in any given <code>Cup&lt;A&gt;</code>.</p>

<p>```rust
// Instead of just A, we introduce another type parameter, B, which
// is passed as the type parameter for the Cup that we want to add with
impl&lt;A, B&gt; Add&lt;Cup<b>&gt; for Cup<a>
    // This next line means “A must have an Add<b> implementation”
    where A: Add<b>
{
    // The Output associated type now depends on the Output of &lt;A as Add<b>&gt;
    type Output = Cup«A as Add<b>&gt;::Output&gt;;</b></b></b></b></a></b></p>

<pre><code>fn add(self, rhs: Cup&lt;B&gt;) -&gt; Self::Output {
    // Notice that we can use the operator "+"
    let added_content = self.content + rhs.content;
    Cup { content: added_content }
} } ```
</code></pre>

<h3 id="mental-model-for-type-level-recursion">Mental model for type-level recursion</h3>

<p>By this point, we have covered most of the basic understanding required to write more complex traits and implementations. To recap, they are:</p>

<ol>
  <li>The differences between a trait, a type, and a trait implementation</li>
  <li>How to use bounds (<code>A: Add&lt;A&gt;</code> or <code>where</code> clauses) when writing implementations for generic types</li>
  <li>How to summon an implementation for a given type (<code>&lt;A as Display&gt;</code>)</li>
  <li>How to write and use associated types (see <code>Output</code> in the above examples)</li>
</ol>

<p>For a more thorough introduction to Rust’s trait system, by all means refer to the official Rust <a href="https://doc.rust-lang.org/book/traits.html">docs on traits</a>.</p>

<p>Before going any further, I’d like to provide you with my mental model of how to think about recursion on the <em>type level</em>.</p>

<h4 id="recursion-on-the-value-level">Recursion on the value level</h4>
<blockquote>
  <p>You write a function that keeps calling itself until an exit condition is met, then returns a value.</p>
</blockquote>

<h4 id="recursion-on-the-type-level">Recursion on the type level</h4>
<blockquote>
  <p>You write implementations of your trait for exit-types and work-to-be-done types. In order to prove an implementation of your trait exists for a concrete type at a function call site, the compiler will try to lookup and expand/expand types recursively until it can figure out a concrete implementation to use, or gives up with an error.</p>
</blockquote>

<p>This may not make much sense at the moment, but hopefully it will soon.</p>

<h2 id="what-the-frunk">What the Frunk?</h2>

<p>Much of this post will make use of <a href="https://github.com/lloydmeta/frunk">Frunk’s</a> types (e.g. <code>HCons</code>, <code>HNil</code>), methods, macros (esp. for describing macro types via the <code>Hlist!</code> <a href="https://beachape.com/frunk/frunk_core/macro.Hlist.html">type macro</a>), and terminology.</p>

<p>It might be easier to follow along if you add Frunk to your project and play around with it.  <a href="https://github.com/lloydmeta/frunk">Frunk</a> is published to <a href="//crates.io/crates/frunk">Crates.io</a>, so to add it your list of dependencies, simply put this in your <code>Cargo.toml</code>:</p>

<p><a href="https://crates.io/crates/frunk"><img src="https://img.shields.io/crates/v/frunk.svg" alt="Crates.io" /></a></p>

<p><code>rust
[dependencies]
frunk = "${latest_version}"
</code></p>

<p>Alternatively, take a look at the <a href="https://beachape.com/frunk">published Rustdocs</a>.</p>

<h2 id="plucking-from-hlists">Plucking from HLists</h2>

<p>Given an <a href="/blog/2016/10/23/rust-hlists-heterogenously-typed-list/">HList</a>, how can we write a function that allows us to pluck out a value by type (if the <code>HList</code> does not contain this type, the compiler should let us know), and also return the rest of the <code>HList</code>?</p>

<p>Suppose we call this function <code>pluck()</code>, it should behave like so:</p>

<p>```rust
// h has type Hlist![ {integer}, &amp;str, f32, bool ]
let h = hlist![ 1, “Joe”, 42f32, true ];</p>

<p>// We tell it the target type, and let the compiler infer the rest
let (target, remainder): (f32, _) = h.pluck();</p>

<p>assert_eq!(target, 42f32);
assert_eq!(remainder, hlist![1, “Joe”, true]);
```</p>

<h4 id="implementation-intuition">Implementation intuition</h4>

<p>Our basic logic is fairly simple, given an <code>HList</code> and a <code>Target</code> type:</p>

<ol>
  <li>If the head of the Hlist matches the <code>Target</code> type, return the head of the Hlist and the tail of the Hlist as the remainder in a pair (2 element tuple)</li>
  <li>Otherwise,
    <ol>
      <li>Store the head in <code>current_head</code></li>
      <li>Call <code>pluck()</code> again on the tail of the current Hlist with the same <code>Target</code> type (i.e. recursively call 1. with the tail), and store the result in <code>(tail_target, tail_remainder)</code> pair.</li>
      <li>Return the target plucked from the tail, and prepend <code>current_head</code> to the remainder from the tail. Return both in a tuple like so: <code>(tail_target, HCons { head: current_head, tail: tail_remainder} )</code>.</li>
    </ol>
  </li>
</ol>

<h4 id="first-attempt">First attempt</h4>

<p>First, let’s assume we’ll be working with a trait; call it <code>Plucker</code>. For now, let’s also assume that it will be parameterised with 1 type, the target type, and will also have an associated type, <code>Remainder</code>. There isn’t really a hard and fast rule for when you should use type parameters vs associated types, but if you’re interested, you can take a look at <a href="http://stackoverflow.com/questions/32059370/when-is-it-appropriate-to-use-an-associated-type-versus-a-generic-type">this Stackoverflow question</a> because Matthieu offers some great advice.</p>

<p>Personally, I always try use an associated type when I need to refer to the type from somewhere else (espescially recursively; more on this later). However, going with a type parameter is useful when you need to have different implementations of a trait for the same type in different circumstances. We saw this with <code>Add</code>, where the right hand side was a type parameter, <code>RHS</code>, allowing you to declare different <code>Add</code> implementations for the same left-hand-side type and letting the compiler find the correct implementation to use at <code>+</code> call sites depending on the type of thing being added with.</p>

<p>```rust
// Our trait
trait Plucker<target> {</target></p>

<p>type Remainder;</p>

<p>// Pluck should return the target type and the Remainder in a pair
  fn pluck(self) -&gt; (Target, Self::Remainder);
}
```</p>

<p>The “exit-type” implementation is for when the current head of the <code>HList</code> contains the target type, so let’s jot that down that:</p>

<p>```rust
impl &lt;Target, Tail&gt; Plucker<target> for HCons&lt;Target, Tail&gt; {</target></p>

<p>// Target is the head element, so the Remainder type is the tail!
  type Remainder = Tail;</p>

<p>fn pluck(self) -&gt; (Target, Self::Remainder) {
    (self.head, self.tail)
  }
}
```</p>

<p>Now let’s implement the second piece; the non-trivial part where the target type is <em>not</em> in <code>Head</code>, but in the <code>Tail</code> of our HList. I’ll sometimes refer to this as the “work-to-be-done” type.</p>

<p>```rust
impl &lt;Target, Head, Tail&gt; Plucker<target> for HCons&lt;Head, Tail&gt;
  where Tail: Plucker<target></target></target></p>

<p>// Target is in the tail, so we add the current head type to the remainder
  // And use the Tail’s Plucker’s Remainder type as the tail :)
  type Remainder = HCons&lt;Head, &lt;Tail as Plucker<target>&gt;::Remainder&gt;;</target></p>

<p>fn pluck(self) -&gt; (Target, Self::Remainder) {
    let (tail_target, tail_remainder): (Target, &lt;Tail as Plucker<target>&gt;::Remainder) = self.tail.pluck();
    (
      tail_target,
      HCons { head: self.head, tail: tail_remainder}
    )</target></p>

<p>}
}
```</p>

<p>Looks good right? But if you send that to the compiler, you’ll be hit with this message:</p>

<p><code>bash
error[E0119]: conflicting implementations of trait `Plucker&lt;_&gt;` for type `frunk_core::hlist::HCons&lt;_, _&gt;`:
   --&gt; tests/example.rs:306:1
    |
296 |   impl &lt;Target, Tail&gt; Plucker&lt;Target&gt; for HCons&lt;Target, Tail&gt; {
    |  _- starting here...
297 | |
298 | |     // Target is the head element, so the Remainder type is the tail!
299 | |     type Remainder = Tail;
300 | |
301 | |     fn pluck(self) -&gt; (Target, Self::Remainder) {
302 | |         (self.head, self.tail)
303 | |     }
304 | | }
    | |_- ...ending here: first implementation here
305 |
306 |   impl &lt;Target, Head, Tail&gt; Plucker&lt;Target&gt; for HCons&lt;Head, Tail&gt;
    |   ^ conflicting implementation for `frunk_core::hlist::HCons&lt;_, _&gt;`
</code></p>

<p>What the Rust compiler is helpfully is telling us, is that it can’t distinguish between our two implementations, and if we look closely at the types, that is indeed true:</p>

<p>```rust
// exit (work done) type implementation
impl &lt;Target, Tail&gt;  Plucker<target> for HCons&lt;Target, Tail&gt;</target></p>

<p>// work-to-be-done implementation
impl &lt;Target, Head, Tail&gt; Plucker<target> for HCons&lt;Head, Tail&gt;
```</target></p>

<p>The <code>Plucker&lt;Target&gt;</code> part is exactly the same, and sure, we’ve used <code>Target</code> instead of <code>Head</code> in the <code>for HCons&lt;..&gt;</code> part in the first case, but simply using different type parameters isn’t enough to distinguish between the two.</p>

<p>Furthermore, note that you can’t use the lack of constraints (or <code>where</code> clauses) to distinguish between implementations either. This is because the current lack of an implementation for a given type parameter doesn’t mean that it can’t be added later (see <a href="http://stackoverflow.com/a/39161143/1814775">this Stackoverflow questions</a> for more details).</p>

<p>Welp, back to the drawing board.</p>

<h4 id="second-attempt">Second attempt</h4>

<p>What we’ve learnt is that we need to have another type parameter in order to distinguish the exit-type and the work-to-be-done-type implementations, so let’s add one to <code>Plucker</code>. Intuitively, we know that we want to have a way to distinguish between “the target is here in the HList” (exit) and “the target is over there in the HList” (recursion), so let’s call our type parameter <code>Index</code>.</p>

<p>```rust
// the new and improved Plucker trait
trait Plucker&lt;Target, Index&gt; {
    type Remainder;</p>

<pre><code>fn pluck(self) -&gt; (Target, Self::Remainder); } ```
</code></pre>

<p>Then, let’s add a type to identify the <code>index</code> for the exit-type implementation. We’ll use an empty <code>enum</code> because we just want to have a type, and we don’t want it to be available at runtime (ensuring zero runtime cost for our type).</p>

<p>```rust
// This will be the type we’ll use to denote that the Target is in the Head
enum Here {}</p>

<p>impl &lt;Target, Tail&gt; Plucker&lt;Target, Here&gt; for HCons&lt;Target, Tail&gt; {</p>

<p>// Target type is in the Head, so the Remainder type must be the tail!
  type Remainder = Tail;</p>

<p>fn pluck(self) -&gt; (Target, Self::Remainder) {
    (self.head, self.tail)
  }
}
```</p>

<p>What about the work-to-be-done-type? Let’s imagine a scenario where we want to pluck a <code>Target</code> of type <code>MagicType</code> (let’s assume it’s declared as <code>struct MagicType</code>, so a type with a single element in it), and we have the following <code>HList</code>s to <code>pluck()</code> from; what would the <code>Index</code> be?</p>

<ol>
  <li>
    <p><code>HNil</code></p>

    <p>Trick question, there is no <code>Index</code> because our target of <code>MagicType</code> isn’t here. The compiler should fail to find an instance/implementation of our trait.</p>
  </li>
  <li>
    <p><code>hlist[ MagicType ]</code> (this is syntactic sugar for <code>HCons&lt;MagicType, HNil&gt;</code>)</p>

    <p><code>Index</code> would clearly be our <code>Here</code> enum type</p>
  </li>
  <li>
    <p><code>hlist![ Foo, MagicType ]</code> (this is syntactic sugar for <code>HCons&lt;Foo, HCons&lt;MagicType, HNil&gt;&gt;</code>)</p>

    <p><code>Index</code> can’t be <code>Here</code>, but we know that in order for the compiler to be satisfied that it can reach our end-type in 1. <code>Here</code> needs to be <em>somewhere</em> inside the type, but we <em>can’t</em> just use it as is, otherwise we’ll run into the same “conflicting implementation” error as before. So, let’s introduce new type <code>There&lt;A&gt;</code>, that has one type parameter. In this case, the <code>Index</code> should resolve to <code>There&lt;Here&gt;</code> because the target type is in the head of the tail.</p>
  </li>
  <li>
    <p><code>hlist![ Foo, Foo, MagicType ]</code></p>

    <p>Following from 3. <code>Index</code> would have to be <code>There&lt;There&lt;Here&gt;&gt;</code></p>
  </li>
  <li>
    <p><code>hlist![ Foo, Foo, Foo, MagicType ]</code></p>

    <p>What else could <code>Index</code> be but <code>There&lt;There&lt;There&lt;Here&gt;&gt;&gt;</code></p>
  </li>
</ol>

<p>That Looks alright, so let’s give it a go. Since the new type has a type parameter but no real data to associate it with, we’ll need use the <code>PhantomData</code> trick (discussed in <a href="blog/2017/03/04/labelledgeneric-in-rust-what-why-how/#fieldname-type">the last post</a>).</p>

<p>```rust
// Type for representing a not-here Index
struct There<t>(PhantomData<t>);</t></t></p>

<p>impl&lt;Head, Tail, Target, TailIndex&gt; Plucker&lt;Target, There<tailindex>&gt; for HCons&lt;Head, Tail&gt;
    // This where clause can be interpreted as "the target must be pluckable from the Tail"
    where Tail: Plucker&lt;Target, TailIndex&gt;
{
    type Remainder = HCons&lt;Head, &lt;Tail as Plucker&lt;Target, TailIndex&gt;&gt;::Remainder&gt;;</tailindex></p>

<pre><code>fn pluck(self) -&gt; (Target, Self::Remainder) {
    let (target, tail_remainder): (Target, &lt;Tail as Plucker&lt;Target, TailIndex&gt;&gt;::Remainder) =
        &lt;Tail as Plucker&lt;Target, TailIndex&gt;&gt;::pluck(self.tail);
    (target,
     HCons {
         head: self.head,
         tail: tail_remainder,
     })
} } ```
</code></pre>

<p>And that’s it, we’ve written implementations of <code>Plucker</code> for <code>HList</code>. The implementation for work-to-be-done type is type-recursive in its <code>Index</code> type as well as its <code>Remainder</code> associated type. The cool thing is that the compiler is in charge of figuring out what the <em>concrete</em> types should be at any given <code>pluck()</code> call-site. In fact, you can see <a href="https://beachape.com/frunk/frunk_core/hlist/trait.Plucker.html">from this example</a> in Frunk that the compiler will also happily infer the remainder for us too.</p>

<h3 id="type-level-walkthrough">Type-level walkthrough</h3>

<p>Let’s take a step back and work through what we’ve done.</p>

<p>We’ve declared an implementation of <code>Plucker</code> for the trivial exit-type (<code>Target</code> is in the head).</p>

<p>We’ve also declared an implementation for the work-to-be-done type (<code>Target</code> is in the tail). This implementation, however, is dependent on its recursive types of <code>Tail</code> and <code>TailIndex</code> (hint: look at the <code>where</code> clause).  Intuitively speaking, an implementation of this type only exists if the current HList’s <code>Tail</code> has either:</p>

<ol>
  <li>An implementation for the exit-type; the <code>Target</code> type is in the head</li>
  <li>Another work-to-be-done implementation of <code>Plucker</code>. This ultimately means that <em>eventually</em> there has to be a 1. in the tail <em>somewhere</em>.</li>
</ol>

<p>Let’s try to walk through a mental model of how <code>pluck()</code> gets associated to the proper implementation.</p>

<p>```rust
// Given an HList (type explicitly declared for clarity)
let h: Hlist![ &amp;str, bool, f32, i32 ] = hlist![ “Joe”, false, 42f32, 9 ];</p>

<p>// Suppose we want to get the float (f32) value out
// We’re ignoring the remainder and its type (Rust will figure it out),
// because it isn’t relevant for now.
let (v, <em>): (f32,</em>) = h.pluck();
```</p>

<p>We’re ignoring the remainder and its type (Rust will figure it out if we use the underscore binding <code>_</code>), because it isn’t relevant for what we’re about to do.</p>

<p>In the following steps, we’ll substitute concrete types into our implementations where possible; similar to how functions get bound to values during the <a href="http://www.cs.cornell.edu/courses/cs3110/2013sp/lectures/lec06-subst-model/lec06.html">substitution model of evaluation</a> (normally used for evaluating runtime values). We’ll do this in steps, so it’s possible that in the earlier stages, we don’t quite know the concrete type yet, but we’ll go down the “stack”, and come back up and fill those types in, too, once we know them.</p>

<ol>
  <li>
    <p><code>pluck()</code> on <code>Hlist![ &amp;str, bool, f32, i32 ]</code></p>

    <p>Since our <code>Target</code> type (<code>f32</code>) is not in the head, it doesn’t match with the <code>Here</code> case, so we will try to use the work-to-be-done case (<code>Index</code> is <code>There&lt;TailIndex&gt;</code>) and fill in as many types as we can for now. Let’s replace some type parameters with their concrete types where possible.</p>

    <p>Concrete types:</p>

    <ul>
      <li><code>Head</code> → <code>&amp;str</code></li>
      <li><code>Tail</code> → <code>Hlist![bool, f32, i32 ]</code> (remember, this is syntactic sugar for <code>HCons&lt;bool, HCons&lt;f32, HCons&lt;i32, HNil&gt;</code>)</li>
      <li><code>Target</code> → <code>f32</code> (this doesn’t change)</li>
      <li><code>Remainder</code> → Don’t know yet, but we already know that the current <code>Head</code> will be in it, since it isn’t the <code>target</code> type. And we know the tail of <code>Remainder</code> will be the remainder from <code>pluck()</code>ing <code>f32</code> from the tail, so we can reference it as <code>HCons&lt; &amp;str, &lt; Hlist![bool, f32, i32] as Plucker&lt;f32, There&lt;Here&gt;&gt; &gt;::Remainder &gt;</code> for now.</li>
      <li><code>TailIndex</code> → Don’t know yet, but we’ll find out. Let’s call reference it as <code>TailIndex1</code> for now.</li>
    </ul>
  </li>
  <li>
    <p><code>pluck()</code> on <code>Hlist![bool, f32, i32]</code> (<code>Tail</code> from 1.)</p>

    <p>Again, <code>f32</code> is not in the head of our type, so we know we aren’t going to be working with the exit-type typeclass implementation (e.g., <code>Index</code> is not <code>Here</code> yet.)</p>

    <p>Concrete types:</p>

    <ul>
      <li><code>Head</code> → <code>bool</code></li>
      <li><code>Tail</code> → <code>Hlist![ f32, i32 ]</code></li>
      <li><code>Target</code> → <code>f32</code> (again, this doesn’t change)</li>
      <li><code>Remainder</code> → Still don’t know yet, but we do know that <code>bool</code> will be in it since it isn’t our target. Similar to the previous step, we’ll tentatively call it <code>HCons&lt; bool, &lt; Hlist![ f32, i32] as Plucker&lt;f32, Here&gt; &gt;::Remainder &gt;</code></li>
      <li><code>TailIndex</code> → Don’t know yet, but let’s rename it <code>TailIndex2</code> for now and fill it in later.</li>
    </ul>
  </li>
  <li>
    <p><code>pluck()</code> on <code>Hlist![ f32, i32 ]</code> (<code>Tail</code> from 2.)</p>

    <p>The head has type <code>f32</code> and the target type is <code>f32</code>, so we’ve arrived at the exit-type implementation.</p>

    <p>Concrete types:</p>

    <ul>
      <li><code>Head</code> → <code>f32</code></li>
      <li><code>Tail</code> → <code>Hlist![ i32 ]</code></li>
      <li><code>Target</code> → <code>f32</code> !</li>
      <li><code>Remainder</code> → Since we’ve found our target, we know that <code>Remainder</code> must be the tail, and thus <code>Hlist![ i32 ]</code>, or its equivalent <code>HCons&lt; i32, HNil &gt;</code></li>
      <li><code>Index</code> → <code>Here</code> !</li>
    </ul>
  </li>
</ol>

<p>Now, that we’ve finally resolved a concrete type for <code>Index</code>, we can go backwards up the type-level stack and fill in our unknowns:</p>

<ul>
  <li>Step 2:
    <ul>
      <li><code>TailIndex2</code> → <code>Here</code>, which means that <code>Index</code> is <code>There&lt;Here&gt;&gt;</code></li>
      <li><code>Remainder</code> → <code>HList![ boo, i32 ]</code></li>
    </ul>
  </li>
  <li>Step 1:
    <ul>
      <li><code>TailIndex1</code> → <code>There&lt;Here&gt;</code>, which means that <code>Index</code> is <code>There&lt;There&lt;Here&gt;&gt;&gt;</code></li>
      <li><code>Remainder</code> → <code>HList![ &amp;str, boo, i32 ]</code></li>
    </ul>
  </li>
</ul>

<p>The compiler is thus able to find a trait implementation to <code>pluck()</code> a <code>f32</code> out of an <code>Hlist![ &amp;str, bool, f32, i32 ]</code> that looks like this (with all the type parameters bound to a concrete type):</p>

<p>```rust
// Remember Hlist![ … ] is just a type-macro to make it easier to write nested Hcons
impl Plucker&lt; f32, There&lt;There<here>&gt; &gt; for Hlist![ &amp;str, bool, f32, i32 ]
   where Hlist![ bool, f32, i32 ]: Plucker&lt; f32, There<here> &gt;
{
  type Remainder = HList![ &amp;str, boo, i32 ];</here></here></p>

<p>fn pluck(self) -&gt; (f32, Self::Remainder) {
    let (target, tail_remainder): (f32, &lt; Hlist![bool, f32, i32] as Plucker&lt;f32, There<here>&gt; &gt;::Remainder) =
      &lt; Hlist![ bool, f32, i32 ] as Plucker&lt;f32, There<here>&gt; &gt;::pluck(self.tail);
    (target,
     HCons {
         head: self.head,
         tail: tail_remainder,
     })
  }
}
```</here></here></p>

<p>Whew! That took a while, but I hope it helps illustrate how you can use a mental model similar to the substitution model of evaluation, but with types, in order to prove the existence of implementations for a given type.</p>

<p>By the way, by default, the compiler has a limit on how many levels of recursion/expansion this search for a typeclass instance goes. In my testing, I found this to be 64 levels and verified it to be so by looking at <a href="https://github.com/rust-lang/rust/blob/be304afc8c2b1a364bd406888b5378897ed82a9f/src/libsyntax/ext/expand.rs#L1122">Rust’s source code</a>. If you hit the limit, the compiler blow up, but will helpfully offer you a solution:</p>

<p><code>
error[E0275]: overflow evaluating the requirement `frunk_core::hlist::HNil: frunk_core::hlist::Plucker&lt;bool, _&gt;`
   --&gt; tests/derivation_tests.rs:296:35
    |
296 |     let (e, _): (bool, _) = hello.pluck();
    |                                   ^^^^^
    |
    = note: consider adding a `#![recursion_limit="128"]` attribute to your crate
    = note: required because of the requirements on the impl of `frunk_core::hlist::Plucker&lt;bool, frunk_core::hlist::There&lt;_&gt;&gt;` for `frunk_core::hlist::HCons&lt;bool, frunk_core::hlist::HNil&gt;`
</code></p>

<p>So, simply add <code>#![recursion_limit="128"]</code> to your crate. If you hit the limit again, the compiler will tell you to double the limit again. Ad infinitum.</p>

<h2 id="sculpting-hlists">Sculpting HLists</h2>

<p>Great ! Now that we’ve finished with <code>Plucker</code>, let’s go one level deeper: making use of <code>Plucker</code> to do something even more interesting; sculpting <code>HList</code>s !</p>

<p>Here is the basic idea of what we want to be able to do:</p>

<p>```rust
// Given an HList of type Hlist![ i32, &amp;str, f32, bool ]
let h] = hlist![9000, “joe”, 41f32, true];</p>

<p>// We’d like to be able to “sculpt” it into another, differently shaped HList.
//
// Of course, the types in the new HList must be a subset of the original HList,
// and if not, compilation should fail.
//
// Similar to pluck(), we’d also want the remainder of the original HList <em>not</em>
// used in the final result.
let (reshaped, remainder): (Hlist![ f32, i32, &amp;str ], _) = h.sculpt();
assert_eq!(reshaped, hlist![41f32, 9000, “joe”]);
assert_eq!(remainder, hlist![true]);</p>

<p>// the following should fail to compile, because there is no char in the original Hlist
let (reshaped, _) = (Hlist![char], _) = h.sculpt();
```</p>

<h3 id="implementation-intuition-1">Implementation intuition</h3>

<p>Let’s call our trait <code>Sculptor</code>. We should be able to re-use our <code>Plucker</code> trait, which which means we’ll work with <code>Target</code>s and <code>Index</code>s, <em>but</em> there’s more than one of each!</p>

<p>Intuitively, this is the kind of logic that we want:</p>

<p>Given <code>TargetHList</code> (target HList) and <code>SourceHList</code> (source HList), and assuming the types in the former is a subset (not necessarily in order though) of the latter:</p>

<ol>
  <li>Pluck value with the head type of <code>TargetHList</code> from <code>SourceHList</code>:
    <ul>
      <li>Store the result in a <code>(plucked, remainder)</code> tuple</li>
    </ul>
  </li>
  <li>Call <code>sculpt</code> on <code>remainder</code>, passing the tail type of the current <code>TargetHList</code> as the new    <code>TargetHList</code> type.
    <ul>
      <li>Store the result in a <code>(sculpted_tail, sculpted_remainder)</code> tuple</li>
    </ul>
  </li>
  <li>Return <code>(HCons { head: plucked, tail: sculpted_tail }, sculpted_remainder)</code></li>
</ol>

<p>Note that in 1. we are making use of <code>pluck()</code>, and there is a recursive call to <code>sculpt()</code> in 2. Since there is a recursive call to <code>sculpt()</code>, it means that we need an exit-type as well. Intuitively, we’ll pencil one in:</p>

<blockquote>
  <p>When the target HList is empty (HNil), return a tuple <code>(HNil, SourceHList)</code></p>
</blockquote>

<h3 id="first-attempt-1">First attempt</h3>

<p>Given our logic, let’s assume we want 4 type parameters in our trait. Our trait is a bit more complicated than our <code>Pluck</code> trait, but not by much. We make use of the same associated-type trick to hold the type of <code>Remainder</code> to be returned as the 2nd element in our type that will be filled-in when we write instances of the trait.</p>

<p>```rust
trait Sculptor&lt;Target, TargetTail, HeadIndex, TailIndices&gt; {</p>

<p>type Remainder;</p>

<p>fn sculpt(self) -&gt; (HCons&lt;Target, TargetTail&gt;, Self::Remainder);
}
```</p>

<p>The instance of <code>Sculptor</code> for the exit-type should be simple, right?:</p>

<p>```rust
// Our exit condition is when Target is HNil, so we don’t care about the tail of the target
// nor do we really care about the type of SourceHList
impl &lt;TargetTail, HeadIndex, TailIndices, SourceHList&gt; Sculptor&lt;HNil, TargetTail, HeadIndex, TailIndices&gt; for SourceHList {</p>

<pre><code>type Remainder = Source;

// ?!?!? HNil as the head type of an HCons doesn't make sense
fn sculpt(self) -&gt; (HCons&lt;HNil, TargetTail&gt;, Self::Remainder) {
    // nevermind
}
</code></pre>

<p>}
```</p>

<p>Ooops; that didn’t work; our type signature for the trait can’t be fulfilled when implementing our instance! We simply have too many type parameters in our trait, even for the exit-type implementation (try implementing for the recursion case…it’ll become more apparent)</p>

<p>Back to the drawing board.</p>

<h3 id="second-attempt-1">Second attempt</h3>

<p>Let’s collapse our target-related type parameters into a single <code>Target</code> type parameter and our indices-related type parameters into a single <code>Indices</code> type parameter in our <code>Sculptor</code> trait declaration, and rely on the implementations to dictate (specialise) what types they should be (similar to how the <code>Plucker</code> trait had no mention of <code>There</code> or <code>Here</code>).</p>

<p>```rust
trait Sculptor&lt;Target, Indices&gt; {</p>

<pre><code>type Remainder;

fn sculpt(self) -&gt; (Target, Self::Remainder); } ```
</code></pre>

<p>The exit-type implementation will still be when we have <code>HNil</code> as the target. Thinking it through further, in the case that we don’t have a <code>HNil</code> as the target, it’s obvious that <code>Source</code> can then be literally anything, so we’ll rename its type parameter <code>Source</code>. Since our intention for <code>Sculptor</code> is for <code>Indices</code> to be an HList of <code>Here</code> or <code>There&lt;A&gt;</code> (one for each type in our <code>Target</code> HList), the exit <code>Indices</code> must therefore be a valid Hlist. Since we don’t need an index to find an empty target, let’s make <code>Indices</code> <code>HNil</code> for simplicity.</p>

<p>```rust
impl<source /> Sculptor&lt;HNil, HNil&gt; for Source {
    // Since Our Target is HNil, we just return the Source
    type Remainder = Source;</p>

<pre><code>fn sculpt(self) -&gt; (HNil, Self::Remainder) {
    (HNil, self)
} } ```
</code></pre>

<p>To figure out the type parameters needed for our work-to-be-done type, let’s work through the logic we laid out earlier.</p>

<p>At minimum, we know we’re writing an instance of <code>Sculptor</code> for a Source of type HList, and our Target type is also an HList, so we’ll use <code>SHead</code> and <code>STail</code> to describe the “Source” HList (so <code>HCons&lt;SHead, STail&gt;</code>), and <code>THead</code> and <code>TTail</code> to denote the “Target” HList (similarly, <code>HCons&lt;THead, TTail&gt;</code>).</p>

<blockquote>
  <ol>
    <li>Pluck value with the head type of <code>TargetHList</code> from <code>SourceHList</code>:
      <ul>
        <li>Store the result in a <code>(plucked, remainder)</code> tuple</li>
      </ul>
    </li>
  </ol>
</blockquote>

<p>Since we need to <code>pluck()</code> a <code>THead</code> from our Source HList, we’ll need a type parameter for the first index, so let’s name it <code>IndexHead</code>. In addition, in order to <code>pluck()</code>, we need a <code>Plucker</code> too, so this constraint is needed somewhere in our implementation declaration:</p>

<p><code>rust
 HCons&lt;SHead, STail&gt;: Plucker&lt;THead, IndexHead&gt;
</code></p>

<blockquote>
  <ol>
    <li>Call <code>sculpt()</code> on <code>remainder</code>, passing the tail type of the current <code>TargetHList</code> as the new <code>TargetHList</code> type.
      <ul>
        <li>Store the result in a <code>(sculpted_tail, sculpted_remainder)</code> tuple</li>
      </ul>
    </li>
  </ol>
</blockquote>

<p>Since we want to sculpt the remainder of calling <code>pluck()</code> in step 1. into type <code>TTail</code> (tail of <code>TargetHList</code>), we’ll need to have an HList of indices for that purpose too, so let’s call it <code>IndexTail</code>. Note that we don’t need a separate type parameter for the remainder from 1 because we can take advantage of the associated type on <code>Plucker</code>.</p>

<p><code>rust
// In English, this is read as:
// "The remainder of plucking the Target head type (THead) out of the source HList
// must have a Sculptor implementation that lets us turn it into the tail type of
// the Target HList (TTail) using the tail of the current Indices (IndexTail)"
&lt;HCons&lt;SHead, STail&gt; as Plucker&lt;THead, IndexHead&gt;&gt;::Remainder: Sculptor&lt;TTail, IndexTail&gt;
</code></p>

<blockquote>
  <ol>
    <li>Return <code>(HCons { head: plucked, tail: sculpted_tail }, sculpted_remainder)</code></li>
  </ol>
</blockquote>

<p>What will the <code>Remainder</code> type be? It should be the remainder of sculpting the remainder from plucking the head type (<code>THead</code>) out of the current source HList into <code>TTail</code> (yeah…)</p>

<p><code>rust
type Remainder = &lt;&lt;HCons&lt;SHead, STail&gt; as Plucker&lt;THead, IndexHead&gt;&gt;::Remainder as Sculptor&lt;TTail, IndexTail&gt;&gt;::Remainder;
</code></p>

<p>Putting all these types together with the logic, we have</p>

<p>```rust
impl &lt;THead, TTail, SHead, STail, IndexHead, IndexTail&gt; Sculptor&lt;HCons&lt;THead, TTail&gt;, HCons&lt;IndexHead, IndexTail»
    for HCons&lt;SHead, STail&gt;
    where
        HCons&lt;SHead, STail&gt;: Plucker&lt;THead, IndexHead&gt;,
        &lt;HCons&lt;SHead, STail&gt; as Plucker&lt;THead, IndexHead»::Remainder: Sculptor&lt;TTail, IndexTail&gt; {</p>

<pre><code>type Remainder = &lt;&lt;HCons&lt;SHead, STail&gt; as Plucker&lt;THead, IndexHead&gt;&gt;::Remainder as Sculptor&lt;TTail, IndexTail&gt;&gt;::Remainder;

fn sculpt(self) -&gt; (HCons&lt;THead, TTail&gt;, Self::Remainder) {
    let (p, r): (THead, &lt;HCons&lt;SHead, STail&gt; as Plucker&lt;THead, IndexHead&gt;&gt;::Remainder) = self.pluck();
    let (tail, tail_remainder): (TTail, Self::Remainder) = r.sculpt();
    (
        HCons {
            head: p,
            tail: tail
        },
        tail_remainder
    )
}
</code></pre>

<p>}
```</p>

<p>As you can see, our implementations of <code>Sculptor</code> is type-recursive in an interesting way, and there are quite a few dependencies that need to be worked out between all the type parameters and the <code>Plucker</code> trait <em>as well as</em> the <code>Sculptor</code> trait itself (it appears in the <code>where</code> after all). Fortunately, the Rust compiler will do that for us (and if need be, tell you to raise the <code>#![recursion_limit]</code> in your crate).</p>

<p>If you’re not convinced this works, please by all means check out the <a href="https://beachape.com/frunk/frunk_core/hlist/index.html"><code>hlist</code> module</a> in Frunk, in particular the <a href="https://beachape.com/frunk/frunk_core/hlist/trait.Sculptor.html">Sculptor trait</a>.</p>

<h2 id="conclusion">Conclusion</h2>

<p>One last thing: the <code>Plucker</code> and <code>Sculptor</code> things aren’t just cute exercises; <code>Plucker</code> has already paid dividends when modeling <code>Sculptor</code>, and <code>Sculptor</code>, well, it’s instrumental in letting us do cool stuff like convert between structs with different <a href="/blog/2017/03/04/labelledgeneric-in-rust-what-why-how/">LabelledGeneric implementations</a> (to an extent, anyways), and other, even cooler generic functions. We’ll talk more about this in <a href="/blog/2017/04/12/boilerplate-free-struct-transforms-in-rust/">another post</a>.</p>

<p>If you do a search, you’ll find a number of articles on the Interwebs that introduce Rust’s trait system, but not many that go deep into how to use it when you need to do non-trivial type-level recursion in your trait implementations (though how often this need arises is … another topic altogether). I also find that people generally don’t talk about what they did <em>wrong</em>, so I wanted to share my failed approaches as well.</p>

<p>The goal of this post is to hopefully help others who are curious, or have a need to do something similar, as well as to leave notes for myself in case I ever need to revisit this in the future. The mental models for breaking down the problem, defining types, and building up to an implementation might not work for everyone, but they’ve helped me.</p>

<p>Personally, I think it’s awesome that a close-to-the-metal systems programming language like Rust has a powerful enough compiler and type-system to allow for these kinds of techniques. As you can see, we’ve managed to build powerful, reusable abstractions without doing anything unsafe, and we’ve exposed an API that requires just the bare minimum of type annotations; Rust infers the rest :) In any case, I hope this post was useful, and as usual, please chime in with questions and suggestions.</p>

<h3 id="credit">Credit</h3>
<ol>
  <li>The <code>Here</code> and <code>There&lt;A&gt;</code> design was largely gleaned from <a href="https://github.com/Sgeo/hlist/blob/master/src/lib.rs#L30">this code</a>. I stand on the shoulders of giants :)</li>
</ol>

<p>** It goes without saying that these operations need to be type-safe. That is, they are verified by the compiler without using any unsafe tricks that could blow up at runtime.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LabelledGeneric in Rust: What, Why, How?]]></title>
    <link href="https://beachape.com/blog/2017/03/04/labelledgeneric-in-rust-what-why-how/"/>
    <updated>2017-03-04T12:23:00+09:00</updated>
    <id>https://beachape.com/blog/2017/03/04/labelledgeneric-in-rust-what-why-how</id>
    <content type="html"><![CDATA[<p>What is <code>LabelledGeneric</code>? How does one encode type-level Strings in Rust? What is a labelled HList?</p>

<p>Hold on, let’s take a step back.</p>

<p>In a previous post about <a href="/blog/2017/02/04/rust-generic-not-generics/">implementing <code>Generic</code> in Rust</a>, I briefly mentioned the fact that <code>Generic</code> could cause silent failures at runtime if you have 2 structs that are identically shaped type-wise, but have certain fields swapped.</p>

<p>While we can work around this using wrapper types, that solution leaves something to be desired, because, well, more boilerplate adds noise and requires more maintenance.</p>

<p>Ideally, we want to have something like this, where the following works:</p>

<p>```rust
#[derive(LabelledGeneric)]
struct NewUser&lt;’a&gt; {
    first_name: &amp;’a str,
    last_name: &amp;’a str,
    age: usize,
}</p>

<h1 id="derivelabelledgeneric">[derive(LabelledGeneric)]</h1>
<p>struct SavedUser&lt;’a&gt; {
    first_name: &amp;’a str,
    last_name: &amp;’a str,
    age: usize,
}</p>

<p>let n_user = NewUser {
                    first_name: “Moe”,
                    last_name: “Ali”,
                    age: 30
                };</p>

<p>// Convert from NewUser to SavedUser
let s_user: SavedUser = labelled_convert_from(n_user);
```</p>

<p>but the following fails at compile-time because the fields are mis-matched (<code>first_name</code> and <code>last_name</code> have been swapped):</p>

<p>```rust
// Uh-oh! Fields are jumbled :(
#[derive(LabelledGeneric)]
struct JumbledUser&lt;’a&gt; {
    last_name: &amp;’a str,
    first_name: &amp;’a str,
    age: usize
}</p>

<p>// This should fail at compile-time because last_name and first_name are swapped
// even if they have the same type
let d_user = <jumbleduser as="" labelledgeneric="">::convert_from(s_user);
```</jumbleduser></p>

<p>The solution to this sort of problem has been in <a href="https://github.com/milessabin/shapeless">Shapeless</a> for some time; by using <code>HList</code>s where each cell contains not just a value, but instead hold <em>named</em> fields, where each value is labelled <em>at the type level</em>.</p>

<p>Let’s take a look at how Frunk implements <code>Field</code> values and <code>LabelledGeneric</code> in Rust :)</p>

<!-- more -->

<h2 class="no_toc" id="add-frunk-to-your-project">Add Frunk to your project</h2>

<p><a href="https://github.com/lloydmeta/frunk">Frunk</a> is published to <a href="//crates.io/crates/frunk">Crates.io</a>, so to begin, add the crate to your list of dependencies:</p>

<p><a href="https://crates.io/crates/frunk"><img src="https://img.shields.io/crates/v/frunk.svg" alt="Crates.io" /></a></p>

<p><code>rust
[dependencies]
frunk = "${latest_version}"
</code></p>

<h2 class="no_toc" id="outline">Outline</h2>
<ul id="markdown-toc">
  <li><a href="#derivelabelledgeneric">[derive(LabelledGeneric)]</a>    <ul>
      <li><a href="#why-motivation">Why? (Motivation)</a>        <ul>
          <li><a href="#silent-runtime-errors-with-generic">Silent runtime errors with <code>Generic</code></a></li>
        </ul>
      </li>
    </ul>
  </li>
  <li><a href="#derivegeneric">[derive(Generic)]</a>    <ul>
      <li><a href="#labelledgeneric-to-the-rescue"><code>LabelledGeneric</code> to the rescue</a></li>
    </ul>
  </li>
  <li><a href="#derivelabelledgeneric-1">[derive(LabelledGeneric)]</a></li>
  <li><a href="#derivegeneric-1">[derive(Generic)]</a>    <ul>
      <li><a href="#field-"><code>Field</code> ??</a></li>
      <li><a href="#how-it-works">How it works</a>        <ul>
          <li><a href="#fieldname-type"><code>Field&lt;Name, Type&gt;</code></a>            <ul>
              <li><a href="#type-level-characters-and-strings">Type-level characters and strings</a></li>
            </ul>
          </li>
          <li><a href="#anonymous-records">(Anonymous) Records!</a></li>
          <li><a href="#field-and-labelledgeneric"><code>Field</code> and <code>LabelledGeneric</code></a></li>
          <li><a href="#how-the-labelledgeneric-derivation-is-generated">How the <code>LabelledGeneric</code> derivation is generated</a></li>
        </ul>
      </li>
      <li><a href="#conclusion">Conclusion</a></li>
      <li><a href="#links">Links</a></li>
    </ul>
  </li>
</ul>

<h2 id="why-motivation">Why? (Motivation)</h2>

<h3 id="silent-runtime-errors-with-generic">Silent runtime errors with <code>Generic</code></h3>

<p>To illustrate the problem, observe that the following 2 structs have the exact same “shape”</p>

<p>```rust
#[derive(Generic)]
struct NewUser&lt;’a&gt; {
    first_name: &amp;’a str,
    last_name: &amp;’a str,
    age: usize,
}</p>

<h1 id="derivegeneric">[derive(Generic)]</h1>
<p>struct JumbledUser&lt;’a&gt; {
    last_name: &amp;’a str,
    first_name: &amp;’a str,
    age: usize
}
```</p>

<p>That is, the <code>Generic</code> representation of their fields as <code>Generic</code> is simply <code>HList![&amp;'a str, &amp;'a str, usize]</code>. As a result, when we do the following:</p>

<p>```rust
let n_user = NewUser {
                    first_name: “Moe”,
                    last_name: “Ali”,
                    age: 30
                };</p>

<p>// Convert from NewUser to JumbledUser
let s_user: JumbledUser = convert_from(n_user);
```</p>

<p>Oh no! <code>s_user</code> has <code>first_name</code> and <code>last_name</code> flipped :(</p>

<p>As explained near the end of the post <a href="/blog/2017/02/04/rust-generic-not-generics/">introducing Generic</a>, you can catch this sort of mistake by introducing wrapper types like <code>FirstName&lt;'a&gt;(&amp;' str)</code> for each field, but that introduces more boilerplate.  This sucks, because <code>Generic</code> is supposed to help <em>avoid</em> boilerplate!</p>

<p>Can we have our cake and eat it too ?</p>

<h3 id="labelledgeneric-to-the-rescue"><code>LabelledGeneric</code> to the rescue</h3>

<p><code>LabelledGeneric</code> was introduced in v0.1.12 of Frunk to solve this exact problem. This is how you use it.</p>

<p>```rust
#[derive(LabelledGeneric)]
struct NewUser&lt;’a&gt; {
    first_name: &amp;’a str,
    last_name: &amp;’a str,
    age: usize,
}</p>

<h1 id="derivelabelledgeneric-1">[derive(LabelledGeneric)]</h1>
<p>struct SavedUser&lt;’a&gt; {
    first_name: &amp;’a str,
    last_name: &amp;’a str,
    age: usize,
}</p>

<p>let n_user = NewUser {
                    first_name: “Moe”,
                    last_name: “Ali”,
                    age: 30
                };</p>

<p>// Convert from NewUser to SavedUser
let s_user: SavedUser = labelled_convert_from(n_user);</p>

<h1 id="derivegeneric-1">[derive(Generic)]</h1>
<p>struct JumbledUser&lt;’a&gt; {
    last_name: &amp;’a str,
    first_name: &amp;’a str,
    age: usize
}
// ⬇︎ This will fail at compile time
let j_user: JumbledUser = labelled_convert_from(n_user);
```
There isn’t a whole lot different to using <code>LabelledGeneric</code> vs using <code>Generic</code>:</p>

<ol>
  <li>Instead of deriving <code>Generic</code>, derive <code>LabelledGeneric</code></li>
  <li>Instead of calling <code>convert_from</code>, call <code>labelled_convert_from</code></li>
</ol>

<p>These 2 changes buy you a lot more type-safety at compile time, with zero boilerplate. By the way, if you’d like the compiler to automatically “align”, the generic representations so that you <em>could</em> instantiate a <code>JumbledUser</code> from a <code>NewUser</code>, then stay tuned for a <a href="/blog/2017/04/12/boilerplate-free-struct-transforms-in-rust/">later post</a> ;)</p>

<p>The tl;dr version of how this works is that deriving by <code>LabelledGeneric</code>, we make the struct an instance of the <code>LabelledGeneric</code> typeclass.  This typeclass is almost identical to the <code>Generic</code> typeclass, but the <code>derive</code> does something a bit different with the generic representation of the struct: it isn’t just an <code>HList</code> wrapping naked values.</p>

<p>Instead, the generic representation will be an <code>HList</code> where each cell will contain <em>field name</em> information, at the type-level, and conceptually has the following types:</p>

<p>```rust
// LabelledGeneric Representation for NewUser
type NewUserRepr = HList![
  Field&lt;first_name, &amp;’a str&gt;,
  Field&lt;last_name, &amp;’a str&gt;,
  Field&lt;age, usize&gt;];</p>

<p>// LabelledGeneric Representation for SavedUser
type SavedUserRepr = HList![
  Field&lt;first_name, &amp;’a str&gt;,
  Field&lt;last_name, &amp;’a str&gt;,
  Field&lt;age, usize&gt;];</p>

<p>// LabelledGeneric Representation for JumbledUser
type JumbledUserRepr = HList![
  Field&lt;last_name, &amp;’a str&gt;,
  Field&lt;first_name, &amp;’a str&gt;,
  Field&lt;age, usize&gt;];
```</p>

<p>This difference in type-level representation is how the compiler knows that one can’t simply convert a <code>NewUser</code> or <code>SavedUser</code> into a <code>JumbledUser</code> via <code>labelled_convert_from</code>.</p>

<h3 id="field-"><code>Field</code> ??</h3>

<p>What is <code>Field</code> ? It’s simply a container struct that is parameterised by 2 types, and has the following signature:</p>

<p><code>rust
pub struct Field&lt;Name, Type&gt; { ... }
</code></p>

<p>The first type parameter is <code>Name</code> and its purpose is to contain a type-level String, and the second type parameter is <code>Type</code>, which reflects the type of value contained inside the struct.</p>

<p>It may help to think of <code>Field</code> as an ad-hoc wrapper type.</p>

<h2 id="how-it-works">How it works</h2>

<h3 id="fieldname-type"><code>Field&lt;Name, Type&gt;</code></h3>

<p>The full definition of <code>Field</code> is currently as follows:</p>

<p><code>rust
pub struct Field&lt;Name, Type&gt; {
    name: PhantomData&lt;Name&gt;,
    pub value: Type,
}
</code></p>

<p><code>PhantomData</code> is used to allow us to bind a concrete type to the <code>Name</code> type parameter in an instance of <code>Field</code> without actually having it take up any space (for more details on Phantom data, refer to the <a href="https://doc.rust-lang.org/std/marker/struct.PhantomData.html">official docs</a>).</p>

<p>To construct a <code>Field</code>, Frunk exposes a macro called <code>field!</code> so that you don’t need to touch <code>PhantomData</code> yourself.</p>

<p>```rust
// Usage: we let the compiler figure out the value type for us
let age = field!((a, g, e), 3);</p>

<p>assert_eq!(age.name, “age”);
assert_eq!(age.value, 3);
```</p>

<p>For more information about the <code>field!</code> macro, please refer to its <a href="https://beachape.com/frunk/frunk_core/macro.field.html">Rustdoc page</a>.  Astute readers will notice the odd <code>(a,g,e)</code> type used for naming. What is that about ???</p>

<h4 id="type-level-characters-and-strings">Type-level characters and strings</h4>

<p>In order represent characters at the type level, Frunk currently uses <code>enum</code>s that have zero members. This is because empty enums have distinct types, and yet cannot be instantiated at runtime and thus are guaranteed to incur zero cost.</p>

<p>Conceptually, we declare one enum for every character we want to represent:</p>

<p>```rust
pub enum a {}
pub enum b {}
pub enum c {}
// …
pub enum A {}
// … etc
// Numbers can’t be identifiers, so we preface them with an underscore
pub enum _1 {}
pub enum _2 {}</p>

<p>// In reality, the above is generated by a macro.
```</p>

<p>This means that characters outside English alphanumeric range will need to be specially encoded (the <code>LabelledGeneric</code> derivation uses unicode, but more on this later), but for the most part, this should suffice for the use case of encoding field names as types.</p>

<p>As you may have guessed, type-level strings are then simply represented as tuple types, hence <code>(a,g,e)</code>. For the sake of reducing noise, in the rest of this post, we will refer to these name-types without commas and parentheses.</p>

<p><strong>Note</strong>: This type-level encoding of strings may change in the future.</p>

<h3 id="anonymous-records">(Anonymous) Records!</h3>

<p>Combining the <code>Field</code> and <code>HList</code> constructs gets us something else: Records. I believe once upon a time, Rust supported anonymous structs; well, you can get most of that functionality back with Frunk!</p>

<p>```rust
let record = hlist![
    field!(name, “Joe”),
    field!(age, 30)
];</p>

<p>// We’ll talk about pluck() in a later post, but just an FYI, it returns the
// target value with the type you specified as well as the remainder
// of the HList in a pair. It is checked at compile time to make sure it never
// fails at runtime.
let (name, _): (Field&lt;name, _&gt;, _) = record.pluck();
assert_eq!(name.value, “Joe”)
```</p>

<p>This kind of thing is sometimes called an “anonymous Record” in Scala (see <a href="https://github.com/scala-records/scala-records">scala-records</a>, or <a href="https://github.com/milessabin/shapeless/blob/master/examples/src/main/scala/shapeless/examples/records.scala">Shapeless</a>).</p>

<p>In the future, the anonymous Records API in Frunk might be improved. As it stands, it exists mostly for the purpose of <code>LabelledGeneric</code> and is a bit noisy to use.</p>

<h3 id="field-and-labelledgeneric"><code>Field</code> and <code>LabelledGeneric</code></h3>

<p>So, what is the relationship between <code>Field</code> and  the <code>LabelledGeneric</code> typeclass?</p>

<p>Quite simply, the associated <code>Repr</code> type of an instance of <code>LabelledGeneric</code> should have the type of an anonymous record (labelled <code>HList</code>).</p>

<p>So, given the following</p>

<p><code>rust
struct Person {
  name: String,
  age: usize
}
</code></p>

<p>This is one possible implementation of <code>LabelledGeneric</code> for <code>Person</code>:</p>

<p>```rust
impl LabelledGeneric for Person {</p>

<p>type Repr = HList![ Field&lt;name, String&gt;, Field&lt;age, usize&gt; ];</p>

<p>fn into(self) -&gt; Self::Repr {
    hlist![
      field!(name, self.name),
      field!(age, self.age)
    ]
  }</p>

<p>fn from(r: Self::Repr) -&gt; Self {
    let hlist_pat![ name, age ] = r;
    Person {
      name: name.value,
      age: age.value
    }
  }</p>

<p>}
```</p>

<p>But writing that yourself is tedious <strong>and</strong> error-prone, so Frunk provides a derivation for you.</p>

<h3 id="how-the-labelledgeneric-derivation-is-generated">How the <code>LabelledGeneric</code> derivation is generated</h3>

<p>As illustrated earlier, you can do the following to create an instance of <code>LabelledGeneric</code> for your struct:</p>

<p><code>rust
#[derive(LabelledGeneric)]
struct Person {
  name: String,
  age: usize
}
</code></p>

<p>It generates something conceptually similar to what we <a href="#labelled-and-labelledgeneric">had above</a>, so we won’t repeat that here.</p>

<p>That said, there is something special about the way that characters outside the range of the standard English alphabet and digits are handled. For each of those characters, we get the Unicode hexcode and use those digits, sandwiched by <code>_uc</code> and <code>uc_</code> delimiters, as the type-level representation.</p>

<p>```rust
// This isn’t possible (yet) in Rust, but let’s pretend it is
struct Fancy {
  ❤: usize
}</p>

<p>// Since ❤ has a Unicode hexcode of \u{2764}\u{fe0f}, the
// labelled generic representation for the above would be
type Repr = HList![ Field&lt;<em>ucu2764ufe0fuc</em>, usize&gt; ]
```</p>

<p>This allows us to effectively represent virtually any legal identifier at the type level, even when the ASCII-only restriction for identifiers is lifted from stable Rust. For more details, take a look at how characters are matched to identifiers <a href="https://github.com/lloydmeta/frunk/blob/8c75c23b1986e533ada83ba89b3b0de584db0f23/derives/src/derive_labelled_generic.rs#L105-L124">here</a>.</p>

<h2 id="conclusion">Conclusion</h2>
<p>In closing, I’d like to stress that all the abstractions and techniques described in this post are type-safe (no casting happening) and thus get fully verified by Rust’s compiler and its strong type system.</p>

<p>As far as I am aware, this is the first implementation of labelled HLists (aka anonymous Records) and <code>LabelledGeneric</code> in Rust, and I hope this post did a good job of explaining what problems they solve, what they are, how they work, and why you might want to use them. As usual, please give them a go and chime in with questions, comments, ideas, or PRs!</p>

<p>Also, as alluded to in <a href="#labelledgeneric-to-the-rescue">the section</a> introducing <code>LabelledGeneric</code>, there is a way to automatically match up out-of-order fields. We’ll go through this in another post.</p>

<h2 id="links">Links</h2>

<ol>
  <li><a href="https://github.com/lloydmeta/frunk">Frunk on Github</a></li>
  <li><a href="https://crates.io/crates/frunk">Frunk on Crates.io</a></li>
</ol>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rust Generic (Not Generics)]]></title>
    <link href="https://beachape.com/blog/2017/02/04/rust-generic-not-generics/"/>
    <updated>2017-02-04T02:14:00+09:00</updated>
    <id>https://beachape.com/blog/2017/02/04/rust-generic-not-generics</id>
    <content type="html"><![CDATA[<p>Have you ever wanted to convert <code>Hlist</code>s into Structs or to reuse logic across different types that are structurally identical or very similar (e.g. same data across different domains)? <code>Generic</code> can help you do that with minimal boilerplate.</p>

<p><img class="center" src="/images/generic_example.png" width="350" height="350" title="‘From Hlist to Struct, no boilerplate’" ></p>

<p><code>Generic</code> is a way of representing a type in … a generic way. By coding around <code>Generic</code>, you can write functions that abstract over types and arity, but still have the ability to recover your original type afterwards. This can be a fairly powerful thing.</p>

<!-- more -->

<p>Thanks to the new Macros 1.1 infrastructure added in Rust 1.15, Frunk comes out of the box with a custom <code>Generic</code> derivation so that boilerplate is kept to a minimum. Without further ado, let’s dive in to see what Generic can do for us.</p>

<h2 id="add-frunk-to-your-project">Add Frunk to your project</h2>

<p><a href="https://github.com/lloydmeta/frunk">Frunk</a> is published to <a href="//crates.io/crates/frunk">Crates.io</a>, so to begin, add the crate to your list of dependencies:</p>

<p><code>rust
[dependencies]
frunk = "0.1.9"
</code></p>

<h2 id="examples">Examples</h2>

<h3 id="hlist--struct">HList ⇄ Struct</h3>

<p>Have an <code>HList</code> lying around and want to turn it into a Struct with the same shape (maybe you’re using <a href="/blog/2016/10/24/accumulating-results-in-rust-with-validated/">Validated</a>)?</p>

<p>```rust
extern crate frunk;
#[macro_use] // for the hlist macro
extern crate frunk_core;
use frunk::*; // for the Generic trait and HList</p>

<h1 id="derivegeneric-debug-partialeq">[derive(Generic, Debug, PartialEq)]</h1>
<p>struct Person&lt;’a&gt; {
    first_name: &amp;’a str,
    last_name: &amp;’a str,
    age: usize,
}</p>

<p>let h = hlist!(“Joe”, “Blow”, 30);
let p: Person = from_generic(h);
assert_eq!(p,
           Person {
               first_name: “Joe”,
               last_name: “Blow”,
               age: 30,
           });
```</p>

<p>This also works the other way too; just pass a struct to <code>into_generic</code> and get its generic representation.</p>

<p>One usecase for something like this is if you have a bunch of fields that you want to validate “simultaneously”, and you want to transform the end result into a single Struct; this is often the case when you want to turn external input (e.g. coming into your API, a web form, or fields read from a database), and in a previous post I introduced <a href="/blog/2016/10/24/accumulating-results-in-rust-with-validated/">Validated</a> as a way of doing that.</p>

<p>With the introduction of <code>Generic</code>, that last step of transforming an <code>HList</code> into your struct gets much simpler:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span></span><span class="kd">let</span><span class="w"> </span><span class="n">validated</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">get_first_name</span><span class="p">().</span><span class="n">into_validated</span><span class="p">()</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">get_last_name</span><span class="p">()</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">get_age</span><span class="p">();</span><span class="w"></span>
</span><span class='line'><span class="kd">let</span><span class="w"> </span><span class="n">person</span><span class="o">:</span><span class="w"> </span><span class="nb">Result</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">Person</span><span class="p">,</span><span class="w"> </span><span class="n">_</span><span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">validated</span><span class="w"></span>
</span><span class='line'><span class="w">  </span><span class="p">.</span><span class="n">into_result</span><span class="p">()</span><span class="w"></span>
</span><span class='line'><span class="w">  </span><span class="p">.</span><span class="n">map</span><span class="p">(</span><span class="o">|</span><span class="n">h</span><span class="o">|</span><span class="w"> </span><span class="n">from_generic</span><span class="p">(</span><span class="n">h</span><span class="p">));</span><span class="w"> </span><span class="c1">// &amp;lt;– much simpler !</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3 id="converting-between-structs">Converting between Structs</h3>

<p>Sometimes you might have 2 or more types that are structurally the same (e.g. different domains but the same data) and you’d like to convert between them. An example of this might be when you have a model for deserialising from an external API and another one for internal application business logic, and yet another for persistence.</p>

<p>Generic comes with a handy <code>convert_from</code> method that helps here:</p>

<p>```rust
// Assume we have all the imports needed</p>

<h1 id="derivegeneric">[derive(Generic)]</h1>
<p>struct ApiPerson&lt;’a&gt; {
    FirstName: &amp;’a str,
    LastName: &amp;’a str,
    Age: usize,
}</p>

<h1 id="derivegeneric-1">[derive(Generic)]</h1>
<p>struct DomainPerson&lt;’a&gt; {
    first_name: &amp;’a str,
    last_name: &amp;’a str,
    age: usize,
}</p>

<p>let a_person = ApiPersion {
                   first_name: “Joe”,
                   last_name: “Blow”,
                   age: 30,
};
let d_person: DomainPersion = convert_from(a_person); // done
```</p>

<p>Another example of where this might be useful is if you want to use different types to represent the same data at different stages (see <a href="http://stackoverflow.com/questions/31949455/transform-one-case-class-into-another-when-the-argument-list-is-the-same">this post on StackOverflow</a>).</p>

<h2 id="how-it-works-what-is-going-on--is-it-safe-">How it works (what is going on ? is it safe ?)</h2>

<p>At a glance, <code>Generic</code> might look magical and dangerous, but really it is no more mysterious than the <code>From</code> trait in the standard lib; the only difference (for now) is that every <code>Generic</code> instance is bidirectional (can turn an <code>A</code> into a <code>Repr</code> and a <code>Repr</code> into an <code>A</code>). If you don’t believe me, just look at the type signatures.</p>

<p>```rust
pub trait Generic<repr> {</repr></p>

<pre><code>/// Go from something to Repr
fn into(self) -&gt; Repr;

/// Go from Repr to something
fn from(r: Repr) -&gt; Self; }
</code></pre>

<p>/// Given a generic Representation of an A, returns A
pub fn from_generic&lt;A, Repr&gt;(gen: Repr) -&gt; A where A: Generic<repr></repr></p>

<p>/// Given an A, returns its generic Representation
pub fn into_generic&lt;A, Repr&gt;(a: A) -&gt; Repr where A: Generic<repr></repr></p>

<p>/// Converts one type into another assuming they have the same generic Representation
pub fn convert_from&lt;A, B, Repr&gt;(a: A) -&gt; B
  where
    A: Generic<repr>,
    B: Generic<repr>
```</repr></repr></p>

<p>Most of the magic resides in how the custom derive of Generic, made possible by the 1.15 release of Rust, is implemented. If you want to find out more, take a look at the <code>derives</code> directory of Frunk <a href="https://github.com/lloydmeta/frunk/tree/master/derives/src">on Github</a>. In regards to the end-result though, the following:</p>

<p><code>rust
#[derive(Generic)]
struct Person&lt;'a&gt; {
    first_name: &amp;'a str,
    last_name: &amp;'a str,
    age: usize,
}
</code></p>

<p>Gets expanded at compile-time to something resembling:</p>

<p>```rust
impl&lt;’a&gt; Generic&lt;Hlist!(&amp;’a str, &amp;’a str, usize)&gt; for Person&lt;’a&gt; {</p>

<pre><code>fn into(self) -&gt; Hlist!(&amp;'a str, &amp;'a str, usize) {
    let Person { first_name, last_name, age } = self;
    hlist! [ first_name, last_name, age ]
}

fn from(r: Hlist!(&amp;'a str, &amp;'a str, usize)) -&gt; Self {
    let hlist_pat! [ first_name, last_name, age ] = r;
    Person { first_name: first_name, last_name: last_name, age: age }
} } ```
</code></pre>

<p>To be clear, the actual expanded coded is much gnarlier because we use fully qualified names for the sake of hygiene and I’ve sugared some things up with their macro-powered equivalents to cut down on noise (namely the HList type signature, pattern matching, and construction).</p>

<p>Someone on Twitter raised the point that if you had mixed up the ordering of the fields in your struct declaration (e.g. last name and first name are swapped between structs), then <code>Generic</code> would cause silent errors at runtime because the Structs’ shape would be the same, and that implementing <code>From</code> was more typesafe. With all due respect to that individual, the same could happen even if you hand-wrote your <code>From</code> implementation and got your field assignments crossed. In the worst case; you’ve now got fields that are not ordered correctly, your <code>From</code> is wrong, and you’ve got more boilerplate to maintain.</p>

<p>Really, the only way to truly prevent this kind of fat-fingering error is to have wrapper types (like <code>struct FirstName(String)</code>, etc) for all your fields, in which case <code>Generic</code> conversion would be foolproof (if you got your field declaration orders wrong, you’d get a compile-time error). Ultimately, how typesafe you want to be is a choice you will need to make while weighing the risk of fat-fingering against the burden of maintaining more code.</p>

<p>I hope you’re now convinced that there is no dirty casting / unsafe stuff going on, so you can rest easy knowing your code is still as type-safe as it would have been if you had gone with something like <code>From</code> instead.</p>

<h2 id="conclusion">Conclusion</h2>

<p>There are probably many other ways that <code>Generic</code> can be used to make code nicer (more reusable, DRYer, less noisy), so go ahead and see what you can cook up. As always, please don’t hesitate to get in touch via comments, on Github or on Gitter with suggestions, issues, questions, or PRs.</p>

<h2 id="links">Links</h2>

<ol>
  <li><a href="https://github.com/lloydmeta/frunk">Frunk on Github</a></li>
  <li><a href="https://crates.io/crates/frunk">Frunk on Crates.io</a></li>
</ol>

<h2 id="credit">Credit</h2>

<ol>
  <li><a href="https://github.com/milessabin/shapeless">Shapeless</a></li>
</ol>
]]></content>
  </entry>
  
</feed>
