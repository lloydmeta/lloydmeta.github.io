<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: For | BeachApe.]]></title>
  <link href="https://beachape.com/blog/categories/for/atom.xml" rel="self"/>
  <link href="https://beachape.com/"/>
  <updated>2016-03-10T12:12:36+09:00</updated>
  <id>https://beachape.com/</id>
  <author>
    <name><![CDATA[Lloyd]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Scala: Processing Option-wrapped Collections]]></title>
    <link href="https://beachape.com/blog/2013/06/20/scala-processing-option-wrapped-collections/"/>
    <updated>2013-06-20T11:14:00+09:00</updated>
    <id>https://beachape.com/blog/2013/06/20/scala-processing-option-wrapped-collections</id>
    <content type="html"><![CDATA[<p>In Scala, there are a lot of cool things - too many to list. Among them is something borrowed from Haskell; the <strong>Maybe</strong>, spelt <a href="http://www.scala-lang.org/api/current/index.html#scala.Option"><em>Option</em> in Scala</a>, which itself is based on the concept of computing via <a href="http://en.wikibooks.org/wiki/Haskell/Understanding_monads">monads</a>.</p>

<p>The reason why <code>Option</code> is awesome is that, if used properly, it largely frees the programmer from having to worry about various variables being in states of nothingness (Nil, null, etc). Without fail, every programmer has at one point or another written things like <code>thing.nil? ? do_nothing : do_something</code> .... all over the place. The point (in my mind, at least) of <code>Option</code> is to free us from having to do this in as many places as possible.</p>

<p>Many libraries in Scala, such as <a href="https://github.com/debasishg/scala-redis">Scala-Redis</a> are made with the assumption that the programmer knows how to deal with <code>Option</code> and return results wrapped in either <code>Some[List[T]]</code> or <code>None</code>.  That said, how to work with these types of results is not exactly straight forward for someone coming from other languages that don't have such constructs, so I've written down some of my thoughts.</p>

<!-- more -->


<p>As an example, let's try tackling the issue of how to use a result like the one that comes from <a href="https://github.com/debasishg/scala-redis">Scala-Redis</a>: <code>Some[List[T]]</code>.</p>

<p>To keep things simple, assume we have a <code>val maybeList = Some(List(1,2,3))</code> and we want to increment each member of the list inside the <code>Option</code>, and want to return another<code>Option</code> with the incremented list inside. While we could potentially do pattern matching to check if the <code>Option</code> is a <code>None</code>, we would prefer to take advantage of the patterns afforded to us by the fact that we're dealing with an <code>Option</code>. This means using <code>map</code>, <code>flatMap</code> and <code>for</code>.</p>

<p>Based on what <a href="http://www.scala-lang.org/api/current/index.html#scala.Option">official Scala documentation on Options</a> tells us, we have</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Scala option-wrapped collections (processing_option_wrapped_collections.scala)</span> <a href='/downloads/code/scala/processing_option_wrapped_collections.scala'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">incrementMaybeList</span><span class="o">(</span><span class="n">maybeList</span><span class="k">:</span> <span class="kt">Option</span><span class="o">[</span><span class="kt">List</span><span class="o">[</span><span class="kt">Int</span><span class="o">]],</span> <span class="n">increment</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="mi">1</span><span class="o">)</span><span class="k">:</span> <span class="kt">Option</span><span class="o">[</span><span class="kt">List</span><span class="o">[</span><span class="kt">Int</span><span class="o">]]</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">maybeList</span><span class="o">.</span><span class="n">map</span><span class="o">{</span><span class="n">list</span> <span class="k">=&gt;</span>
</span><span class='line'>    <span class="n">list</span><span class="o">.</span><span class="n">map</span><span class="o">(</span><span class="k">_</span> <span class="o">+</span> <span class="n">increment</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="n">incrementMaybeListFor</span><span class="o">(</span><span class="n">maybeList</span><span class="k">:</span> <span class="kt">Option</span><span class="o">[</span><span class="kt">List</span><span class="o">[</span><span class="kt">Int</span><span class="o">]],</span> <span class="n">increment</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="mi">1</span><span class="o">)</span><span class="k">:</span> <span class="kt">Option</span><span class="o">[</span><span class="kt">List</span><span class="o">[</span><span class="kt">Int</span><span class="o">]]</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">for</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">list</span> <span class="k">&lt;-</span> <span class="n">maybeList</span>
</span><span class='line'>  <span class="o">}</span> <span class="k">yield</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">list</span> <span class="n">map</span> <span class="o">(</span><span class="k">_</span> <span class="o">+</span> <span class="mi">1</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>There are two versions that we can choose from; one using <code>map</code> and another using <code>for</code>. In essense, they are the same, because <a href="http://tataryn.net/2011/10/whats-in-a-scala-for-comprehension/">for-comprehensions boil down to appropriate <code>map</code> and <code>flatMap</code> methods</a> anyway. This also means that sometimes you may get funky errors with type mismatch errors, for which a good rule of thumb is to remember that <a href="http://stackoverflow.com/questions/4719592/type-mismatch-on-scala-for-comprehension">for comprehensions will try to return the type of the collection of the first generator</a></p>

<p>Using the code above, we can do:</p>

<p>```scala
val maybeList = Some(List(1,2,3))
val incrementedMaybeList = incrementMaybeList(maybeList)
// => incrementedMaybeList: Option[List[Int]] = Some(List(2, 3, 4))</p>

<p>val maybeListNone = None
val incrementedMaybeList = incrementMaybeList(maybeListNone)
// => incrementedMaybeList: Option[List[Int]] = None
```</p>

<p>The fact that calling <code>incrementMaybeList</code> with <code>maybeList</code> worked should not be surprising, but notice how <code>maybeListNone</code> didn't cause the function to throw up. This is because calling methods like <code>map</code> or using for-comprehnsion on <code>Option</code>s that are <code>None</code> immediately return None instead of proceeding to run internal logic. No need to write if/else guards !</p>

<p>By building and using functions like <code>incrementMaybeList</code>, where an <code>Option</code> is processed and an <code>Option</code> is returned throughout the code, one can stop worrying about Nothingness (for the most part), because they can be chained together.</p>

<p><code>scala
incrementMaybeList(incrementMaybeList(None))
// =&gt; Option[List[Int]] = None
</code></p>

<p>When the time comes to actually do something with those <code>Option</code>-wrapped results without returning another value, once again, its time to break out for-comprehensions.</p>

<p>```scala
// Unimaginatively print the incremented results</p>

<p>for{
  list &lt;- incrementList(Some(List(1,2,3)))
  item &lt;- list
} println(item)</p>

<p>for{
  list &lt;- incrementMaybeList(incrementMaybeList(None))
  item &lt;- list
} println(item)
```</p>

<h2>Conclusion</h2>

<p><code>Option</code>s  free the programmer from worrying about Nothingness and thus from writing tons of boilerplate nothingness checks in our code. This blog post talks about a simplish, but applicable example on how to deal with <code>Option</code> in Scala.</p>
]]></content>
  </entry>
  
</feed>
