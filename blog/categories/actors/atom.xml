<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Actors | BeachApe.]]></title>
  <link href="https://beachape.com/blog/categories/actors/atom.xml" rel="self"/>
  <link href="https://beachape.com/"/>
  <updated>2015-07-26T13:39:02+09:00</updated>
  <id>https://beachape.com/</id>
  <author>
    <name><![CDATA[Lloyd]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Schwatcher v0.1.3 Released]]></title>
    <link href="https://beachape.com/blog/2014/05/02/schwatcher-v0-dot-1-3-released/"/>
    <updated>2014-05-02T00:10:00+09:00</updated>
    <id>https://beachape.com/blog/2014/05/02/schwatcher-v0-dot-1-3-released</id>
    <content type="html"><![CDATA[<p>Version 0.1.3 of Schwatcher has been released.</p>

<p>This version brings a new Observable interface that exposes a "stream" (or channel) of <code>EventAtPath</code>s that can be composed. Using this interface, you no longer need to register callbacks - you simply register paths and get notifications for events on them either by subscribing to the Observable or by composing.</p>

<p>For more information on how to use Observables (especially how they compose in awesome ways), checkout the <a href="https://rx.codeplex.com/">Rx homepage</a></p>

<p>Example usage:</p>

<p>```scala
import com.beachape.filemanagement.RxMonitor
import java.io.{FileWriter, BufferedWriter}</p>

<p>import java.nio.file.Paths
import java.nio.file.StandardWatchEventKinds._</p>

<p>val monitor = RxMonitor()
val observable = monitor.observable</p>

<p>val subscription = observable.subscribe(
  onNext = { p => println(s"Something was modified in a file mufufu: $p")},
  onError = { t => println(t)},
  onCompleted = { () => println("Monitor has been shut down") }
)</p>

<p>val desktopFile = Paths get "/Users/lloyd/Desktop/test"</p>

<p>monitor.registerPath(ENTRY_MODIFY, desktopFile)</p>

<p>Thread.sleep(100)</p>

<p>//modify a monitored file
val writer = new BufferedWriter(new FileWriter(desktopFile.toFile))
writer.write("Theres text in here wee!!")
writer.close</p>

<p>// #=> Something was modified in a file mufufu: /Users/lloyd/Desktop/test</p>

<p>// stop monitoring
monitor.stop()</p>

<p>// #=> Monitor has been shut down
```</p>

<p>Relevant links:
- <a href="https://github.com/lloydmeta/schwatcher">Github page with how to install and example usage</a>
- <a href="https://github.com/lloydmeta/schwatcher/releases/tag/v0.1.3">Release page</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Schwatcher v0.1.0 Released]]></title>
    <link href="https://beachape.com/blog/2014/03/06/schwatcher-v0-dot-1-0-released/"/>
    <updated>2014-03-06T21:45:00+09:00</updated>
    <id>https://beachape.com/blog/2014/03/06/schwatcher-v0-dot-1-0-released</id>
    <content type="html"><![CDATA[<p>Version 0.1.0 of Schwatcher has been released.</p>

<p>Changes:</p>

<ul>
<li>Thanks to <a href="https://github.com/lloydmeta/schwatcher/pull/31">this pull request</a> from <a href="https://github.com/georgeOsdDev">georgeOsdDev</a>, modifiers can be used when registering callbacks</li>
<li>Upgrade to 2.3.0 of Akka</li>
</ul>


<p>Relevent info:</p>

<ul>
<li><a href="https://github.com/lloydmeta/schwatcher">Schwatcher Github repo</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Schwatcher v0.0.7 Released]]></title>
    <link href="https://beachape.com/blog/2013/12/04/schwatcher-v0-dot-0-7-released/"/>
    <updated>2013-12-04T21:18:00+09:00</updated>
    <id>https://beachape.com/blog/2013/12/04/schwatcher-v0-dot-0-7-released</id>
    <content type="html"><![CDATA[<p>Version 0.0.7 of Schwatcher has been released.</p>

<p>Changes:</p>

<ul>
<li>No longer has external logging library dependencies. Thanks <a href="https://github.com/crdueck">crdueck</a> for the suggestion.</li>
<li>No longer uses any mutable members for extra thread-safety</li>
</ul>


<p>Relevent info:</p>

<ul>
<li><a href="https://github.com/lloydmeta/schwatcher">Schwatcher Github repo</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Schwatcher v0.0.4 Released]]></title>
    <link href="https://beachape.com/blog/2013/10/21/schwatcher-v0-dot-0-4-released/"/>
    <updated>2013-10-21T09:08:00+09:00</updated>
    <id>https://beachape.com/blog/2013/10/21/schwatcher-v0-dot-0-4-released</id>
    <content type="html"><![CDATA[<p>Version 0.0.4 of Schwatcher has been released.</p>

<p>Changes:</p>

<ul>
<li>No longer uses Akka Agent to hold CallbackRegistry (thanks crdueck). This should result in a small performance increase because of more 'direct' memory access inside MonitorActor.</li>
<li>Refactored testing for better coverage and maintainability</li>
<li>Scala 2.10.3 support in testing</li>
</ul>


<p>Relevent info:</p>

<ul>
<li><a href="https://github.com/lloydmeta/schwatcher">Schwatcher Github repo</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Schwatcher v0.0.3 Released]]></title>
    <link href="https://beachape.com/blog/2013/09/19/schwatcher-v0-dot-0-3-released/"/>
    <updated>2013-09-19T09:16:00+09:00</updated>
    <id>https://beachape.com/blog/2013/09/19/schwatcher-v0-dot-0-3-released</id>
    <content type="html"><![CDATA[<p>Version 0.0.3 of Schwatcher upgrades the Akka library used by the plugin to 2.2.1 so that devs already using Akka 2.2.x are able to use this library.</p>

<p>Those upgrading to 0.0.3 of Schwatcher who aren't already using Akka 2.2.x should read the <a href="http://doc.akka.io/docs/akka/current/project/migration-guide-2.1.x-2.2.x.html">2.1.x to 2.2.x Akka migration guide</a> to make sure their projects don't break.</p>

<p>Relevent info:</p>

<ul>
<li><a href="https://github.com/lloydmeta/schwatcher">Schwatcher Github repo</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
