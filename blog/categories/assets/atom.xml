<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Assets | BeachApe.]]></title>
  <link href="https://beachape.com/blog/categories/assets/atom.xml" rel="self"/>
  <link href="https://beachape.com/"/>
  <updated>2015-07-26T13:44:50+09:00</updated>
  <id>https://beachape.com/</id>
  <author>
    <name><![CDATA[Lloyd]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Lossy Optimisation for PNG Files]]></title>
    <link href="https://beachape.com/blog/2013/04/06/lossy-optimisation-for-png-files/"/>
    <updated>2013-04-06T16:04:00+09:00</updated>
    <id>https://beachape.com/blog/2013/04/06/lossy-optimisation-for-png-files</id>
    <content type="html"><![CDATA[<p>These days, theres a lot of focus on reducing the load times on your website to make the experience smoother for your users. One way is to make creative use of CSS to style your websites instead of using images. That said, there are times when you have to use images and even the best front-end guys need to reach for images depending on what kind of design they were tasked with implementing.</p>

<p>If you're using PNGs, likely you're already choosing to save them in a way that optimises them for the internets, but even then there are savings to be had by employing the use of <em>lossy</em> PNG optimisation.</p>

<!-- more -->


<p>On the project that I'm on at the moment, the front-end guys (for better or worse) went with making heavy, heavy use of images, almost all of them PNG files. I decided to try throwing them into two optimizers <a href="http://pngnq.sourceforge.net/">PNGNQ</a>, and <a href="http://pngquant.org/">pngquant</a> to see what I could get out of them.</p>

<p>Before we begin, I should be clear that this post focuses on OSX users and assumes you have <a href="http://mxcl.github.io/homebrew/">Homebrew</a> already installed and updated (<code>brew update</code>).</p>

<h2>PNGNQ</h2>

<p>First, install the tool by running <code>brew install pngnq</code></p>

<p>Next, navigate to your project folder, back it up (via some kind of version control like Git) and run:</p>

<p><code>find . -type f -name '*.png' -print0 | xargs -0 -P4 pngnq -f -e '.png'</code></p>

<p>The above command will recursively look through your directory for PNG files and send them to pngnq for optimisation. The above command also has <code>-f -e '.png'</code> which means it will override the current PNG files once they are optimised.</p>

<p>After running the above, I noticed around 50% savings in file size across all the PNG files. Quality was around the same, minus for some unsightly dithering on one of our icons (for the record, I also played around with <a href="http://manpages.ubuntu.com/manpages/precise/man1/pngnq.1.html">various pngnq options</a>, but it didn't make much difference in terms of alleviating said artifacts)</p>

<h2>PNGquant</h2>

<p>I decided then to give <a href="http://pngquant.org/">pngquant</a> a try to see if I could get better results.</p>

<p>I ran <code>brew install pngquant</code></p>

<p>Then</p>

<p><code>find . -name '*.png' -print0 | xargs -0 -P4 pngquant --ext .png --force</code></p>

<p>I noticed pretty much the same file size savings, but without the unsignhtly artifacts !</p>

<h2>Conclusion</h2>

<p>In my case, PNGquant gave me better results than PNGNQ, but your mileage may vary.</p>
]]></content>
  </entry>
  
</feed>
