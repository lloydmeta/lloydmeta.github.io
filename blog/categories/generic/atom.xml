<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Generic | BeachApe.]]></title>
  <link href="https://beachape.com/blog/categories/generic/atom.xml" rel="self"/>
  <link href="https://beachape.com/"/>
  <updated>2017-02-04T18:12:03+09:00</updated>
  <id>https://beachape.com/</id>
  <author>
    <name><![CDATA[Lloyd]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Rust Generic (Not Generics)]]></title>
    <link href="https://beachape.com/blog/2017/02/04/rust-generic-not-generics/"/>
    <updated>2017-02-04T02:14:00+09:00</updated>
    <id>https://beachape.com/blog/2017/02/04/rust-generic-not-generics</id>
    <content type="html"><![CDATA[<p>Have you ever wanted to convert <code>Hlist</code>s into Structs or to reuse logic across different types that are structurally identical or very similar (e.g. same data across different domains)? <code>Generic</code> can help you do that with minimal boilerplate.</p>

<p><img class="center" src="/images/generic_example.png" width="350" height="350" title="'From Hlist to Struct, no boilerplate'" ></p>

<!-- more -->


<p><code>Generic</code> is a way of representing a type in ... a generic way. By coding around <code>Generic</code>, you can to write functions that abstract over types and arity, but still have the ability to recover your original type afterwards. This can be a fairly powerful thing.</p>

<p>Thanks to the new Macros 1.1 infrastructure added in Rust 1.1.5, Frunk comes out of the box with a custom <code>Generic</code> derivation so that boilerplate is kept to a minimum. Without further ado, let's dive in to see what Generic can do for us.</p>

<h2>Add Frunk to your project</h2>

<p><a href="https://crates.io/crates/frunk">Frunk</a> is published to <a href="crates.io/crates/frust">Crates.io</a>, so to begin, add the crate to your list of dependencies:</p>

<p><code>rust
[dependencies]
frunk = "0.1.8"
</code></p>

<h2>Examples</h2>

<h3>HList â‡„ Struct</h3>

<p>For anyone using <code>Validated</code> (introduced in <a href="/blog/2016/10/24/accumulating-results-in-rust-with-validated/">a previous post</a>), <code>Generic</code> makes mapping from an <code>HList</code> to your final type easier than ever.</p>

<p>```rust
extern crate frunk;</p>

<h1>[macro_use] // for the hlist macro</h1>

<p>extern crate frunk_core;
use frunk::*; // for the Generic trait and HList</p>

<h1>[derive(Generic, Debug, PartialEq)]</h1>

<p>struct Person&lt;'a> {</p>

<pre><code>first_name: &amp;'a str,
last_name: &amp;'a str,
age: usize,
</code></pre>

<p>}</p>

<p>let h = hlist!("Joe", "Blow", 30);
let p: Person = from_generic(h);
assert_eq!(p,</p>

<pre><code>       Person {
           first_name: "Joe",
           last_name: "Blow",
           age: 30,
       });
</code></pre>

<p>```</p>

<p>This also works the other way too; just pass a struct to <code>to_generic</code> and get its generic representation.</p>

<h3>Converting between Structs</h3>

<p>Sometimes you might have 2 or more types that are structurally the same (e.g. different domains but the same data) and you'd like to convert between them. An example of this might be when you have a model for deserialising from an external API and another one for internal application business logic, and yet another for persistence.</p>

<p>Generic comes with a handy <code>convert_from</code> method that helps here:</p>

<p>```rust
// Assume we have all the imports needed</p>

<h1>[derive(Generic)]</h1>

<p>struct ApiPerson&lt;'a> {</p>

<pre><code>FirstName: &amp;'a str,
LastName: &amp;'a str,
Age: usize,
</code></pre>

<p>}</p>

<h1>[derive(Generic)]</h1>

<p>struct DomainPerson&lt;'a> {</p>

<pre><code>first_name: &amp;'a str,
last_name: &amp;'a str,
age: usize,
</code></pre>

<p>}</p>

<p>let a_person = ApiPersion {</p>

<pre><code>               first_name: "Joe",
               last_name: "Blow",
               age: 30,
</code></pre>

<p>};
let d_person: DomainPersion = convert_from(a_person); // done
```</p>

<h2>How it works (what is going on ? is it safe ?)</h2>

<p>At a glance, <code>Generic</code> might look magical and dangerous, but really it is no more mysterious than the <code>From</code> trait in the standard lib; the only difference (for now) is that every <code>Generic</code> instance is bidirectional (can turn an <code>A</code> into a <code>Repr</code> and a <code>Repr</code> into an <code>A</code>). If you don't believe me, just look at the type signatures.</p>

<p>```rust
pub trait Generic<Repr> {</p>

<pre><code>/// Go from something to Repr
fn into(self) -&gt; Repr;

/// Go from Repr to something
fn from(r: Repr) -&gt; Self;
</code></pre>

<p>}</p>

<p>/// Given a generic Representation of an A, returns A
pub fn from_generic&lt;A, Repr>(gen: Repr) -> A where A: Generic<Repr></p>

<p>/// Given an A, returns its generic Representation
pub fn into_generic&lt;A, Repr>(a: A) -> Repr where A: Generic<Repr></p>

<p>/// Converts one type into another assuming they have the same generic Representation
pub fn convert_from&lt;A, B, Repr>(a: A) -> B
  where</p>

<pre><code>A: Generic&lt;Repr&gt;,
B: Generic&lt;Repr&gt;
</code></pre>

<p>```</p>

<p>Most of the magic resides in how the custom derive of Generic, made possible by the 1.15 release of Rust, is implemented. If you want to find out more, take a look at the <code>derives</code> directory of Frunk <a href="https://github.com/lloydmeta/frunk/tree/master/derives/src">on Github</a>. In regards to the end-result though, the following:</p>

<p>```rust</p>

<h1>[derive(Generic)]</h1>

<p>struct Person&lt;'a> {</p>

<pre><code>first_name: &amp;'a str,
last_name: &amp;'a str,
age: usize,
</code></pre>

<p>}
```</p>

<p>Gets expanded at compile-time to something resembling:</p>

<p>```rust
impl&lt;'a> Generic&lt;Hlist!(&amp;'a str, &amp;'a str, usize)> for Person&lt;'a> {</p>

<pre><code>fn into(self) -&gt; Hlist!(&amp;'a str, &amp;'a str, usize) {
    let Person { first_name, last_name, age } = self;
    hlist! [ first_name, last_name, age ]
}

fn from(r: Hlist!(&amp;'a str, &amp;'a str, usize)) -&gt; Self {
    let hlist_pat! [ first_name, last_name, age ] = r;
    Person { first_name: first_name, last_name: last_name, age: age }
}
</code></pre>

<p>}
```</p>

<p>To be clear, the actual expanded coded is much gnarlier because we use fully qualified names for the sake of hygiene and I've sugared some things up with their macro-powered equivalents to cut down on noise (namely the HList type signature, pattern matching, and construction).</p>

<p>I hope you're now convinced that there is no dirty casting / unsafe stuff going on, so you can rest easy knowing your code is still as type-safe as it would have been if you had gone with something like <code>From</code> instead.</p>

<h2>Conclusion</h2>

<p>There are probably many other ways that <code>Generic</code> can be used to make code nicer (more reusable, DRYer, less noisy), so go ahead and see what you can cook up. As always, please don't hesitate to get in touch via comments, on Github or on Gitter with suggestions, issues, questions, or PRs.</p>

<h2>Links</h2>

<ol>
<li><a href="https://github.com/lloydmeta/frunk">Frunk on Github</a></li>
<li><a href="https://crates.io/crates/frunk">Frunk on Crates.io</a></li>
</ol>


<h2>Credit</h2>

<ol>
<li><a href="https://github.com/milessabin/shapeless">Shapeless</a></li>
</ol>

]]></content>
  </entry>
  
</feed>
