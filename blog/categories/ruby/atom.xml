<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | BeachApe.]]></title>
  <link href="https://beachape.com/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="https://beachape.com/"/>
  <updated>2017-04-12T12:48:04+09:00</updated>
  <id>https://beachape.com/</id>
  <author>
    <name><![CDATA[Lloyd]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ruby 2.0.0 Enumerable Lazy Benchmark]]></title>
    <link href="https://beachape.com/blog/2013/06/12/ruby-2-dot-0-0-enumerable-lazy-benchmark/"/>
    <updated>2013-06-12T10:30:00+09:00</updated>
    <id>https://beachape.com/blog/2013/06/12/ruby-2-dot-0-0-enumerable-lazy-benchmark</id>
    <content type="html"><![CDATA[<p>Ruby 2.0.0 was released a few months back and I finally had some time to look into some of the features and changes that came with it. Lazy collections has always been a cool concept for me and so I decided to do a few benchmarks.</p>

<!-- more -->

<p>That said, a quick Google search brought me to this <a href="http://dev.af83.com/2012/11/22/ruby-2-0-enumerator-lazy.html">great page</a> where someone had already written a usable benchmark back in 2012 when the 2.0.0 preview release came out:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Benchmark (ruby_2_0_0_enum_lazy_bench.rb)</span> <a href='/downloads/code/ruby/ruby_2_0_0_enum_lazy_bench.rb'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span></span><span class="nb">require</span> <span class="s1">&#39;benchmark&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="o">[</span><span class="mi">10000</span><span class="p">,</span> <span class="mi">100000</span><span class="p">,</span> <span class="mi">1000000</span><span class="p">,</span> <span class="mi">10000000</span><span class="o">].</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">size</span><span class="o">|</span>
</span><span class='line'>  <span class="no">Benchmark</span><span class="o">.</span><span class="n">bm</span><span class="p">(</span><span class="mi">15</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">b</span><span class="o">|</span>
</span><span class='line'>    <span class="n">b</span><span class="o">.</span><span class="n">report</span><span class="p">(</span><span class="s2">&quot;chainable </span><span class="si">#{</span><span class="n">size</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">hashes</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1</span><span class="o">..</span><span class="n">size</span><span class="p">)</span><span class="o">.</span><span class="n">select</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:even?</span><span class="p">)</span><span class="o">.</span><span class="n">map</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:hash</span><span class="p">)</span><span class="o">.</span><span class="n">map</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:to_s</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="no">Benchmark</span><span class="o">.</span><span class="n">bm</span><span class="p">(</span><span class="mi">15</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">b</span><span class="o">|</span>
</span><span class='line'>    <span class="n">b</span><span class="o">.</span><span class="n">report</span><span class="p">(</span><span class="s2">&quot;one iteration </span><span class="si">#{</span><span class="n">size</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">hashes</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1</span><span class="o">..</span><span class="n">size</span><span class="p">)</span><span class="o">.</span><span class="n">inject</span><span class="p">(</span><span class="o">[]</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">accumulator</span><span class="p">,</span> <span class="n">number</span><span class="o">|</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">number</span><span class="o">.</span><span class="n">even?</span>
</span><span class='line'>          <span class="n">accumulator</span> <span class="o">&lt;&lt;</span> <span class="n">number</span><span class="o">.</span><span class="n">hash</span><span class="o">.</span><span class="n">to_s</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>          <span class="n">accumulator</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="no">Benchmark</span><span class="o">.</span><span class="n">bm</span><span class="p">(</span><span class="mi">15</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">b</span><span class="o">|</span>
</span><span class='line'>    <span class="n">b</span><span class="o">.</span><span class="n">report</span><span class="p">(</span><span class="s2">&quot;chainable lazy </span><span class="si">#{</span><span class="n">size</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">hashes</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1</span><span class="o">..</span><span class="n">size</span><span class="p">)</span><span class="o">.</span><span class="n">lazy</span><span class="o">.</span><span class="n">select</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:even?</span><span class="p">)</span><span class="o">.</span><span class="n">map</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:hash</span><span class="p">)</span><span class="o">.</span><span class="n">map</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:to_s</span><span class="p">)</span><span class="o">.</span><span class="n">to_a</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>And then the results, with Ruby 2.0.0p0</p>

<p><code>
                      user     system      total        real
chainable 10000   0.000000   0.000000   0.000000 (  0.002659)
                      user     system      total        real
one iteration 10000  0.000000   0.000000   0.000000 (  0.002732)
                      user     system      total        real
chainable lazy 10000  0.010000   0.000000   0.010000 (  0.005103)
                      user     system      total        real
chainable 100000  0.030000   0.000000   0.030000 (  0.031249)
                      user     system      total        real
one iteration 100000  0.020000   0.000000   0.020000 (  0.027257)
                      user     system      total        real
chainable lazy 100000  0.060000   0.000000   0.060000 (  0.053770)
                      user     system      total        real
chainable 1000000  0.260000   0.010000   0.270000 (  0.270027)
                      user     system      total        real
one iteration 1000000  0.280000   0.010000   0.290000 (  0.283680)
                      user     system      total        real
chainable lazy 1000000  0.560000   0.010000   0.570000 (  0.566137)
                      user     system      total        real
chainable 10000000  2.830000   0.120000   2.950000 (  2.956604)
                      user     system      total        real
one iteration 10000000  2.910000   0.130000   3.040000 (  3.095763)
                      user     system      total        real
chainable lazy 10000000  5.580000   0.140000   5.720000 (  6.079247)
</code></p>

<h2 id="conclusion">Conclusion</h2>
<p>Turns out that performance of Lazy relative to non-lazy variants hasn’t changed enough for it to be worthwhile to use for anything other than outrageously huge colletions (perhaps many many times larger than 10000000) from a performance point of view. That said, depending on the operation you’re performing, using Lazy might be useful if you want to play within memory constraints.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Simple String Pattern Checking in Ruby: Benchmark]]></title>
    <link href="https://beachape.com/blog/2013/04/06/simple-string-pattern-checking-in-ruby-benchmark/"/>
    <updated>2013-04-06T16:25:00+09:00</updated>
    <id>https://beachape.com/blog/2013/04/06/simple-string-pattern-checking-in-ruby-benchmark</id>
    <content type="html"><![CDATA[<p>Often times, as programmers, we need to check to see if a substring exists in a bigger string. Many programmers will instinctively reach out for Regex matching, but I often wondered if this was really the best way to do things, particularly in Ruby.</p>

<p>One day, in a Ruby-focused Skype group chat, a friend of mine asked the other members to give him a snippet of code that would allow him to take a hostname, check if the substring ‘qa’ was in it and if it did, return ‘qa’, else ‘prod’ (for production). My knee-jerk reaction was the same as the other members: use Regex. But I wondered if it would be better to use compiled Regex, or interpreted Regex, or perhaps maybe even the built in String method <a href="http://www.ruby-doc.org/core-1.9.3/String.html#method-i-include-3F">include?</a>. So I decided to do some benchmarking.</p>

<!-- more -->

<p>Ruby has a great module built in that makes benchmarking very simple: <a href="http://www.ruby-doc.org/stdlib-1.9.3/libdoc/benchmark/rdoc/Benchmark.html">Benchmark</a>. A lot of the time I use it to check if something is performant or not, even on the Rails level! In this session, I make use of a very small subset of this module’s functionality, but if you’re interested, please be sure to check out the above link to see other options.</p>

<p>Anyways, my goal was to benchmark a simple string pattern check using compiled Regex, interpreted Regex, and the String #include? method. As a result, I wrote the following ruby script:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Code for benchmarking (simple_string_matching_benchmark.rb)</span> <a href='/downloads/code/ruby/simple_string_matching_benchmark.rb'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span></span><span class="nb">require</span> <span class="s2">&quot;benchmark&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">regex_compiled</span> <span class="o">=</span> <span class="no">Regexp</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;qa&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">regex_compiled</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="s2">&quot;qa&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="no">Benchmark</span><span class="o">.</span><span class="n">bmbm</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span>
</span><span class='line'>  <span class="n">x</span><span class="o">.</span><span class="n">report</span><span class="p">(</span><span class="s2">&quot;1000000 times positive regex&quot;</span><span class="p">){</span><span class="mi">1000000</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span>
</span><span class='line'>    <span class="s2">&quot;someserverqa&quot;</span> <span class="o">=~</span> <span class="sr">/qa/</span> <span class="p">?</span> <span class="s2">&quot;qa&quot;</span> <span class="p">:</span> <span class="s2">&quot;prod&quot;</span>
</span><span class='line'>  <span class="k">end</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">x</span><span class="o">.</span><span class="n">report</span><span class="p">(</span><span class="s2">&quot;1000000 times negative regex&quot;</span><span class="p">){</span><span class="mi">1000000</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span>
</span><span class='line'>    <span class="s2">&quot;someserverprod&quot;</span> <span class="o">=~</span> <span class="sr">/qa/</span> <span class="p">?</span> <span class="s2">&quot;qa&quot;</span> <span class="p">:</span> <span class="s2">&quot;prod&quot;</span>
</span><span class='line'>  <span class="k">end</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">x</span><span class="o">.</span><span class="n">report</span><span class="p">(</span><span class="s2">&quot;1000000 times positive regex compiled&quot;</span><span class="p">){</span><span class="mi">1000000</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">regex_compiled</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="s2">&quot;someserverqa&quot;</span><span class="p">)</span> <span class="p">?</span> <span class="s2">&quot;qa&quot;</span> <span class="p">:</span> <span class="s2">&quot;prod&quot;</span>
</span><span class='line'>  <span class="k">end</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">x</span><span class="o">.</span><span class="n">report</span><span class="p">(</span><span class="s2">&quot;1000000 times negative regex compiled&quot;</span><span class="p">){</span><span class="mi">1000000</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">regex_compiled</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="s2">&quot;someserverprod&quot;</span><span class="p">)</span> <span class="p">?</span> <span class="s2">&quot;qa&quot;</span> <span class="p">:</span> <span class="s2">&quot;prod&quot;</span>
</span><span class='line'>  <span class="k">end</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">x</span><span class="o">.</span><span class="n">report</span><span class="p">(</span><span class="s2">&quot;1000000 times positive #include?&quot;</span><span class="p">){</span><span class="mi">1000000</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span>
</span><span class='line'>    <span class="s2">&quot;someserverqa&quot;</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="s2">&quot;qa&quot;</span><span class="p">)</span> <span class="p">?</span> <span class="s2">&quot;qa&quot;</span> <span class="p">:</span> <span class="s2">&quot;prod&quot;</span>
</span><span class='line'>  <span class="k">end</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">x</span><span class="o">.</span><span class="n">report</span><span class="p">(</span><span class="s2">&quot;1000000 times negative #include?&quot;</span><span class="p">){</span><span class="mi">1000000</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span>
</span><span class='line'>    <span class="s2">&quot;someserverqa&quot;</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="s2">&quot;someserverprod&quot;</span><span class="p">)</span> <span class="p">?</span> <span class="s2">&quot;qa&quot;</span> <span class="p">:</span> <span class="s2">&quot;prod&quot;</span>
</span><span class='line'>  <span class="k">end</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Note the use of .bmbm, which tells the module that we want to perform a rehearsal run.</p>

<p>The results were as follows:</p>

<p>```
Rehearsal ————————————————————————-
1000000 times positive regex            0.400000   0.000000   0.400000 (  0.398280)
1000000 times negative regex            0.420000   0.000000   0.420000 (  0.424669)
1000000 times positive regex compiled   0.990000   0.020000   1.010000 (  1.005177)
1000000 times negative regex compiled   0.500000   0.000000   0.500000 (  0.496037)
1000000 times positive #include?        0.280000   0.000000   0.280000 (  0.277431)
1000000 times negative #include?        0.240000   0.000000   0.240000 (  0.248257)
—————————————————————- total: 2.850000sec</p>

<pre><code>                                        user     system      total        real 1000000 times positive regex            0.400000   0.000000   0.400000 (  0.408893) 1000000 times negative regex            0.450000   0.000000   0.450000 (  0.447820) 1000000 times positive regex compiled   1.010000   0.000000   1.010000 (  1.009081) 1000000 times negative regex compiled   0.500000   0.000000   0.500000 (  0.502232) 1000000 times positive #include?        0.280000   0.000000   0.280000 (  0.275711) 1000000 times negative #include?        0.250000   0.000000   0.250000 (  0.247974) ```
</code></pre>

<h2 id="conclusion">Conclusion</h2>
<p>Turned out in the case of simple string presence checking, #include? was faster than everything else by almost half. More surprising was the fact that Regex compiled was even slower than Regex interpreted.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Padrino With Resque-web UI]]></title>
    <link href="https://beachape.com/blog/2013/02/19/padrino-with-resque-web-ui/"/>
    <updated>2013-02-19T17:44:00+09:00</updated>
    <id>https://beachape.com/blog/2013/02/19/padrino-with-resque-web-ui</id>
    <content type="html"><![CDATA[<p>Finally got a chance to play around with Padrino last week to build a <a href="https://github.com/lloydmeta/push_to_devices">Push to Devices notification server</a>, but ran into a bit of an issue trying to get Resque-web / Resque server UI to show up.</p>

<p>Finally ran into <a href="http://d.hatena.ne.jp/hiro_nemu/20120809/1344476207">this great blog entry</a>. It’s written in Japanese so I decided to create a short version in English here in case anyone else runs into the same issue</p>

<p>If you already have the following:</p>

<p><code>ruby config.ru
# snip
run Rack::URLMap.new \
  "/"       =&gt; Padrino.application,
  "/resque" =&gt; Resque::Server.new
</code>
in your <code>config.ru</code> and yet don’t see anything when you hit /resque on your local environment, run your server with</p>

<p><code>$rackup -p 3000</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby Hash Traversal]]></title>
    <link href="https://beachape.com/blog/2013/01/18/walking-a-ruby-hash/"/>
    <updated>2013-01-18T23:52:00+09:00</updated>
    <id>https://beachape.com/blog/2013/01/18/walking-a-ruby-hash</id>
    <content type="html"><![CDATA[<p><em>TL;DR</em> If you’re using Ruby, want to perform operations on the values of a hash only at specific locations in the hash, check out <a href="https://rubygems.org/gems/hash_walker">hash_walker</a></p>

<p>A while back I worked at a Tokyo-based startup focused on building a crowd-sourced translation platform. The great thing about <a href="http://gengo.com/">Gengo</a> was that we (and they still do) offered a translation API that allowed clients to integrate and thus order huge amounts of translations, receive translated content back via callbacks and do whatever it is that clients do with translated materials.</p>

<p>On one of the projects I worked on for a potential client, as part of a trial project, I needed to process a huge amounts (ok, not huge, maybe around 2000 or so) JSON responses and grab the data, throw it over the Gengo API and once it was translated, re-insert the translated content into the JSON responses and send all the JSON responses in text files to the client.</p>

<!-- more -->

<p>Not too hard, but at the same time not entirely trivial because the client wanted to make sure that only specific pieces in the original JSON were translated. For example given the following JSON response:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Contrived JSON example (hash_walker_orig.json)</span> <a href='/downloads/code/json/hash_walker_orig.json'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span></span><span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;title&quot;</span><span class="p">:</span> <span class="s2">&quot;Hilarious article&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;subtitle&quot;</span><span class="p">:</span> <span class="s2">&quot;Something people might find funny&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;description&quot;</span><span class="p">:</span> <span class="s2">&quot;super funny stuff&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;system&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nt">&quot;categories&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>            <span class="s2">&quot;high ratings&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="s2">&quot;link bait&quot;</span>
</span><span class='line'>        <span class="p">],</span>
</span><span class='line'>        <span class="nt">&quot;description&quot;</span><span class="p">:</span> <span class="s2">&quot;really not that funny&quot;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nt">&quot;author&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;Some Body&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;body&quot;</span><span class="p">:</span> <span class="s2">&quot;Not too bad&quot;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nt">&quot;categories&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>        <span class="s2">&quot;Life&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;Happiness&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;Jokes&quot;</span>
</span><span class='line'>    <span class="p">],</span>
</span><span class='line'>    <span class="nt">&quot;content&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nt">&quot;categories&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>            <span class="s2">&quot;Life&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="s2">&quot;Happiness&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="s2">&quot;Jokes&quot;</span>
</span><span class='line'>        <span class="p">],</span>
</span><span class='line'>        <span class="nt">&quot;body&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>        <span class="s2">&quot;lots of jokes here&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;lots of jokes here again !&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;last of the jokes !&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="p">]</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The client wanted title, subtitle, description, content.categories, content.body translated, but <strong>NOT</strong>  system.categories, system.descriptions etc. So in other words, it wouldn’t be good enough to just traverse the JSON and look for specific keys, it had to be dependent on where the key was. To make things even more interesting, there would be cases where keys were inside objects that were inside arrays inside objects, inside arrays, etc.</p>

<p>Since I like using Ruby and in Ruby, the natural data structure that JSON maps to is the Hash, I decided to build an app that would allow me to define some sort of “template” if you will, for the purpose of traversing the JSON responses involved in this project.</p>

<p>I came up with the <a href="https://rubygems.org/gems/hash_walker">hash_walker gem</a>. Use it like you would any gem, require it, and you get a each_primitive_value_at method on all hash objects. For full details on how to use it, check out <a href="https://github.com/lloydmeta/hash_walker">the project’s Github page</a>; I’ll just be explaining the basics here.</p>

<p>Since a code example says a thousand words:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Code example for hash_walker (hash_walker_hash.rb)</span> <a href='/downloads/code/ruby/hash_walker_hash.rb'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span></span><span class="nb">require</span> <span class="s1">&#39;hash_walker&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">json_response</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;title&quot;</span><span class="o">=&gt;</span> <span class="s2">&quot;Hilarious article&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;subtitle&quot;</span><span class="o">=&gt;</span> <span class="s2">&quot;Something people might find funny&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;description&quot;</span><span class="o">=&gt;</span> <span class="s2">&quot;super funny stuff&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;system&quot;</span><span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>        <span class="s2">&quot;categories&quot;</span><span class="o">=&gt;</span> <span class="o">[</span>
</span><span class='line'>            <span class="s2">&quot;high ratings&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="s2">&quot;link bait&quot;</span>
</span><span class='line'>        <span class="o">]</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;description&quot;</span><span class="o">=&gt;</span> <span class="s2">&quot;really not that funny&quot;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="s2">&quot;author&quot;</span><span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>        <span class="s2">&quot;name&quot;</span><span class="o">=&gt;</span> <span class="s2">&quot;Some Body&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;body&quot;</span><span class="o">=&gt;</span> <span class="s2">&quot;Not too bad&quot;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="s2">&quot;categories&quot;</span><span class="o">=&gt;</span> <span class="o">[</span>
</span><span class='line'>        <span class="s2">&quot;Life&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;Happiness&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;Jokes&quot;</span>
</span><span class='line'>    <span class="o">]</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;content&quot;</span><span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>        <span class="s2">&quot;categories&quot;</span><span class="o">=&gt;</span> <span class="o">[</span>
</span><span class='line'>            <span class="s2">&quot;Life&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="s2">&quot;Happiness&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="s2">&quot;Jokes&quot;</span>
</span><span class='line'>        <span class="o">]</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;body&quot;</span><span class="o">=&gt;</span> <span class="o">[</span>
</span><span class='line'>            <span class="s2">&quot;lots of jokes here&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="s2">&quot;lots of jokes here again !&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="s2">&quot;last of the jokes !&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="o">]</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">keys_to_read</span> <span class="o">=</span> <span class="o">[</span>
</span><span class='line'>        <span class="s2">&quot;title&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;author&quot;</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="s2">&quot;name&quot;</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;categories&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;content&quot;</span> <span class="o">=&gt;</span> <span class="o">[</span>
</span><span class='line'>            <span class="s2">&quot;body&quot;</span>
</span><span class='line'>        <span class="o">]</span>
</span><span class='line'>    <span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">json_response</span><span class="o">.</span><span class="n">each_primitive_value_at</span><span class="p">(</span><span class="n">keys_to_read</span><span class="p">){</span><span class="o">|</span><span class="n">value</span><span class="p">,</span><span class="n">path</span><span class="o">|</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">value</span><span class="si">}</span><span class="s2">, </span><span class="si">#{</span><span class="n">path</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Output</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Hilarious article, [&quot;title&quot;]</span>
</span><span class='line'><span class="c1"># Some Body, [&quot;author&quot;, &quot;body&quot;]</span>
</span><span class='line'><span class="c1"># Life, [&quot;a_array&quot;, 0]</span>
</span><span class='line'><span class="c1"># Happiness, [&quot;a_array&quot;, 1]</span>
</span><span class='line'><span class="c1"># Jokes, [&quot;a_array&quot;, 2]</span>
</span><span class='line'><span class="c1"># lots of jokes here, [&quot;content&quot;, body&quot;, 0]</span>
</span><span class='line'><span class="c1"># lots of jokes here again !, [&quot;content&quot;, body&quot;, 1]</span>
</span><span class='line'><span class="c1"># last of the jokes !, [&quot;content&quot;, body&quot;, 2]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>If you have any suggestions, contributions or issues, please feel free to leave a comment here or on the repo itself !</p>
]]></content>
  </entry>
  
</feed>
