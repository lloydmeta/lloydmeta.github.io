<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Benchmarking | BeachApe.]]></title>
  <link href="https://beachape.com/blog/categories/benchmarking/atom.xml" rel="self"/>
  <link href="https://beachape.com/"/>
  <updated>2017-05-29T13:31:25+09:00</updated>
  <id>https://beachape.com/</id>
  <author>
    <name><![CDATA[Lloyd]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Rust Performance Testing on Travis CI]]></title>
    <link href="https://beachape.com/blog/2016/11/02/rust-performance-testing-on-travis-ci/"/>
    <updated>2016-11-02T15:39:00+09:00</updated>
    <id>https://beachape.com/blog/2016/11/02/rust-performance-testing-on-travis-ci</id>
    <content type="html"><![CDATA[<p><a href="https://www.rust-lang.org/en-US/">Rust</a>  describes itself as:</p>

<blockquote>
  <p><em>a systems programming language that runs blazingly fast, prevents segfaults, and guarantees thread safety.</em>
### Featuring
* zero-cost abstractions
* minimal runtime
*efficient C bindings</p>
</blockquote>

<p>So, it’s likely that developers who choose to program in Rust are focused on performance.  You can make sure your code is efficient by writing benchmarks, but in order to prevent performance regressions, you’ll need to run benchmarks on your Pull Requests or patches and somehow compare before and after. Doing this can be tedious, especially as the changeset evolves over the course of code review or miscellaneous refactoring.</p>

<p><img class="center" src="/images/super-high-performance.jpg" width="450" title="‘Super. High. Performance.’" ></p>

<p>Let’s see how we can get automated benchmark comparisons across commits on <a href="https://travis-ci.org">Travis CI</a>.</p>

<!-- more -->

<h3 id="putting-benchmarks-in-your-project">Putting benchmarks in your project</h3>

<p>First off, you’ll need to have benchmarks in your codebase. There are a few ways to do this:</p>

<ul>
  <li>The standard way <a href="https://doc.rust-lang.org/stable/book/benchmark-tests.html">documented in the Rust Book</a></li>
  <li>Making a <code>benches</code> directory in your project root, putting your benchmarks there, and running <code>cargo bench</code> (this is how I’ve done it in <a href="https://github.com/lloydmeta/frunk/tree/master/benches">Frunk</a>)</li>
</ul>

<h3 id="running-benchmarks-on-travis">Running benchmarks on Travis</h3>

<p>Next, in order to run benchmarks on Travis, we’ll need to make sure that your <code>.travis.yml</code> file has <code>nightly</code> listed as one of the Rust versions that your project is built with:</p>

<p><code>yaml
rust:
  - stable
  - nightly # so we can run benchmarks (required as of writing)
</code></p>

<p>Then, in <code>after_success</code>, we’ll want the following in order to have benchmarks run when we are on a build that uses Rust <code>nightly</code>:</p>

<p><code>yaml
after_success:
  - if [ "$TRAVIS_RUST_VERSION" == "nightly" ]; then
        cargo bench;
    fi
</code></p>

<p>Some readers might be wondering why I’m not using <a href="https://github.com/huonw/travis-cargo"><code>travis-cargo</code></a> here. The reason is because <code>travis-cargo</code> doesn’t support arbitrary cargo libraries/commands, which is needed in the next section ;)</p>

<h3 id="getting-benchmark-comparisons-in-pull-requests">Getting benchmark comparisons in Pull Requests</h3>

<p>So we have benchmarks running automatically on Travis, but what about the before-after comparisons that we talked about earlier? This is where the <a href="https://github.com/BurntSushi/cargo-benchcmp"><code>cargo-benchcmp</code></a> library comes into play. <code>benchcmp</code> is:</p>

<blockquote>
  <p>A small utility for comparing micro-benchmarks produced by cargo bench. The utility takes as input two sets of micro-benchmarks (one “old” and the other “new”) and shows as output a comparison between each benchmark.</p>
</blockquote>

<p>What we’ll want to do next is add a condition to only run these benchmarks when we’re building a Pull Request (henceforth PR), install the <code>benchcmp</code> tool, and use it:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Travis after_success bash script code (travis-after-success.sh)</span> <a href='/downloads/code/bash/travis-after-success.sh'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span></span><span class="ch">#!/usr/bin/env bash</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> <span class="s2">&quot;</span><span class="si">${</span><span class="nv">TRAVIS_PULL_REQUEST_BRANCH</span><span class="k">:-</span><span class="nv">$TRAVIS_BRANCH</span><span class="si">}</span><span class="s2">&quot;</span> !<span class="o">=</span> <span class="s2">&quot;master&quot;</span> <span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="o">[</span> <span class="s2">&quot;</span><span class="nv">$TRAVIS_RUST_VERSION</span><span class="s2">&quot;</span> <span class="o">==</span> <span class="s2">&quot;nightly&quot;</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'>    <span class="nv">REMOTE_URL</span><span class="o">=</span><span class="s2">&quot;</span><span class="k">$(</span>git config --get remote.origin.url<span class="k">)</span><span class="s2">&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="c1"># Clone the repository fresh..for some reason checking out master fails</span>
</span><span class='line'>    <span class="c1"># from a normal PR build&#39;s provided directory</span>
</span><span class='line'>    <span class="nb">cd</span> <span class="si">${</span><span class="nv">TRAVIS_BUILD_DIR</span><span class="si">}</span>/.. <span class="o">&amp;&amp;</span> <span class="se">\</span>
</span><span class='line'>    git clone <span class="si">${</span><span class="nv">REMOTE_URL</span><span class="si">}</span> <span class="s2">&quot;</span><span class="si">${</span><span class="nv">TRAVIS_REPO_SLUG</span><span class="si">}</span><span class="s2">-bench&quot;</span> <span class="o">&amp;&amp;</span> <span class="se">\</span>
</span><span class='line'>    <span class="nb">cd</span>  <span class="s2">&quot;</span><span class="si">${</span><span class="nv">TRAVIS_REPO_SLUG</span><span class="si">}</span><span class="s2">-bench&quot;</span> <span class="o">&amp;&amp;</span> <span class="se">\</span>
</span><span class='line'>    <span class="c1"># Bench master</span>
</span><span class='line'>    git checkout master <span class="o">&amp;&amp;</span> <span class="se">\</span>
</span><span class='line'>    cargo bench &gt; benches-control <span class="o">&amp;&amp;</span> <span class="se">\</span>
</span><span class='line'>    <span class="c1"># Bench variable</span>
</span><span class='line'>    git checkout <span class="si">${</span><span class="nv">TRAVIS_COMMIT</span><span class="si">}</span> <span class="o">&amp;&amp;</span> <span class="se">\</span>
</span><span class='line'>    cargo bench &gt; benches-variable <span class="o">&amp;&amp;</span> <span class="se">\</span>
</span><span class='line'>    cargo install cargo-benchcmp --force <span class="o">&amp;&amp;</span> <span class="se">\</span>
</span><span class='line'>    cargo benchcmp benches-control benches-variable<span class="p">;</span>
</span><span class='line'><span class="k">fi</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The first conditional is simply to check that the current branch being built is not master. It’s a bit verbose because <code>$TRAVIS_BRANCH</code> <a href="https://graysonkoonce.com/getting-the-current-branch-name-during-a-pull-request-in-travis-ci/">does not always provide the current branch name</a>. So instead, we use <code>${TRAVIS_PULL_REQUEST_BRANCH:-$TRAVIS_BRANCH}</code>, which consists of <code>$TRAVIS_PULL_REQUEST_BRANCH</code> because it gives us the current branch if the build was triggered by a PR, and a default of <code>$TRAVIS_BRANCH</code>, which gives us the branch name of non-PR builds.</p>

<p>The second conditional checks that the current Travis build is using <code>nightly</code>, which is a requirement for running benchmarks (as of writing).</p>

<p>Inside the if statements body, we first <code>cd</code> out of our provided directory and clone our project anew. I’m not entirely sure why, but in my testing, I was unable to checkout another branch (e.g. master) otherwise.  Next, we run <code>cargo bench</code> on the master branch, sending the output to <code>benches-control</code>.  Afterwards, we checkout the commit for the current build by using <code>TRAVIS_COMMIT</code>, and run <code>cargo bench</code> again, sending the output to <code>benches-variable</code>.</p>

<p>Lastly, we install and run <code>cargo benchcmp</code>, passing the path of the control and variable benchmark result files as arguments, letting <a href="https://github.com/BurntSushi/cargo-benchcmp"><code>cargo-benchcmp</code></a> do its job.</p>

<p>Oh, we shouldn’t forget to add our script to the <code>after_success</code> block in our Travis file.</p>

<p><code>yaml
after_success:
  - ./travis-after-success.sh
</code></p>

<p>Here is some sample output from my Rust functional programming library, <a href="https://github.com/lloydmeta/frunk/">Frunk</a>.</p>

<p><img class="center" src="/images/rust-travis-perf-testing.png" title="‘PR benchmark comparisons on my project, Frunk.’" ></p>

<p>The benchmark comparisons show up in <a href="https://travis-ci.org/lloydmeta/frunk/jobs/172486500#L398">the build log</a>.</p>

<h3 id="conclusion">Conclusion</h3>

<p>That’s it. Now, you can go to the Travis build log of your PRs and see how performance has been affected. Please give it a try, and send any questions or feedback. Oh, if you’re interested in a library that does this for you or if you want to turn this into some kind of a service, do let me know ;-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby 2.0.0 Enumerable Lazy Benchmark]]></title>
    <link href="https://beachape.com/blog/2013/06/12/ruby-2-dot-0-0-enumerable-lazy-benchmark/"/>
    <updated>2013-06-12T10:30:00+09:00</updated>
    <id>https://beachape.com/blog/2013/06/12/ruby-2-dot-0-0-enumerable-lazy-benchmark</id>
    <content type="html"><![CDATA[<p>Ruby 2.0.0 was released a few months back and I finally had some time to look into some of the features and changes that came with it. Lazy collections has always been a cool concept for me and so I decided to do a few benchmarks.</p>

<!-- more -->

<p>That said, a quick Google search brought me to this <a href="http://dev.af83.com/2012/11/22/ruby-2-0-enumerator-lazy.html">great page</a> where someone had already written a usable benchmark back in 2012 when the 2.0.0 preview release came out:</p>

<p>File /Users/Lloyd/Documents/ruby_dev/blog/source/downloads/code/ruby/ruby<em>2</em>0_0_enum_lazy_bench.rb could not be found</p>

<p>And then the results, with Ruby 2.0.0p0</p>

<p><code>
                      user     system      total        real
chainable 10000   0.000000   0.000000   0.000000 (  0.002659)
                      user     system      total        real
one iteration 10000  0.000000   0.000000   0.000000 (  0.002732)
                      user     system      total        real
chainable lazy 10000  0.010000   0.000000   0.010000 (  0.005103)
                      user     system      total        real
chainable 100000  0.030000   0.000000   0.030000 (  0.031249)
                      user     system      total        real
one iteration 100000  0.020000   0.000000   0.020000 (  0.027257)
                      user     system      total        real
chainable lazy 100000  0.060000   0.000000   0.060000 (  0.053770)
                      user     system      total        real
chainable 1000000  0.260000   0.010000   0.270000 (  0.270027)
                      user     system      total        real
one iteration 1000000  0.280000   0.010000   0.290000 (  0.283680)
                      user     system      total        real
chainable lazy 1000000  0.560000   0.010000   0.570000 (  0.566137)
                      user     system      total        real
chainable 10000000  2.830000   0.120000   2.950000 (  2.956604)
                      user     system      total        real
one iteration 10000000  2.910000   0.130000   3.040000 (  3.095763)
                      user     system      total        real
chainable lazy 10000000  5.580000   0.140000   5.720000 (  6.079247)
</code></p>

<h2 id="conclusion">Conclusion</h2>
<p>Turns out that performance of Lazy relative to non-lazy variants hasn’t changed enough for it to be worthwhile to use for anything other than outrageously huge colletions (perhaps many many times larger than 10000000) from a performance point of view. That said, depending on the operation you’re performing, using Lazy might be useful if you want to play within memory constraints.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Simple String Pattern Checking in Ruby: Benchmark]]></title>
    <link href="https://beachape.com/blog/2013/04/06/simple-string-pattern-checking-in-ruby-benchmark/"/>
    <updated>2013-04-06T16:25:00+09:00</updated>
    <id>https://beachape.com/blog/2013/04/06/simple-string-pattern-checking-in-ruby-benchmark</id>
    <content type="html"><![CDATA[<p>Often times, as programmers, we need to check to see if a substring exists in a bigger string. Many programmers will instinctively reach out for Regex matching, but I often wondered if this was really the best way to do things, particularly in Ruby.</p>

<p>One day, in a Ruby-focused Skype group chat, a friend of mine asked the other members to give him a snippet of code that would allow him to take a hostname, check if the substring ‘qa’ was in it and if it did, return ‘qa’, else ‘prod’ (for production). My knee-jerk reaction was the same as the other members: use Regex. But I wondered if it would be better to use compiled Regex, or interpreted Regex, or perhaps maybe even the built in String method <a href="http://www.ruby-doc.org/core-1.9.3/String.html#method-i-include-3F">include?</a>. So I decided to do some benchmarking.</p>

<!-- more -->

<p>Ruby has a great module built in that makes benchmarking very simple: <a href="http://www.ruby-doc.org/stdlib-1.9.3/libdoc/benchmark/rdoc/Benchmark.html">Benchmark</a>. A lot of the time I use it to check if something is performant or not, even on the Rails level! In this session, I make use of a very small subset of this module’s functionality, but if you’re interested, please be sure to check out the above link to see other options.</p>

<p>Anyways, my goal was to benchmark a simple string pattern check using compiled Regex, interpreted Regex, and the String #include? method. As a result, I wrote the following ruby script:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Code for benchmarking (simple_string_matching_benchmark.rb)</span> <a href='/downloads/code/ruby/simple_string_matching_benchmark.rb'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span></span><span class="nb">require</span> <span class="s2">&quot;benchmark&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">regex_compiled</span> <span class="o">=</span> <span class="no">Regexp</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;qa&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">regex_compiled</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="s2">&quot;qa&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="no">Benchmark</span><span class="o">.</span><span class="n">bmbm</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span>
</span><span class='line'>  <span class="n">x</span><span class="o">.</span><span class="n">report</span><span class="p">(</span><span class="s2">&quot;1000000 times positive regex&quot;</span><span class="p">){</span><span class="mi">1000000</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span>
</span><span class='line'>    <span class="s2">&quot;someserverqa&quot;</span> <span class="o">=~</span> <span class="sr">/qa/</span> <span class="p">?</span> <span class="s2">&quot;qa&quot;</span> <span class="p">:</span> <span class="s2">&quot;prod&quot;</span>
</span><span class='line'>  <span class="k">end</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">x</span><span class="o">.</span><span class="n">report</span><span class="p">(</span><span class="s2">&quot;1000000 times negative regex&quot;</span><span class="p">){</span><span class="mi">1000000</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span>
</span><span class='line'>    <span class="s2">&quot;someserverprod&quot;</span> <span class="o">=~</span> <span class="sr">/qa/</span> <span class="p">?</span> <span class="s2">&quot;qa&quot;</span> <span class="p">:</span> <span class="s2">&quot;prod&quot;</span>
</span><span class='line'>  <span class="k">end</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">x</span><span class="o">.</span><span class="n">report</span><span class="p">(</span><span class="s2">&quot;1000000 times positive regex compiled&quot;</span><span class="p">){</span><span class="mi">1000000</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">regex_compiled</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="s2">&quot;someserverqa&quot;</span><span class="p">)</span> <span class="p">?</span> <span class="s2">&quot;qa&quot;</span> <span class="p">:</span> <span class="s2">&quot;prod&quot;</span>
</span><span class='line'>  <span class="k">end</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">x</span><span class="o">.</span><span class="n">report</span><span class="p">(</span><span class="s2">&quot;1000000 times negative regex compiled&quot;</span><span class="p">){</span><span class="mi">1000000</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">regex_compiled</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="s2">&quot;someserverprod&quot;</span><span class="p">)</span> <span class="p">?</span> <span class="s2">&quot;qa&quot;</span> <span class="p">:</span> <span class="s2">&quot;prod&quot;</span>
</span><span class='line'>  <span class="k">end</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">x</span><span class="o">.</span><span class="n">report</span><span class="p">(</span><span class="s2">&quot;1000000 times positive #include?&quot;</span><span class="p">){</span><span class="mi">1000000</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span>
</span><span class='line'>    <span class="s2">&quot;someserverqa&quot;</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="s2">&quot;qa&quot;</span><span class="p">)</span> <span class="p">?</span> <span class="s2">&quot;qa&quot;</span> <span class="p">:</span> <span class="s2">&quot;prod&quot;</span>
</span><span class='line'>  <span class="k">end</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">x</span><span class="o">.</span><span class="n">report</span><span class="p">(</span><span class="s2">&quot;1000000 times negative #include?&quot;</span><span class="p">){</span><span class="mi">1000000</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span>
</span><span class='line'>    <span class="s2">&quot;someserverqa&quot;</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="s2">&quot;someserverprod&quot;</span><span class="p">)</span> <span class="p">?</span> <span class="s2">&quot;qa&quot;</span> <span class="p">:</span> <span class="s2">&quot;prod&quot;</span>
</span><span class='line'>  <span class="k">end</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Note the use of .bmbm, which tells the module that we want to perform a rehearsal run.</p>

<p>The results were as follows:</p>

<p>```
Rehearsal ————————————————————————-
1000000 times positive regex            0.400000   0.000000   0.400000 (  0.398280)
1000000 times negative regex            0.420000   0.000000   0.420000 (  0.424669)
1000000 times positive regex compiled   0.990000   0.020000   1.010000 (  1.005177)
1000000 times negative regex compiled   0.500000   0.000000   0.500000 (  0.496037)
1000000 times positive #include?        0.280000   0.000000   0.280000 (  0.277431)
1000000 times negative #include?        0.240000   0.000000   0.240000 (  0.248257)
—————————————————————- total: 2.850000sec</p>

<pre><code>                                        user     system      total        real 1000000 times positive regex            0.400000   0.000000   0.400000 (  0.408893) 1000000 times negative regex            0.450000   0.000000   0.450000 (  0.447820) 1000000 times positive regex compiled   1.010000   0.000000   1.010000 (  1.009081) 1000000 times negative regex compiled   0.500000   0.000000   0.500000 (  0.502232) 1000000 times positive #include?        0.280000   0.000000   0.280000 (  0.275711) 1000000 times negative #include?        0.250000   0.000000   0.250000 (  0.247974) ```
</code></pre>

<h2 id="conclusion">Conclusion</h2>
<p>Turned out in the case of simple string presence checking, #include? was faster than everything else by almost half. More surprising was the fact that Regex compiled was even slower than Regex interpreted.</p>
]]></content>
  </entry>
  
</feed>
