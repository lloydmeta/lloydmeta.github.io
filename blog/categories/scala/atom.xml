<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Scala | BeachApe.]]></title>
  <link href="https://beachape.com/blog/categories/scala/atom.xml" rel="self"/>
  <link href="https://beachape.com/"/>
  <updated>2015-03-02T21:27:16+09:00</updated>
  <id>https://beachape.com/</id>
  <author>
    <name><![CDATA[Lloyd]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Enumeratum: Sealed Trait Enums for Scala]]></title>
    <link href="https://beachape.com/blog/2015/02/11/enumeratum-sealed-trait-enums-for-scala/"/>
    <updated>2015-02-11T16:47:00+09:00</updated>
    <id>https://beachape.com/blog/2015/02/11/enumeratum-sealed-trait-enums-for-scala</id>
    <content type="html"><![CDATA[<p>If you've been working with Scala for a while, you might have come across a few "problems" with the built in <code>Enumeration</code> that's provided out-of-the-box.  This is especially true if you have colleagues who come from a Java background and yearn for the Java-style <code>Enum</code> that gave them lots of power and flexibility.</p>

<p>A quick search on the internet for "Scala enumeration alternative" will yield a lot of results (perhaps on StackOverflow) where people have cooked up their own implementation of enumerations, usually built on <code>sealed traits</code>. Personally, I found most of them to be either too inconvenient to use, too over-powered, or too complicated, and I really didn't want to have to copy-paste enum-related code into all my projects.</p>

<p>Thus <a href="https://github.com/lloydmeta/enumeratum">Enumeratum</a> was born.</p>

<!-- more -->


<p><a href="https://github.com/lloydmeta/enumeratum">Enumeratum</a> aims to be simple to use, idiomatic, small (LoC), yet flexible enough to allow Scala devs to make power enums if they so wish. It is also Mavenised for easy import into any project.</p>

<p>To use it, simply <a href="https://github.com/lloydmeta/enumeratum#sbt">add it as a dependency</a></p>

<p>```
libraryDependencies ++= Seq(</p>

<pre><code>"com.beachape" %% "enumeratum" % "1.0.0",
"com.beachape" %% "enumeratum-play" % "1.0.0" // if you are using Play and want to avoid boilerplate
</code></pre>

<p>)
```</p>

<p>Then</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Enumeratum example code (enumeratum_example.scala)</span> <a href='/downloads/code/scala/enumeratum_example.scala'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="c1">// For use in a REPL</span>
</span><span class='line'>
</span><span class='line'><span class="k">import</span> <span class="nn">enumeratum._</span>
</span><span class='line'>
</span><span class='line'><span class="k">sealed</span> <span class="k">trait</span> <span class="nc">Phone</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">call</span><span class="o">(</span><span class="n">number</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span><span class="k">:</span> <span class="kt">String</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">case</span> <span class="k">object</span> <span class="nc">Phone</span> <span class="k">extends</span> <span class="nc">Enum</span><span class="o">[</span><span class="kt">Phone</span><span class="o">]</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">case</span> <span class="k">object</span> <span class="nc">Android</span> <span class="k">extends</span> <span class="nc">Phone</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">def</span> <span class="n">call</span><span class="o">(</span><span class="n">number</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span> <span class="k">=</span> <span class="s">&quot;This is Larry Page.&quot;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">case</span> <span class="k">object</span> <span class="nc">Iphone</span> <span class="k">extends</span> <span class="nc">Phone</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">def</span> <span class="n">call</span><span class="o">(</span><span class="n">number</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span> <span class="k">=</span> <span class="s">&quot;This is Steve Jobs.&quot;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">case</span> <span class="k">object</span> <span class="nc">WindowsPhone</span> <span class="k">extends</span> <span class="nc">Phone</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">def</span> <span class="n">call</span><span class="o">(</span><span class="n">number</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span> <span class="k">=</span> <span class="s">&quot;This is Bill Gates.&quot;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">val</span> <span class="n">values</span> <span class="k">=</span> <span class="n">findValues</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">import</span> <span class="nn">Phone._</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Use as needed.</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="n">myPhone</span> <span class="k">=</span> <span class="nc">Iphone</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Get exhaustive match warnings</span>
</span><span class='line'><span class="k">def</span> <span class="n">rate</span><span class="o">(</span><span class="n">phone</span><span class="k">:</span> <span class="kt">Phone</span><span class="o">)</span><span class="k">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="n">phone</span> <span class="k">match</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">case</span> <span class="nc">Android</span> <span class="k">=&gt;</span> <span class="s">&quot;Great!&quot;</span>
</span><span class='line'>  <span class="k">case</span> <span class="nc">Iphone</span> <span class="k">=&gt;</span> <span class="s">&quot;Awesome!&quot;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">&lt;console&gt;:17: warning: match may not be exhaustive.</span>
</span><span class='line'><span class="cm">It would fail on the following input: WindowsPhone</span>
</span><span class='line'><span class="cm">*/</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>You get nice things like exhaustive match warnings at compile-time, enums with methods, no more Enum-value type erasure, and other nice stuff.</p>

<h2>How it works</h2>

<p>Some of the solutions for custom enums out there are based on macros that reflect at compile time using <code>knownDirectSubclasses</code> to find enum values, but as of writing, there is a <a href="https://issues.scala-lang.org/browse/SI-7046">2 year old bug</a> for that method.</p>

<p>As a result, <a href="https://github.com/lloydmeta/enumeratum">Enumeratum</a> uses another method of finding enum values: looking in an enclosed object to find the enum values. The macro behind <code>findValues</code> does this for you so that you don't have to maintain your own collection of enum values, which is both error-prone and tedious.</p>

<h2>Play</h2>

<p>If you want to use <a href="https://github.com/lloydmeta/enumeratum">Enumeratum</a> in a Play app, you may as well add <a href="https://github.com/lloydmeta/enumeratum#play-2"><code>enumeratum-play</code></a> as a dependency instead so that you can use the <code>PlayEnum[A]</code> trait (instead of <code>Enum[A]</code>), which will give you nice things like QueryStringBinders, PathBinders, form mappers, and Json Reads/Writes/Formats. This means less boilerplate in your project, which is A Good Thing, right?</p>

<h2>Limitations</h2>

<p>There are a few limitations with Enumeratum:</p>

<ul>
<li>Ordinality is not taken care of. From what I've seen, this is one of the least-used functions of Enums in general. That said, nothing is stoping you from defining an <code>Ordering</code> in your companion object for your sealed trait.</li>
<li>Because the Enum values are case objects, they will be inferred to have their own specific type, which may cause problems with compilation for typeclasses that are not contravariant. In that case, simply help the compiler by adding a type (e.g. <code>val myPhone: Phone = Iphone</code>)</li>
<li>The method <code>withName</code> relies on the <code>toString</code> method of the Enum values for lookup. Make sure to override this if you have specific requirements.</li>
</ul>


<h2>Enjoy</h2>

<p>I hope <a href="https://github.com/lloydmeta/enumeratum">Enumeratum</a> can help you out of your <code>Enumeration</code> woes. Have a look, play around, and send a PR or two !</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Scala Unless-when via Macros]]></title>
    <link href="https://beachape.com/blog/2014/08/11/scala-unless-when-via-macros/"/>
    <updated>2014-08-11T18:41:00+09:00</updated>
    <id>https://beachape.com/blog/2014/08/11/scala-unless-when-via-macros</id>
    <content type="html"><![CDATA[<p>Last week, I decided to take a stab at learning <a href="http://scalamacros.org/">Scala macros</a>. I had played around with macros when I wrote Scheme for a living (yes, believe it or not, these places exist...and existed long before Clojure made Lisp hip again), but the complexity of Scala's macros always put me off (if you don't believe me, check out the example given in the offical docs for a simple <a href="http://docs.scala-lang.org/overviews/macros/overview.html#a-complete-example">print macro</a>).</p>

<p>In Scala, things are not so simple, but with the introduction of <a href="docs.scala-lang.org/overviews/macros/quasiquotes.html">quasiquotes</a> and some refinements brought by Scala 2.11, things are smoother. Still, for a guy like me, the documentation was both sparse and DRY. Since I learn best when I'm actively engaged in building something, I decided to try writing the <a href="http://clhs.lisp.se/Body/m_when_.htm">run-of-the-mill unless-when</a> macros in Scala.</p>

<p>This post aims to summarise my journey towards implementing <a href="https://github.com/lloydmeta/unless-when">unless-when</a> and hopefully along the way make Scala macros accessible, at least at an introductory level, for Most People. There are already a few Scala macro blog posts out there but another one can't hurt.</p>

<!-- more -->


<p><em>Note</em>: this blog post aims to explore macros as they are usable in Scala 2.10+. It also focuses on implementing macros with quasiquotes, as using them is more human-friendly than manually constructing Abstract Syntax Trees (AST).</p>

<h2>Goal</h2>

<p>For those unfamiliar with <code>when</code> and <code>unless</code>: the basic idea is that <code>when</code> is an <code>if</code> without an else, and <code>unless</code> is it's opposite. The main reason for their existence is to make code more readable by adding a tiny bit of syntatic sugar. Without further ado, an example of what we want to achieve</p>

<p>```scala
/<em>
  This should replace if (true) { block of code }
</em>/
when (true) {
  // block of code
}</p>

<p>/<em>
  This should replace if (!true) { do something }
</em>/
unless (false) {
  // block of code
}
```</p>

<p>Since we're writing Scala, it would be nice if these constructs returned something useful; using the <a href="http://www.scala-lang.org/api/current/scala/Option.html">Option</a> monad seems reasonable: If the block is run, we return the result in a Some and otherwise return a None. <a href="http://danielwestheide.com/blog/2012/12/19/the-neophytes-guide-to-scala-part-5-the-option-type.html">This tutorial</a> is a good guide for Options in case you are unfamiliar with the concept.</p>

<h2>Macro-y basics</h2>

<p>Taking a look at the documentation, you will quickly notice the general pattern for implementing a simple Scala macro</p>

<p>```scala
import scala.language.experimental.macros
import scala.reflect.macros._</p>

<p>object Example {
  def meth<a href="x:%20A">A</a>: A = macro implRef[A]</p>

<p>...</p>

<p>  def implRef<a href="c:%20Context">A: c.WeakTypeTag</a>(x: c.Expr[A]): c.Expr[A] = ...
}
```
What does this mean? Let's break it down:</p>

<ul>
<li><code>import scala.language.experimental.macros</code> and <code>import scala.reflect.macros._</code> are standard Scala imports that allow us to play around with macros. What's not listed in this example is the declaration that your project depends on <code>scala-reflect</code>. You can do so by adding the following to your build.sbt:

<ul>
<li><code>libraryDependencies ++= Seq("org.scala-lang" % "scala-reflect" % scalaVersion.value)</code></li>
</ul>
</li>
<li><code>def meth[A](x: A): A</code> this is still just normal Scala code that we would normally see. It simply declares a method belonging to the Example singleton that is parameterised on the input type, and we want to make sure that the output type matches this type (e.g. if we invoke <code>meth</code> with an <code>Int</code>, we expect the output to be an <code>Int</code> because that is the contract of the method). For more info on writing parametric polymorphism, please check out <a href="Parametric%20polymorphism">this guide</a>:</li>
<li><code>macro implRef[A]</code> this is where things start looking macro-ish. The <code>macro</code> keyword lets the compiler know that the body of this method is going to be implemented via a macro definition, in this case <code>implRef</code>.</li>
<li><code>def implRef[A: c.WeakTypeTag](c: Context)(x: c.Expr[A]): c.Expr[A]</code> .. wow. This itself needs to be broken down:

<ul>
<li><code>def implRef[A: c.WeakTypeTag]</code> The first part <code>def implRef</code> is still standard Scala</li>
<li><code>(c: Context)</code> (we'll cover <code>[A: c.WeakTypeTag]</code> in a bit). In this part, <code>(c: Context)</code> declares that the first argument passed to the macro implementation must be a Context. This is a requirement for playing around with Scala macros, and is actually passed by the compiler when it invokes macro expansion, so that you can write code that accesses the compiler API.</li>
<li><code>[A: c.WeakTypeTag]</code> This is a bit mischievous because we combine Scala-shorthand for typeclasses with macro-magic. This probably deserves a post in and of itself, but for now, please consider this to mean "A is a type parameter passed during macro invocation, but we must ALSO have in scope a WeakTypeTag coming from the Context that is parameterised to type A, which can be written in full as c.WeakTypeTag[A]". This WeakTypeTag business is required so that we can pass along the type parameter from <code>meth</code> into the <code>implRef</code> macro expansion implementation, allowing us to have a type parameterised macro definition.

<ul>
<li>For more information on type classes and the shorthand we use here, I highly recommend this <a href="danielwestheide.com/blog/2013/02/06/the-neophytes-guide-to-scala-part-12-type-classes.html">blog post on type classes</a></li>
</ul>
</li>
<li><code>(x: c.Expr[A])</code> means that the first non-Context parameter of the macro implementation (remember that the first one is always taken by the compiler and must be a Context) is <code>x</code> and it is a <code>c.Expr[A]</code>. It is important that the name of the parameter matches that used in the invoking method (see how <code>meth</code> also has <code>x</code> as the first parameter). <code>c.Expr</code> is type of object that wraps the abstract syntax tree that represents the input to the invoking function, and it is typed to A.

<ul>
<li><em>NOTE:</em> since the argument's type is <code>c.Expr</code> (essentially an abstract syntax tree), any expression passed to the method <code>meth</code> actually may not get invoked or evaluated even though it is not a <a href="http://daily-scala.blogspot.jp/2009/12/by-name-parameter-to-function.html">pass-by-name parameter</a>. In other words, while the macro is expanding, it <strong>acts</strong> like a pass-by name parameter and is "lazy".</li>
</ul>
</li>
<li><code>: c.Expr[A]</code> all this means is that the result of the macro expansion is also a <code>c.Expr</code> type parameterised to A.</li>
</ul>
</li>
</ul>


<h2>Quasiquotes</h2>

<p>Quasiquotes are not a Scala-exclusive construct, and a Google search will show that they are used in other languages that support metaprogramming, like Scheme.</p>

<p>In short, they offer the macro programmer an easy way to manipulate or create abstract syntax trees without having to build them manually. This makes them extremely helpful in Scala because:
  1. Scala syntax does not map to ASTs easily like Lisps
  2. Scala is typed, which means your manually-built AST also needs typing...which wraps non-macro-land types (notice how a normal type parameter like <code>[A]</code> becomes <code>c.Expr[A]</code> ... that's twice as many characters  !)</p>

<p>Quasiquotes allow us to use <a href="http://docs.scala-lang.org/overviews/core/string-interpolation.html">string-interpolation-like syntax</a> to interpolate elements into a tree as we define it.</p>

<p>For example:</p>

<p>```scala
scala> val aquasiquote = q"a quasiquote"
aquasiquote: universe.Select = a.quasiquote</p>

<p>scala> val tree = q"i am { $aquasiquote }"
tree: universe.Tree = i.am(a.quasiquote)
```
The above example was taken from the <a href="http://docs.scala-lang.org/overviews/quasiquotes/intro.html">official documentation on quasiquotes</a>, which I highly recommend you take a look at if you find the rest of this post hard to follow.</p>

<h2>Implementation</h2>

<p>For <code>when</code>, we know that we roughly want the following:</p>

<p><code>scala
when (someCondition) { result }
</code></p>

<p>To expand via our macro into the following (yes we are using an inline if .. if you don't like it, pretend we didn't)</p>

<p><code>scala
if (someCondition) Some(result) else None
</code></p>

<p>Using what we know, the following should work:</p>

<p>```scala
import scala.language.experimental.macros
import scala.reflect.macros._</p>

<p>object Example {</p>

<p>  def when<a href="p:%20Boolean">A</a>(f: A): Option[A] = macro whenImp[A]</p>

<p>  def whenImp<a href="c:%20Context">A: c.WeakTypeTag</a>(p: c.Expr[Boolean])(f: c.Expr[A]): c.Expr[Option[A]] = {</p>

<pre><code>import c.universe._
c.Expr[Option[A]](q"if ($p) Some($f) else None")
</code></pre>

<p>  }
}
```</p>

<p>Implementing <code>unless</code> is left as an exercise for the reader :)</p>

<h2>Trying it out</h2>

<p>Putting the above into a Scala REPL (you will probably need to use <code>:paste</code> mode) will prove that it works.</p>

<p>For example:</p>

<p>```scala
scala> import Example.<em>
import Example.</em></p>

<p>when(true)(3)
res1: Option[Int] = Some(3)
```</p>

<p>Also, remember that since our <code>when</code> is backed by a macro, the <code>f</code> argument (our block) passed to the second parameter list, behaves "lazily" and won't execute if our predicate<code>p</code> returns false. This is because when <code>when</code> is invoked, the compiler knows to pass the entire AST for that block parameter (well, wrapped inside a <code>c.Expr</code>) to our macro, which interpolates the it into the final tree.</p>

<p>For the performance-conscious, this means that we get "lazy" for free; that is, without using Scala's call-by-name parameter feature, which, although nice to use in many cases, <em>does</em> incur some run-time performance penalty because it is implemented by instantiating anonymous classes (see <a href="http://infoscience.epfl.ch/record/128135/files/paper.pdf">this paper</a> for more information about the performance cost of call-by-name parameters .. among other performance-related Scala things).</p>

<h2>unless-when library</h2>

<p>I've put the above into a library and included trailing variants of <code>when</code> and <code>unless</code> as bonuses (Rubyists should be familiar with these).</p>

<p>You can find the lib <a href="https://github.com/lloydmeta/unless-when">here on Github</a>. It is fully tested and Mavenised for easy out-of-the-box usage.</p>

<h2>Conclusion</h2>

<p>I hope this post has been helpful in giving a simple, but full example of how to get started with macros in Scala. If you spot any errors, have questions or suggestions, please feel free to leave a comment!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RxScala and Schwatcher]]></title>
    <link href="https://beachape.com/blog/2014/05/03/rxscala-and-schwatcher/"/>
    <updated>2014-05-03T17:44:00+09:00</updated>
    <id>https://beachape.com/blog/2014/05/03/rxscala-and-schwatcher</id>
    <content type="html"><![CDATA[<p>A couple days ago, I released v0.1.3 of <a href="https://github.com/lloydmeta/schwatcher">Schwatcher</a>, which introduces the ability to monitor events on file paths using a composable <a href="https://rx.codeplex.com/">Rx Observable</a> interface. "What does that even mean and why should you care?" is what this blog post tries to answer.</p>

<p>The original version of Schwatcher allowed you to tell a <code>MonitorActor</code> what callback you want to fire when a <a href="http://docs.oracle.com/javase/7/docs/api/java/nio/file/StandardWatchEventKinds.html">certain type of event</a> happened on a file path. This is fine and there are people out there using it in production as is. The limitation to this approach is that (at least by default), the events are difficult to treat as data and thus difficult to compose.</p>

<p>With <a href="https://rx.codeplex.com/">Rx</a>, we turn file path events into an asynchronous stream/channel. Essentially, you tell a <code>RxMonitor</code> object what path and event type you want to monitor and when an event happens, it will get pushed into its <code>observable</code> (the stream). You can then choose to filter, map, or fold over this data stream, creating new data streams. If you wish to cause side-effects, you can add one or more <code>observer</code>s to these data streams.</p>

<!-- more -->


<p><em>Note</em>: this blog post applies to v0.1.3 of Schwatcher, which uses v0.18.1 of RxScala. Future versions may introduce breaking changes that invalidate the examples in this blog post.</p>

<h2>Example</h2>

<p>Suppose we have the following directory structure:</p>

<p><code>
directory1
  - directoryFile1
</code></p>

<p>Let's set up an <code>RxMonitor</code> object to monitor for file creation and modifications events in <code>directory1</code> (note: all operations on <code>RxMonitor</code> objects are thread-safe).</p>

<p>While we're at it, let's grab the base <code>observable</code> from the monitor as well. Note that this <code>Observable</code> will, according to the <code>registerPath</code> and <code>unregisterPath</code> calls made to its parent <code>RxMonitor</code>, push all <code>EventAtPath</code>s to its <code>Observer</code>s. More on what an <code>Observer</code> is later, but for now, think of an <code>Observable</code> as a data stream and an <code>Observer</code> as an object gets pushed new objects from the <code>Observable</code> that it is, well, observing.</p>

<p>```scala
import com.beachape.filemanagement.RxMonitor
import com.beachape.filemanagement.Messages.EventAtPath
import java.nio.file.Paths
import java.nio.file.StandardWatchEventKinds._
import rx.lang.scala.Observer</p>

<p>val monitor = RxMonitor()
val observable = monitor.observable
val directory1 = Paths get "/Users/lloyd/Desktop/directory1"</p>

<p>monitor.registerPath(ENTRY_MODIFY, directory1)
monitor.registerPath(ENTRY_CREATE, directory1)
```</p>

<p>Let's create 2 more <code>Observables</code>. Let's make one called <code>createsOnly</code> that will only care about create events in the directory and another one called <code>scalaSourceCreatesOnly</code> that only cares about create events for files ending in <code>.scala</code>. <strong>Notice</strong> that we're composing here :)</p>

<p><code>scala
val createsOnly = observable.filter(_.event == ENTRY_CREATE)
val scalaSourceCreatesOnly = createsOnly.filter(_.path.toString.endsWith(".scala"))
</code>
Now, let's create some basic <code>Observers</code> that we can pass to the <code>subscribe</code> method of our new <code>Observable</code>s. An <code>Observer</code> at minimum implements an onNext function, which takes an element that will be pushed to it from the <code>Observable</code> that it subscribes to and returns nothing (<code>Unit</code>). It may optionally implement onError (a function which takes a <code>Throwable</code> as an argument and returns nothing) and onCompleted (0 argument function that is called when the <code>Observable</code> it is subscribed to is finished and will no longer send further objects):</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>attach observers (attachObservers.scala)</span> <a href='/downloads/code/scala/attachObservers.scala'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">createAndModifyObserver</span> <span class="k">=</span> <span class="nc">Observer</span><span class="o">[</span><span class="kt">EventAtPath</span><span class="o">](</span><span class="n">onNext</span> <span class="k">=</span> <span class="o">{</span> <span class="n">event</span> <span class="k">=&gt;</span> <span class="n">println</span><span class="o">(</span><span class="n">s</span><span class="s">&quot;Something was created or modified: $event&quot;</span><span class="o">)})</span>
</span><span class='line'><span class="k">val</span> <span class="n">createOnlyObserver</span> <span class="k">=</span> <span class="nc">Observer</span><span class="o">[</span><span class="kt">EventAtPath</span><span class="o">](</span><span class="n">onNext</span> <span class="k">=</span> <span class="o">{</span> <span class="n">event</span> <span class="k">=&gt;</span> <span class="n">println</span><span class="o">(</span><span class="n">s</span><span class="s">&quot;Something was created: $event&quot;</span><span class="o">)})</span>
</span><span class='line'>
</span><span class='line'><span class="n">observable</span><span class="o">.</span><span class="n">subscribe</span><span class="o">(</span><span class="n">createAndModifyObserver</span><span class="o">)</span>
</span><span class='line'><span class="n">createsOnly</span><span class="o">.</span><span class="n">subscribe</span><span class="o">(</span><span class="n">createOnlyObserver</span><span class="o">)</span>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * The same as</span>
</span><span class='line'><span class="cm"> * {{{</span>
</span><span class='line'><span class="cm"> * val createScalaOnlyObserver = Observer[EventAtPath](onNext = { event =&gt; println(s&quot;A Scala source file was created: $event&quot;)})</span>
</span><span class='line'><span class="cm"> * scalaSourceCreatesOnly.subscribe(createScalaOnlyObserver)</span>
</span><span class='line'><span class="cm"> * }}}</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * The same as declaring an Observer separately and attaching it via #subscribe (as seen above),</span>
</span><span class='line'><span class="cm"> * since Observer as a type is just a way of binding 3 different functions, onNext, onCompleted, and onError</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="n">scalaSourceCreatesOnly</span><span class="o">.</span><span class="n">subscribe</span><span class="o">(</span><span class="n">onNext</span> <span class="k">=</span> <span class="o">{</span> <span class="n">event</span> <span class="k">=&gt;</span> <span class="n">println</span><span class="o">(</span><span class="n">s</span><span class="s">&quot;A Scala source file was created: $event&quot;</span><span class="o">)})</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Now let's make stuff happen in another terminal.</p>

<p><code>bash
$ ~/Desktop/directory1: touch hello
$ ~/Desktop/directory1: echo lol &gt;&gt; hello
$ ~/Desktop/directory1: touch speedy.scala
$ ~/Desktop/directory1: echo 'println("hmm")' &gt;&gt; speedy.scala
</code></p>

<p>The following will be outputted</p>

<p><code>
Something was created or modified: EventAtPath(ENTRY_CREATE,/Users/lloyd/Desktop/directory1/hello)
Something was created: EventAtPath(ENTRY_CREATE,/Users/lloyd/Desktop/directory1/hello)
Something was created or modified: EventAtPath(ENTRY_MODIFY,/Users/lloyd/Desktop/directory1/hello)
Something was created or modified: EventAtPath(ENTRY_CREATE,/Users/lloyd/Desktop/directory1/speedy.scala)
Something was created: EventAtPath(ENTRY_CREATE,/Users/lloyd/Desktop/directory1/speedy.scala)
A Scala source file was created: EventAtPath(ENTRY_CREATE,/Users/lloyd/Desktop/directory1/speedy.scala)
Something was created or modified: EventAtPath(ENTRY_MODIFY,/Users/lloyd/Desktop/directory1/speedy.scala)
</code></p>

<p>Lastly, since we're done, let's call the <code>stop()</code> method on the <code>RxMonitor</code> object so that subscribed <code>Observers</code> are notified and we stop the underlying <code>MonitorActor</code> as well. Cleaning up is A Good Thing (TM).</p>

<p><code>scala
monitor.stop()
</code></p>

<h2>Conclusion</h2>

<p>I hope this post has demonstrated the power of using RxScala's <code>Observable</code> as an abstraction of asynchronous events into a tangible data structure, and how using it through Schwatcher might simplify the process of building your own applications. If you have any questions or spot any mistakes, please feel free to leave a comment.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Schwatcher v0.1.3 Released]]></title>
    <link href="https://beachape.com/blog/2014/05/02/schwatcher-v0-dot-1-3-released/"/>
    <updated>2014-05-02T00:10:00+09:00</updated>
    <id>https://beachape.com/blog/2014/05/02/schwatcher-v0-dot-1-3-released</id>
    <content type="html"><![CDATA[<p>Version 0.1.3 of Schwatcher has been released.</p>

<p>This version brings a new Observable interface that exposes a "stream" (or channel) of <code>EventAtPath</code>s that can be composed. Using this interface, you no longer need to register callbacks - you simply register paths and get notifications for events on them either by subscribing to the Observable or by composing.</p>

<p>For more information on how to use Observables (especially how they compose in awesome ways), checkout the <a href="https://rx.codeplex.com/">Rx homepage</a></p>

<p>Example usage:</p>

<p>```scala
import com.beachape.filemanagement.RxMonitor
import java.io.{FileWriter, BufferedWriter}</p>

<p>import java.nio.file.Paths
import java.nio.file.StandardWatchEventKinds._</p>

<p>val monitor = RxMonitor()
val observable = monitor.observable</p>

<p>val subscription = observable.subscribe(
  onNext = { p => println(s"Something was modified in a file mufufu: $p")},
  onError = { t => println(t)},
  onCompleted = { () => println("Monitor has been shut down") }
)</p>

<p>val desktopFile = Paths get "/Users/lloyd/Desktop/test"</p>

<p>monitor.registerPath(ENTRY_MODIFY, desktopFile)</p>

<p>Thread.sleep(100)</p>

<p>//modify a monitored file
val writer = new BufferedWriter(new FileWriter(desktopFile.toFile))
writer.write("Theres text in here wee!!")
writer.close</p>

<p>// #=> Something was modified in a file mufufu: /Users/lloyd/Desktop/test</p>

<p>// stop monitoring
monitor.stop()</p>

<p>// #=> Monitor has been shut down
```</p>

<p>Relevant links:
- <a href="https://github.com/lloydmeta/schwatcher">Github page with how to install and example usage</a>
- <a href="https://github.com/lloydmeta/schwatcher/releases/tag/v0.1.3">Release page</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Schwatcher v0.1.0 Released]]></title>
    <link href="https://beachape.com/blog/2014/03/06/schwatcher-v0-dot-1-0-released/"/>
    <updated>2014-03-06T21:45:00+09:00</updated>
    <id>https://beachape.com/blog/2014/03/06/schwatcher-v0-dot-1-0-released</id>
    <content type="html"><![CDATA[<p>Version 0.1.0 of Schwatcher has been released.</p>

<p>Changes:</p>

<ul>
<li>Thanks to <a href="https://github.com/lloydmeta/schwatcher/pull/31">this pull request</a> from <a href="https://github.com/georgeOsdDev">georgeOsdDev</a>, modifiers can be used when registering callbacks</li>
<li>Upgrade to 2.3.0 of Akka</li>
</ul>


<p>Relevent info:</p>

<ul>
<li><a href="https://github.com/lloydmeta/schwatcher">Schwatcher Github repo</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
