<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Scala | BeachApe.]]></title>
  <link href="https://beachape.com/blog/categories/scala/atom.xml" rel="self"/>
  <link href="https://beachape.com/"/>
  <updated>2022-05-25T11:21:45+09:00</updated>
  <id>https://beachape.com/</id>
  <author>
    <name><![CDATA[Lloyd]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Rust: A Scala Engineer's Perspective]]></title>
    <link href="https://beachape.com/blog/2017/05/24/rust-from-scala/"/>
    <updated>2017-05-24T13:45:00+09:00</updated>
    <id>https://beachape.com/blog/2017/05/24/rust-from-scala</id>
    <content type="html"><![CDATA[<p>The 1st year anniversary of my first line of Rust code is coming up, and it’s getting for 5 years since I wrote my first line of Scala code. I thought it would be a good idea to summarise my Scala-tinted perspective of The Rust Experience <sup>TM</sup>, one year on.</p>

<p><span class='caption-wrapper center' style='width: 468px'><img class='caption' src='/images/rusty-spiral-staircase.jpg' width='450' height='450'><span class='caption-text'><a href="https://www.flickr.com/photos/janodecesare/2947948666/in/photolist-5uv1r9-56xXaX-4bDqR-SebcMQ-maN4i-7N23dr-7xSH4D-7rhtiD-pHDnby-62icy-pZNZN8-6cZ79B-5uv1BG-4cTa1X-Bwg7kq-7ahJE2-pb2Mcq-5DQf7p-o2NMu4-3VwpKy-nKqFJu-nJCpHS-aA3uj1-zi3AJf-9iUi3a-maMRE-maMUM-maMSb-5bpZDr-388hw8-maMSL-maN4Q-68jZPS-dWFLCF-aA3urd-4vjtb6-7B76ht-36fhwZ-maMYH-7jPJw9-avc8L2-4SQCD3-4C4njx-h46Ev-maN5y-DuqqVb-CpMJiF-maMY4-maN7f-Raj8Es">Rusty spiral staircase</a> by Jano De Cesare</span></span></p>

<p>This is <em>not</em> an objective language vs language comparison. I’ve written this post as part experience dump, part waymark for other Scala devs who are exploring or thinking of exploring Rust.</p>

<!-- more -->

<h2 class="no_toc" id="a-bit-about-me">A bit about me</h2>

<p>I’ve written <a href="https://github.com/lloydmeta?utf8=%E2%9C%93&amp;tab=repositories&amp;q=&amp;type=&amp;language=rust">a few Rust libraries/tools</a> as well as <a href="https://github.com/lloydmeta?utf8=%E2%9C%93&amp;tab=repositories&amp;q=&amp;type=&amp;language=scala">Scala ones</a>. For all intents and purposes, I’m a Scala engineer: I get paid to do it and it’s by far my strongest language. I’ve used Rust in a few of my side projects (libraries and smaller utilities).</p>

<p>On the Scala side, I’m the author of <a href="https://github.com/lloydmeta/enumeratum">enumeratum</a>, which brings flexible enums and <a href="https://github.com/lloydmeta/enumeratum#valueenum">value-enums</a> to Scala as a library. I’ve also dabbled in writing macro-based libraries to make things like <a href="https://github.com/lloydmeta/freast">Free Monads</a> and <a href="https://github.com/lloydmeta/diesel">Tagless Final</a> nicer to use.</p>

<p>On the Rust side, I’ve written <a href="https://github.com/lloydmeta/frunk">frunk</a>, a Rust functional programming toolbelt that is roughly a port of <a href="https://github.com/milessabin/shapeless">Shapeless</a> with a bit of <a href="https://github.com/typelevel/cats">cats</a>/<a href="https://github.com/scalaz/scalaz">scalaz</a> mixed in, which does some pretty funky things with the type system that I’ve blogged about (<a href="/blog/2017/03/04/labelledgeneric-in-rust-what-why-how/">1</a>, <a href="/blog/2017/03/12/gentle-intro-to-type-level-recursion-in-Rust-from-zero-to-frunk-hlist-sculpting/">2</a>, <a href="/blog/2017/04/12/boilerplate-free-struct-transforms-in-rust/">3</a>, <a href="/blog/2017/02/04/rust-generic-not-generics/">4</a>). I also wrote a Rust port of <a href="https://requestb.in">requestb.in</a> called <a href="https://github.com/lloydmeta/rusqbin">rusqbin</a> based on Hyper, and a small WIP async client for Microsoft Cognitive services called <a href="https://github.com/lloydmeta/cogs">cogs</a>.</p>

<h3 class="no_toc" id="forewarning">Forewarning</h3>

<ul>
  <li>I’m biased towards Scala and I’ve mostly gotten used to <a href="http://www.lihaoyi.com/post/WartsoftheScalaProgrammingLanguage.html">Scala’s warts</a>. That said, I make an effort to try to be as neutral as possible.</li>
  <li>When I talk about Rust, I mean Rust stable. This is because I only use Scala stable.</li>
  <li>Some of the stuff that I write about with regards to Rust might have changed by the time you read this. After all, there is an ongoing <a href="https://blog.rust-lang.org/2017/03/02/lang-ergonomics.html">ergonomics initiative</a></li>
</ul>

<h2 class="no_toc" id="overview">Overview</h2>
<ul id="markdown-toc">
  <li><a href="#things-im-happy-with">Things I’m happy with</a>    <ul>
      <li><a href="#batteries-included">Batteries included</a></li>
      <li><a href="#type-system">Type System</a></li>
      <li><a href="#macros">Macros</a></li>
      <li><a href="#compile-time-optimisations">Compile-time optimisations</a></li>
      <li><a href="#syntax">Syntax</a></li>
      <li><a href="#interoperability-with-c">Interoperability with C</a></li>
      <li><a href="#the-current-zeitgeist">The current Zeitgeist</a></li>
    </ul>
  </li>
  <li><a href="#things-ive-adjusted-to">Things I’ve adjusted to</a>    <ul>
      <li><a href="#semicolons">Semicolons</a></li>
      <li><a href="#ownership-model-stack-vs-heap">Ownership model: Stack vs heap</a></li>
    </ul>
  </li>
  <li><a href="#things-i-wish-were-different">Things I wish were different</a>    <ul>
      <li><a href="#async-io">Async IO</a></li>
      <li><a href="#strings">Strings</a></li>
      <li><a href="#cross-compiling">Cross compiling</a></li>
      <li><a href="#odd-headscratchers">Odd headscratchers</a></li>
      <li><a href="#gimme">Gimme</a></li>
    </ul>
  </li>
  <li><a href="#conclusion">Conclusion</a></li>
</ul>

<h2 id="things-im-happy-with">Things I’m happy with</h2>

<h3 id="batteries-included">Batteries included</h3>

<p>The dev-environment-setup experience with Rust is amazing. The Rust community has striven to make it super easy to <a href="https://doc.rust-lang.org/book/getting-started.html">get started with Rust</a> and it shows. Literally <a href="https://doc.rust-lang.org/book/getting-started.html#installing-rust">one shell command</a> will set everything you need up.</p>

<ul>
  <li><code>rustup</code> for managing your Rust toolbelts (different versions/channels of Rust)</li>
  <li><code>cargo</code> for managing your build and for publishing to crates.io, which includes, among other things:
    <ul>
      <li>A <a href="https://doc.rust-lang.org/book/testing.html"><code>test</code> subcommand</a> for running tests</li>
      <li>A <a href="https://doc.rust-lang.org/book/benchmark-tests.html"><code>bench</code> subcommand</a> for running benchmarks</li>
    </ul>
  </li>
  <li><code>rustfmt</code> for formatting your code (runs on cargo projects via <code>cargo fmt</code>)</li>
  <li><code>rustdoc</code> for generating beautiful <a href="https://api.rocket.rs/rocket/">documentation websites</a>.
    <ul>
      <li>This tool supports doc tests with zero additional configuration/setup (runs as part of <code>cargo test</code>)</li>
    </ul>
  </li>
</ul>

<p>Coming from Scala, having all of this set up with no fuss right out of the gate is a breath of fresh air and feels like a big win for productivity. I know there are reasons for Scala’s more <em>modular</em> approach, but I think it would be nice if <em>some</em> of this rubbed off on <del>Scala</del> other languages.</p>

<h4 class="no_toc" id="editoride"><strong>Editor/IDE</strong></h4>

<p>When I first started with Rust, I used IntelliJ and its Rust plugin, but later switched to <a href="https://code.visualstudio.com/">Microsoft Studio Code</a> with the <a href="https://github.com/editor-rs/vscode-rust">Rust plugin</a>, which interfaces very well with Rust Language Server (installable as a <a href="https://github.com/rust-lang-nursery/rls#step-3-install-the-rls">rustup toolchain component</a>). It feels very lightweight, and offers all the assistance I need.</p>

<h3 id="type-system">Type System</h3>

<p>If you lean more towards the functional programming paradigm side of Scala then you’ll probably love the following about Rust’s type system:</p>

<ul>
  <li>No inheritance for data types (there is a bottom type but it’s used much more sparingly)</li>
  <li>No universal equality</li>
  <li>No nulls</li>
  <li>Traits are basically Haskell typeclasses</li>
  <li>Many more primary types (instead of just <code>Int</code>, there are <code>i8</code>, <code>i16</code>, <code>i32</code>, <code>i64</code>, <code>isize</code>, as well as <code>u8</code>, <code>u16</code> … )</li>
</ul>

<p>Essentially Rust has a <em>lot</em> of the good things about Scala’s type system. One thing currently missing from Rust is first class support for higher-kinded types (HKT), which, to be honest, I don’t miss too much because:</p>

<ol>
  <li>There are ways to emulate it to an extent</li>
  <li>Rust’s ownership/memory model tends to push you towards thinking more granularly about your values/references, something which is perhaps in conflict with the kind of programming typically involving HKT-based abstractions.</li>
</ol>

<p>If this still sounds unacceptable, just know that you can get quite far in building reuseable abstractions using Rust’s traits + associated types, and BurnSushi’s <a href="https://github.com/BurntSushi/quickcheck">port of quickcheck</a> is available for writing and enforcing laws.</p>

<p>There are a few interesting things in the pipeline as well:</p>

<ol>
  <li><a href="https://github.com/rust-lang/rfcs/issues/324">Higher kinded polymorphism</a></li>
  <li><a href="https://github.com/rust-lang/rfcs/issues/1930">Pi (value) types</a></li>
</ol>

<p>Adding functionality by using Rust’s traits should be familiar territory if you’ve written typeclass-like stuff in Scala. In fact, Rust’s trait system feels a lot more similar to Haskell’s typeclass system than Scala’s, something which has its pros and cons (no scoping of implementations for a given type, for example). I’ve written an intro/guide to Rust’s trait system in <a href="/blog/2017/03/12/gentle-intro-to-type-level-recursion-in-Rust-from-zero-to-frunk-hlist-sculpting/">another post</a>.</p>

<h4 class="no_toc" id="type-inference"><strong>Type inference</strong></h4>

<p>Both Rust and Scala have local type inference, and overall, they work in pretty much the same way. In both of them, you need to write the types for your function parameters. In Scala, you can leave the return type off and have the compiler infer it for you, in Rust you can’t (if you leave it off, it is assumed to be <code>()</code>, unit).</p>

<h3 id="macros">Macros</h3>

<p>The <a href="https://doc.rust-lang.org/book/macros.html">Rust macro system</a>, while less powerful than Scala’s, is quite useful for keeping your code DRY and importantly, integrates really well with the rest of the language. It is in fact enabled and available out of the box without any additional dependencies/flags.</p>

<p>Compared with Scala’s macros, Rust’s macros feel like a very natural part of the language, and you’ll run into them quite often when reading/using Rust libraries. In Rust code bases, you’ll often see macros declared and used immediately for the purpose of code generation (e.g. deriving trait implementations for a list of numeric types, or for tuples up to N elements), something that Scala users have generally done “out-of-band” by <a href="http://www.scala-sbt.org/0.13/docs/Howto-Generating-Files.html">hooking into SBT</a> and using another templating or AST-based tool.</p>

<p>On the other hand, in Scala, the usual refrain is “don’t write macros if you don’t have to”. When I compare the approaches the two languages have taken, I feel that Scala may have been overambitious in terms of giving developers power, thus leading to deprecations of APIs that can’t be maintained due to complexity. Indeed, Scala’s metaprogramming toolkit is going through another reform with the migration to <a href="http://scalameta.org/">Scalameta</a>.</p>

<p>Because of its simplicity (the macros work based on a series of patterns), Rust’s macro API may feel limiting at first, but if you stick with it, you’ll likely find that you can accomplish more than what you initially thought. For example, the fact that you can build/restructure macro arguments recursively (!) and call the macro again (or even call another macro) is <a href="https://stackoverflow.com/a/40070907/1814775">a fairly powerful tool</a>.</p>

<p>Having said that, in addition to the legacy macro system, Rust will soon be getting <a href="https://github.com/rust-lang/rfcs/blob/master/text/1566-proc-macros.md">procedural macros</a>, which are more similar to what Scala devs are used to seeing. You can get a peek of what procedural macros are like by looking at <a href="https://doc.rust-lang.org/book/procedural-macros.html">custom derives</a>, which I’ve used to implement <a href="/blog/2017/03/04/labelledgeneric-in-rust-what-why-how/"><code>derive</code> for <code>LabelledGeneric</code> in Rust</a>.</p>

<h3 id="compile-time-optimisations">Compile-time optimisations</h3>

<p>I think it’s not news to anyone that Rust is fast and efficient. The <a href="https://www.rust-lang.org">home page of the official site</a> says it runs “blazingly fast” and features “zero-cost abstractions”, and the Rust-faithfuls loudly trumpted <a href="https://www.reddit.com/r/rust/comments/5vcrvb/rust_is_now_the_fastest_language_on_knucleotide/">Rust’s defeat of GCC-C in in k-nucleotide</a> a few months ago. Even if you don’t completely buy into the “faster than C” part,  it’s not a big jump to say that Rust performance is in the same ballpark as C, or at least, there is no reason for it not to be (yes, language and implementation are different, compilers make a difference, etc.).</p>

<p>I’m particularly impressed by the Rust compiler’s (though I’m not sure if it’s LLVM?) ability to compile abstractions away so that the operations they enable have zero overhead. As a personal anecdote, when I wrote <a href="https://github.com/lloydmeta/frunk#labelledgeneric">LabelledGeneric in frunk</a>, I expected there to be <em>some</em> performance difference between using that abstraction for conversions between structs versus writing the conversions by hand (using <code>From</code>). After all, there are non-negligible differences in the Shapeless version of it in Scala land (<a href="https://github.com/lloydmeta/caseclass-conversion-benches#results">benchmark code</a>):</p>

<p>```
// JMH benchmark results</p>

<p>[info] Benchmark                               Mode  Cnt     Score     Error  Units
[info] Benchmarks.from24FieldsManual           avgt   30    33.626 ±   1.032  ns/op
[info] Benchmarks.from24FieldsShapeless        avgt   30  4443.018 ± 101.612  ns/op
[info] Benchmarks.from25FieldsManual           avgt   30    33.066 ±   0.650  ns/op
[info] Benchmarks.from25FieldsShapeless        avgt   30  4859.432 ± 104.763  ns/op
```</p>

<p>To my surprise, Rust manages to compile frunk’s LabelledGeneric-based, non-trivial, multi-step, unoptimised (other than using the stack, no effort was spent) transform between structs into a zero-cost abstraction. That is, using LabelledGeneric for conversion adds <em>zero</em> overhead over writing the transform by hand (<a href="https://github.com/lloydmeta/frunk/blob/master/benches/labelled.rs">benchmark code</a>):</p>

<p>```
// Cargo benchmark results</p>

<p>test from<em>24fields_manual           … bench:         109 ns/iter (+/- 49)
test from</em>24fields_labelledgeneric  … bench:         104 ns/iter (+/- 24)
test from<em>25fields_manual           … bench:         129 ns/iter (+/- 9)
test from</em>25fields_labelledgeneric  … bench:         131 ns/iter (+/- 13)
```</p>

<p><img class="center" src="/images/mind-blown.gif" title="‘Mind Blown’" ></p>

<p><em>Note</em>: The Rust vs Scala <code>LabelledGeneric</code> benchmarks are not completely apples-to-apples (the Rust version needs to instantiate new source objects every run because of move semantics), but they illustrate the performance difference between LabelledGeneric-based vs handwritten conversion in the two languages.</p>

<h3 id="syntax">Syntax</h3>

<p>Overall, the Rust’s syntax is very similar to Scala’s. Sure, there are small adjustments here and there (<code>let</code> and <code>let mut</code> vs <code>var</code> and <code>val</code>, you’ll be using angle brackets instead of square ones, etc), but overall the languages feel very similar because they’re both C-like languages that are heavily inspired by ML.</p>

<p>Scala people will probably rejoice at things like the <a href="https://doc.rust-lang.org/book/enums.html"><code>enum</code></a> being available (coming soon to Scala via Dotty) as well as partial destructuring (e.g. assuming <code>struct Point { x: i32, y: 32}</code>, you can do <code>let Point { x, .. } = p;</code>).</p>

<p>There are a handful of things that you’ll miss just from muscle memory in the beginning, but are either implemented as libraries or are done slightly differently, such as lazy values (<a href="https://github.com/reem/rust-lazy">rust-lazy</a> or <a href="https://github.com/rust-lang-nursery/lazy-static.rs">lazy-static</a>) and methods such as Option’s <code>foreach</code> (try <code>if let Some(x) = myOption { /* use x here */ }</code> instead). Others are just plain missing, such as by-name parameters (not too big of a deal for me), <code>for</code>/<code>do</code> comprehensions, and keyword arguments (these last two hurt).</p>

<p>Oh, in Rust, types and traits are named the same way as in Scala, in CamelCase, but identifiers (bindings and methods) use snake_case, which I still find makes code look longer but isn’t a big problem. You’ll find <a href="https://aturon.github.io/style/naming.html">references</a> that can help if you are unsure and you’ll likely pick it up from reading library code anyways.</p>

<p>As with Swift, I haven’t been able to find conclusive evidence nor credit given to suggest that there was any influence from Scala on Rust …</p>

<h3 id="interoperability-with-c">Interoperability with C</h3>

<p>Rust makes working with C as smooth as possible while sticking to its mantra of keeping things safe. For reference take a look at the section in the Rust book that deals with <a href="https://doc.rust-lang.org/book/ffi.html">FFI</a>.</p>

<p>```rust
// Taken from the Rust book
#[link(name = “snappy”)]
extern {
    fn snappy_max_compressed_length(source_length: size_t) -&gt; size_t;
}</p>

<p>let x = unsafe { snappy_max_compressed_length(100) };
```</p>

<p>The syntax might look familiar to those who have played around with <a href="https://scala-native.readthedocs.io/en/latest/">Scala.Native</a>.</p>

<p>```scala
// Taken from Scala Native homepage
@extern object stdlib {
  def malloc(size: CSize): Ptr[Byte] = extern
}</p>

<p>val ptr = stdlib.malloc(32)
```</p>

<p>Since calling C-code can be unsafe (wrt memory, thread-safety), Rust requires you to wrap your C-calls in unsafe. If you wish to hide this from your users, you can wrap these calls in another function.</p>

<p><code>rust
// Taken from the Rust book
pub fn validate_compressed_buffer(src: &amp;[u8]) -&gt; bool {
    unsafe {
        snappy_validate_compressed_buffer(src.as_ptr(), src.len() as size_t) == 0
    }
}
</code></p>

<p>Calling Rust code from C is also <a href="https://doc.rust-lang.org/book/ffi.html#callbacks-from-c-code-to-rust-functions">very smooth</a>, something that Scala Native has yet to implement.</p>

<h3 id="the-current-zeitgeist">The current Zeitgeist</h3>

<p>The current “feel” of Rust, and its community (or communities, since libraries/frameworks can have their own) is very welcoming and helpful. It’s also very difficult to quantify so I’ll just list some observations:</p>

<ul>
  <li>Rust stable is only 2 years old and yet there is an official <a href="https://blog.rust-lang.org/2017/03/02/lang-ergonomics.html">ergonomics initiative</a> to reduce friction</li>
  <li>I’ve asked a hand full of questions on StackOverflow and have gotten prompt and helpful answers each time.</li>
  <li>Rust is the #1 “most loved” language in <a href="https://insights.stackoverflow.com/survey/2016#technology-most-loved-dreaded-and-wanted">StackOverflow’s 2017 survey</a></li>
  <li>Rust feels very community driven: its got a very lively <a href="https://github.com/rust-lang/rfcs/issues">RFC repo</a> and since I’ve started tinkering in it I’ve seen at least 3 RFCs make it into the language (type macros, custom derives, and <code>?</code> syntax for <code>Try</code>s).</li>
</ul>

<h2 id="things-ive-adjusted-to">Things I’ve adjusted to</h2>

<h3 id="semicolons">Semicolons</h3>

<p>In Scala, semicolons are optional and <em>almost</em> everything is an expression and therefore return values.</p>

<p>```scala
3 // returns 3</p>

<p>val x = 3 // assignment, returns unit</p>

<p>// certain things don’t return anything though, such as import
// statements, and blocks</p>

<p>import com.beachape._ // returns nothing
object Hello {} // returns nothing
```</p>

<p>In Rust, semicolons are non-optional and <a href="http://rustbyexample.com/expression.html">are of significance</a>. Statements that end with semicolons return <code>()</code> (unit) and those that do not get turned into expressions and thus return a value.</p>

<p>```rust
// taken from the Rust book</p>

<p>let x = 5u32; // this is a statement</p>

<p>let y = {
    let x_squared = x * x;
    let x_cube = x_squared * x;</p>

<pre><code>// This expression will be assigned to `y`
x_cube + x_squared + x };
</code></pre>

<p>let z = {
    // The semicolon suppresses this expression and <code>()</code> is assigned to <code>z</code>
    2 * x;
};
```</p>

<h3 id="ownership-model-stack-vs-heap">Ownership model: Stack vs heap</h3>

<p>Rust’s memory/ownership model is, to me, its main killer feature; it gives you tighter control over the way your program consumes memory while maintaining memory-safety, all without having to ship a garbage collector with the runtime. You get to decide whether to pass things by value or by reference as well as mutability of bindings (including when pattern matching).</p>

<p>There is also the matter of <em>where</em> things get allocated. In Scala (and perhaps with most JVM-based languages), there are a set of rules that decide whether or not something gets put on the stack or on the heap (and thus incur the future cost of garbage collection). In general, the only time something gets allocated on the stack are primitives that do not escape methods as fields of objects, and references to objects which themselves get allocated on the heap. There might be fun runtime tricks the runtime environment does, like escape analysis, but overall, you don’t get to choose.</p>

<p>In Rust, you can choose to allocate things on the heap by instantiating them inside (or transferring ownership of them to) data structures such as <code>Box</code>es or <code>Vec</code>s, etc. Or you can choose to work with plain values. You get to pick your abstraction based on the cost you want to pay for the features and guarantees they offer, such as safe multi-thread access (<a href="http://manishearth.github.io/blog/2015/05/27/wrapper-types-in-rust-choosing-your-guarantees/">this page</a> is a great reference point). Either way, Rust’s ownership system will, at compile time, make sure that you won’t get data races caused by, for instance, modifying naked values in different threads with no access control.</p>

<p>Scala’s doesn’t give its users the same level of control, so naturally there is some adjustment to be made. However, contrary to the experiences of some others, I didn’t find the ownership stuff <strong>too</strong> hard to understand and get used to. Having experience with Scala’s rich type system meant that the lifetime annotation stuff was quite easy to come to grips with. Maybe doing C and C++ in Comsci courses in university helped too.</p>

<ul>
  <li><strong>Note</strong>: If you’re a glass-half-full kind of person, I guess you can say that Rust <em>forces</em> you to take control rather than <em>gives</em> you control. It’s all a matter of perspective …</li>
  <li><strong>Note 2</strong>: If you find yourself doing lots of <code>.clone()</code>s to get the compiler off your back, maybe you’re doing something not quite right.</li>
</ul>

<h4 class="no_toc" id="mutability"><strong>Mutability</strong></h4>

<p>Mutability deserves to be mentioned separately. If you’re coming from years of Scala (or pretty much any other language that stresses immutability and referential transparency as the road to enlightenment), writing your first <code>let mut</code> or <code>&amp;mut self</code> can feel dirty.</p>

<p>It took me a while to get used to the idea, but hey, when in Rome, right? If it helps, remember that Rust is focused on speed and efficiency through (near, or actually) zero-cost abstractions and that, thanks to its strict ownership model, data races due to mutability are not a problem.</p>

<h2 id="things-i-wish-were-different">Things I wish were different</h2>

<h3 id="async-io">Async IO</h3>

<p>In Scala, most frameworks that deal with any sort of IO have embraced non-blocking IO by utilising some kind of wrapper data type, such as <code>Future[A]</code>, <code>Task[A]</code>, or <code>IO[A]</code> (usually a Monad), that separates the description of your program from its execution, and identify, by type, the effect of talking with the scary and dirty outside world. This allows you to not block the executing thread when waiting for stuff to happen (such as data to come back) by choosing a suitable execution strategy.</p>

<p>In Rust land, most of the widely-used libraries that I’ve seen, such as the Redis client, and and Hyper (and all the various things built on it, such as Rusoto, Rocket, etc) are all blocking. While this works okay for stuff like single-user utilities, this is suboptimal for applications that are IO heavy and need to serve a large number of concurrent users because your application’s threads can get tied up just waiting for data, leaving it unable to serve other requests. Or, you end up with potentially huge thread pools (à la old school Java Servlet apps..), which seems to go against Rust’s spirit of efficiency.</p>

<p>Having said that I know that advances are being made in this area:</p>

<ul>
  <li><a href="https://tokio.rs/">Tokio</a>, “tokenised IO”, an async IO framework that exposes a Future-based API is making lots of progress. Looks production-ready.</li>
  <li><a href="https://github.com/hyperium/hyper">Hyper</a>, the defacto HTTP client server framework, is going to hit 0.11 soon, which will bring with it a Futures-based API based on Tokio. This will likely (I hope) cascade down to any libs based on Hyper.</li>
</ul>

<p>Also, as of now, it’s painful to transform and return Futures from functions because every transformation causes the concrete type of your object to get chained and tagged with an arbitrary closure type. Since writing the result type is non-optional in Rust, the current solution is to declare your return type as <code>Box&lt;Future&lt;A&gt;&gt;</code>, but it’s less efficient at runtime because boxed <a href="https://doc.rust-lang.org/book/trait-objects.html">trait objects</a> necessitate dynamic dispatch and heap allocation. Hopefully soon “impl Trait” will be released to address this issue (<a href="https://github.com/rust-lang/rust/issues/34511">tracking RFC</a>)</p>

<h3 id="strings">Strings</h3>

<p>In Rust there are a number of ways to represent Strings. Here are a few:</p>

<ul>
  <li><code>String</code> runtime string value, with its contents allocated on the heap</li>
  <li><code>&amp;'a str</code> string with a lifetime
    <ul>
      <li><code>&amp;' static str</code> string with static lifetime (baked into your binary)</li>
    </ul>
  </li>
  <li><code>Vec&lt;u8&gt;</code></li>
</ul>

<p>While I’ve mostly gotten used to this by now and understand the purpose of having each one, I hope the ergonomics initiative can make this situation better to understand, since strings are so ubiquitous. How? I have no idea..maybe I’m just ranting.</p>

<h3 id="cross-compiling">Cross compiling</h3>

<p>Obviously, Scala devs are used to compiling once and running the same binaries everywhere thanks to the JVM (mostly :p). While I don’t expect the same for Rust because it compiles to native machine code, I do wish the cross-compilation tools were better out of the box (for example, like <a href="https://dave.cheney.net/2015/08/22/cross-compilation-with-go-1-5">it is in Golang</a>).</p>

<p>At the moment, depending on the target platform, cross-compilation for Rust is a bit involved and there are several options:</p>

<ol>
  <li>Adding a target toolchain via Rustup and possibly installing some more packages specifically for your target platform (as in <a href="https://hackernoon.com/compiling-rust-for-the-raspberry-pi-49fdcd7df658">this guide</a>)</li>
  <li>Using a pre-built Docker container that holds all the settings/environment variables/installations needed to compile to your target platform (see <a href="https://github.com/Ragnaroek/rust-on-raspberry-docker">rust-on-raspberry-docker</a>)</li>
  <li>Using the <a href="https://github.com/japaric/cross"><code>cross</code></a>, cargo tool that seems like it automates 2.</li>
</ol>

<p>My use case is building for my Raspberry Pi and I’ve only tried the first 2, but that last one looks to be the winner here and it would be awesome to see something like that included by default as part of rustup or cargo.</p>

<h3 id="odd-headscratchers">Odd headscratchers</h3>

<p>Just a few things I still don’t quite get:</p>

<h4 class="no_toc" id="do-we-actually-need-ref"><strong>Do we actually need <code>ref</code>?</strong></h4>

<p>In my opinion, <code>ref</code> is unnecessarily confusing. From what I can tell, it’s mostly used for binding pointers during pattern matching</p>

<p><code>rust
match some_int {
  // Why not Some(&amp; s) =&gt; ... ???
  Some(ref s) =&gt; println!("{}",s),
  None =&gt; unreachable!()
}
</code></p>

<h4 class="no_toc" id="mut"><strong><code>&amp;mut</code></strong></h4>

<p>When handing out references of something bound with let mut, why do i need to do <code>&amp;mut</code> instead of just <code>&amp;</code> ?</p>

<p>```rust
// This uses mut for no reason other than to prove a point.
fn non_empty(s: &amp;mut String) -&gt; bool { s.len() &gt; 0 }</p>

<p>let mut string = “hello”.to_string();
hello(&amp;mut string); // why can’t this just be hello(&amp; string) ??
```</p>

<h4 class="no_toc" id="scoping-of-lifetimes-with-braces"><strong>Scoping of lifetimes with braces</strong></h4>

<p>I somehow managed to code my way into a deadlock when using <code>RWLock</code> because the lifetime-scoping behaviour of <code>{}</code> braces when used with pattern matching is, in my opinion, non-intuitive. If you’re interested, more about it in <a href="https://github.com/rust-lang/rust/issues/37612">this issue</a>.</p>

<h3 id="gimme">Gimme</h3>

<p>I know these things are in the pipeline but I wish they were in Rust yesterday:</p>

<ol>
  <li>Higher kinded types</li>
  <li>“Specialisation”, aka finding the most specific implementation of a traits according to the type of value at the call site. Right now, if you implement a Rust trait <code>for A</code>, then it clashes with every other implementation you write. Specialisation should remedy that (<a href="https://github.com/rust-lang/rust/issues/31844">tracking RFC</a>)</li>
  <li>A REPL. There’s <a href="https://github.com/murarth/rusti">Rusti</a> but I think Rust is missing a trick by not supplying one out-of-the-box, especially when it’s got such a strong dev-env-setup game.</li>
  <li>Some kind of <code>do</code> or <code>for</code> comprehension for working with container types (there are libs out there but built-in would be nice)</li>
</ol>

<h2 id="conclusion">Conclusion</h2>

<p>That concludes my take on what it’s like to use Rust, from a Scala dev’s perspective, one year on, in 2017. Overall I’m very happy that the me a year ago decided to look into Rust. It’s been a fun and exciting ride: for a while it felt like every few months I was getting new toys that I could immediately use: type macros and custom derives were game changers because they made it ergonomic to write <a href="https://beachape.com/frunk/frunk/macro.Hlist.html">Hlist types</a> by hand, and made <a href="https://beachape.com/frunk/frunk_core/generic/trait.Generic.html">Generic</a>/<a href="https://beachape.com/frunk/frunk_core/labelled/trait.LabelledGeneric.html">LabelledGeneric</a> practical, respectively.</p>

<p>Overall, I believe there are a lot of things in Rust for Scala engineers to like. The community is friendly and diverse so you can easily find a library that interests you to get involved in (shameless plug: contributions to <a href="https://github.com/lloydmeta/frunk">frunk</a> are always welcome). Or, you can do your own side project and write a small system utility or program a microcontroller; online resources are very easy to find. In any case, with Rust, you really can’t say it’s hard to get started !</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Enumeratum 1.4: ValueEnums + Circe]]></title>
    <link href="https://beachape.com/blog/2016/04/16/enumeratum-1-dot-4-valueenums-plus-circe/"/>
    <updated>2016-04-16T16:25:00+09:00</updated>
    <id>https://beachape.com/blog/2016/04/16/enumeratum-1-dot-4-valueenums-plus-circe</id>
    <content type="html"><![CDATA[<p>It’s been a while since the last major release of <a href="https://github.com/lloydmeta/enumeratum">Enumeratum</a>, and in 1.4.0, minor changes include Play 2.5 support, integration library version bumps, and small internal refactorings. More excitingly though, the latest version adds support for a new kind of enumeration, <code>ValueEnum</code>, as well as an integration with the <a href="https://github.com/travisbrown/circe">Circe JSON library</a>.</p>

<p>Points of interest:</p>

<ul>
  <li>Unlike other value enum implementations, Enumeration’s value enums perform uniqueness checks at compile time to make sure you have unique values across your enum members.</li>
  <li>Circe integration allows you to send and receive JSON data between your front end and your server using the same code</li>
</ul>

<p><img class="center /images/abc-123.gif  400 400  ‘Enumeratum: Enums as easy as ABC" src="<em>and</em>" width="123"></p>

<!-- more -->

<p>The <a href="https://github.com/lloydmeta/enumeratum/releases/tag/v1.4.0">1.4.0 release page</a> on Github has a more detailed list of changes, but we’ll specifically go through:</p>

<ol>
  <li><a href="#valueenums">ValueEnums</a></li>
  <li><a href="#circe-integration">Circe Integration</a></li>
</ol>

<h2 id="valueenums">ValueEnums</h2>

<p>What is a <code>ValueEnum</code>? It’s an enum that represents a primitive value  (e.g. <code>Int</code>, <code>Long</code>, <code>Short</code>) instead of a <code>String</code>. I may have just made up the term, but it doesn’t matter as long as you know what I mean.</p>

<p>```scala</p>

<p>// Have something like
object ContentType {
  case object Text(1)
  case object Image(3)
}</p>

<p>// Want to do
assert(ContentType.withValue(3) == ContentType.Image)
```</p>

<p>This may sound mundane, since you can already build something like this yourself with the standard library’s <code>Enumeration</code> (or  previous versions of Enumeratum ), but sometimes the most straightforward solutions are suboptimal.</p>

<h3 id="the-trouble-with-enumeration">The trouble with <code>Enumeration</code></h3>

<p>The standard lib’s <code>Enumeration</code> comes with the notion of a customisable <code>id: Int</code> on each member, which is a great starting point for implementing numbers-based enumerations.</p>

<p>```scala
/**
  * This is an anti-example to show what can go wrong.
  *
  * Do not use this
  */
object Things extends Enumeration {
  val First = Value(1)
  val Second = Value(2)
  val Third = Value(3)
  val Fourth = Value(3) // not enough coffeeeeee</p>

<p>def withValueOpt(i: Int): Option[Things.Value] = values.find(_.id == i)
}</p>

<p>/*
 *  The above Enumeration will compile. Fine, but imagine now your app is deployed
 *  and somewhere else in your code you have to actually use your enum.
 */</p>

<p>Things.First // =&gt; java.lang.AssertionError: assertion failed: Duplicate id: 3</p>

<p>// If at first you don’t succeed???
Things.First // =&gt; java.lang.NoClassDefFoundError: Could not initialize class Things$
// newp
```</p>

<p>This funny behaviour is caused by the fact that <code>Enumeration#Value</code>s (<code>First</code>, <code>Second</code>, <code>Third</code>, <code>Fourth</code>) are not checked for unique ids at compile time, and are instantiated when their outer <code>Enumeration</code> object is lazily instantiated.  When a <code>Value</code> is instantiated, its <code>id</code> is stuffed into a <code>HashMap[Int, Value]</code> after an assertion check that the id does not already exist in the map.</p>

<p>What has happend in the above example is the enumeration code compiles, but when we call <code>Things.First</code>, <code>object Things</code> gets instantiated, and throws an assertion error when <code>val Fourth</code> is being instantiated with an id of 3, which has already been assigned to <code>Third</code> and thus is already in the aforementioned <code>HashMap</code>.  This prevents the singleton <code>Things</code> from getting instantiated, and the next time you try to use it, Scala will throw a <code>NoClassDefFoundError</code>.</p>

<p>One way to work around this is to write tests for every such <code>Enumeration</code> to make sure that no one working in the code base has fat-fingered any ids. I’m a big proponent of writing tests, but tests are also code and come with a maintenance and cognitive cost, so I would prefer not having to write tests to make sure my simple value enums can be safely initialised.</p>

<p>This kind of problem is not limited to <code>Enumeration</code>: careless implementation of something similar may result in arguably freakier outcomes such as silent failures (2 members with the same value but only one of the members can be retrieved by value).</p>

<h3 id="valueenum"><code>ValueEnum</code></h3>

<p>In version 1.4.0 of Enumeratum, we’ve introduced 3 pairs of traits: <code>IntEnum</code> and <code>IntEnumEntry</code>, <code>LongEnum</code> and <code>LongEnumEntry</code>, and <code>ShortEnum</code> and <code>ShortEnumEntry</code>.  As their names suggest, these are value enum traits that allow you to create enums that are backed by <code>Int</code>, <code>Long</code> and <code>Short</code> respectively.  Each pair extends <code>ValueEnum</code> and <code>ValueEnumEntry</code>. Note that this class hierarchy is a bit extensive for now, and it may be more streamlined in the future.</p>

<p>This is an example of how you would create an <code>Long</code> based value enum with Play integration (JSON readers and writers, Query string binders, Path binders, Form formatters, etc):</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>ContentType value enum with full Play integration (ContentType.scala)</span> <a href='/downloads/code/scala/ContentType.scala'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">import</span> <span class="nn">enumeratum.values._</span>
</span><span class='line'>
</span><span class='line'><span class="k">sealed</span> <span class="k">abstract</span> <span class="k">class</span> <span class="nc">ContentType</span><span class="o">(</span><span class="k">val</span> <span class="n">value</span><span class="k">:</span> <span class="kt">Long</span><span class="o">,</span> <span class="n">name</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="k">extends</span> <span class="nc">LongEnumEntry</span>
</span><span class='line'>
</span><span class='line'><span class="k">case</span> <span class="k">object</span> <span class="nc">ContentType</span> <span class="k">extends</span> <span class="nc">LongPlayEnum</span><span class="o">[</span><span class="kt">ContentType</span><span class="o">]</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">val</span> <span class="n">values</span> <span class="k">=</span> <span class="n">findValues</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">case</span> <span class="k">object</span> <span class="nc">Text</span> <span class="k">extends</span> <span class="nc">ContentType</span><span class="o">(</span><span class="n">value</span> <span class="k">=</span> <span class="mi">1L</span><span class="o">,</span> <span class="n">name</span> <span class="k">=</span> <span class="s">&quot;text&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="k">case</span> <span class="k">object</span> <span class="nc">Image</span> <span class="k">extends</span> <span class="nc">ContentType</span><span class="o">(</span><span class="n">value</span> <span class="k">=</span> <span class="mi">2L</span><span class="o">,</span> <span class="n">name</span> <span class="k">=</span> <span class="s">&quot;image&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="k">case</span> <span class="k">object</span> <span class="nc">Video</span> <span class="k">extends</span> <span class="nc">ContentType</span><span class="o">(</span><span class="n">value</span> <span class="k">=</span> <span class="mi">3L</span><span class="o">,</span> <span class="n">name</span> <span class="k">=</span> <span class="s">&quot;video&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="k">case</span> <span class="k">object</span> <span class="nc">Audio</span> <span class="k">extends</span> <span class="nc">ContentType</span><span class="o">(</span><span class="n">value</span> <span class="k">=</span> <span class="mi">4L</span><span class="o">,</span> <span class="n">name</span> <span class="k">=</span> <span class="s">&quot;audio&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="cm">/* case object Sticker extends ContentType(value = 4L, name = &quot;audio&quot;)</span>
</span><span class='line'><span class="cm">  *   =&gt; Fails at compile time because 4L is already used with the following error</span>
</span><span class='line'><span class="cm">  *   It does not look like you have unique values. Found the following values correspond to more than one members: Map(4 -&gt; List(object Audio, object Sticker))</span>
</span><span class='line'><span class="cm">  */</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">assert</span><span class="o">(</span><span class="nc">ContentType</span><span class="o">.</span><span class="n">withValue</span><span class="o">(</span><span class="mi">1</span><span class="o">)</span> <span class="o">==</span> <span class="nc">ContentType</span><span class="o">.</span><span class="nc">Text</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="nc">ContentType</span><span class="o">.</span><span class="n">withValue</span><span class="o">(</span><span class="mi">10</span><span class="o">)</span> <span class="c1">// =&gt; java.util.NoSuchElementException:</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Use with Play-JSON</span>
</span><span class='line'><span class="k">import</span> <span class="nn">play.api.libs.json.</span><span class="o">{</span> <span class="nc">JsNumber</span><span class="o">,</span> <span class="nc">JsString</span><span class="o">,</span> <span class="nc">Json</span> <span class="k">=&gt;</span> <span class="nc">PlayJson</span> <span class="o">}</span>
</span><span class='line'><span class="nc">ContentType</span><span class="o">.</span><span class="n">values</span><span class="o">.</span><span class="n">foreach</span> <span class="o">{</span> <span class="n">item</span> <span class="k">=&gt;</span>
</span><span class='line'>    <span class="n">assert</span><span class="o">(</span><span class="nc">PlayJson</span><span class="o">.</span><span class="n">toJson</span><span class="o">(</span><span class="n">item</span><span class="o">)</span> <span class="o">==</span> <span class="nc">JsNumber</span><span class="o">(</span><span class="n">item</span><span class="o">.</span><span class="n">value</span><span class="o">))</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The <code>findValues</code> method of <code>ValueEnum</code>s works similarly to the <code>findValues</code> method of Enumeratum’s older <code>Enum</code>, except the macro will ensure that there is a literal <code>value</code> member or constructor for each enum entry and fails the compilation if more than one member shares the same value.</p>

<p>As the above example demonstrates, there are Play (and standalone Play-JSON) integrations available for this new kind of enum, as well as for UPickle, and Circe.</p>

<p>~~Note that this new feature is not yet available in Scala 2.10 and in the REPL due to Macro expansion differences~~ (update: now works in the REPL <em>and</em> is available for 2.10.x!).</p>

<h2 id="circe-integration">Circe integration</h2>

<p>Enumeratum 1.4.0 also adds support for serialising/deserialising to JSON using <a href="https://github.com/travisbrown/circe">Circe</a>, an up-and-coming performant and feature-filled JSON library published for both JVM <em>and</em> ScalaJS.</p>

<p>This is how you would use Circe with Enumeratum’s <code>Enum</code> (integrations for <code>ValueEnum</code> also exist)</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>ShirtSize Enum with Circe integration (ShirtSize.scala)</span> <a href='/downloads/code/scala/ShirtSize.scala'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">import</span> <span class="nn">enumeratum._</span>
</span><span class='line'>
</span><span class='line'><span class="k">sealed</span> <span class="k">trait</span> <span class="nc">ShirtSize</span> <span class="k">extends</span> <span class="nc">EnumEntry</span>
</span><span class='line'>
</span><span class='line'><span class="k">case</span> <span class="k">object</span> <span class="nc">ShirtSize</span> <span class="k">extends</span> <span class="nc">CirceEnum</span><span class="o">[</span><span class="kt">ShirtSize</span><span class="o">]</span> <span class="k">with</span> <span class="nc">Enum</span><span class="o">[</span><span class="kt">ShirtSize</span><span class="o">]</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">case</span> <span class="k">object</span> <span class="nc">Small</span> <span class="k">extends</span> <span class="nc">ShirtSize</span>
</span><span class='line'>  <span class="k">case</span> <span class="k">object</span> <span class="nc">Medium</span> <span class="k">extends</span> <span class="nc">ShirtSize</span>
</span><span class='line'>  <span class="k">case</span> <span class="k">object</span> <span class="nc">Large</span> <span class="k">extends</span> <span class="nc">ShirtSize</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">val</span> <span class="n">values</span> <span class="k">=</span> <span class="n">findValues</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">import</span> <span class="nn">io.circe.Json</span>
</span><span class='line'><span class="k">import</span> <span class="nn">io.circe.syntax._</span>
</span><span class='line'>
</span><span class='line'><span class="nc">ShirtSize</span><span class="o">.</span><span class="n">values</span><span class="o">.</span><span class="n">foreach</span> <span class="o">{</span> <span class="n">size</span> <span class="k">=&gt;</span>
</span><span class='line'>    <span class="n">assert</span><span class="o">(</span><span class="n">size</span><span class="o">.</span><span class="n">asJson</span> <span class="o">==</span> <span class="nc">Json</span><span class="o">.</span><span class="n">fromString</span><span class="o">(</span><span class="n">size</span><span class="o">.</span><span class="n">entryName</span><span class="o">))</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2 id="conclusion">Conclusion</h2>

<p>Hopefully, Enumeratum’s new <code>ValueEnum</code> implementations will make development easier and safer for engineers out there who need to use value enumerations.  Since uniqueness is checked at compile-time, you can save yourself the trouble of writing a bunch of pedantic tests.  Circe is a promising JSON library that was really easy to integrate with and I look forward to taking advantage of the fact that it works on both server side and on the front end.</p>

<p>As always, if you have any problems, questions, suggestions, or better yet, PRs, please do not hesitate to get in touch on Github.</p>

<h2 id="links">Links</h2>

<ul>
  <li><a href="https://github.com/lloydmeta/enumeratum">Enumeratum on Github</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Scala and OpenCV Ep 2: Akka Face Detector]]></title>
    <link href="https://beachape.com/blog/2016/03/14/scala-and-opencv-ep-2-akka-face-detector/"/>
    <updated>2016-03-14T17:24:00+09:00</updated>
    <id>https://beachape.com/blog/2016/03/14/scala-and-opencv-ep-2-akka-face-detector</id>
    <content type="html"><![CDATA[<p>In <a href="/blog/2016/03/08/scala-and-opencv-ep-1-akka-webcam/">Episode 1</a> of this series on Scala and computer vision, we created a basic Akka-Streams-powered webcam feed app.  To bring it to the next level, we will dig a little deeper into the OpenCV toolset and bring in feature detection as well as video stream editing.</p>

<p><img class="center" src="/images/ape-detected.png" width="400" height="400" title="‘Beachape face detected’" ></p>

<p>We will build on the foundations from the <a href="/blog/2016/03/08/scala-and-opencv-ep-1-akka-webcam/">previous post</a> and continue with the usage of Akka Streams, modeling our application as a series of small transformations that are run asynchronously, with backpressure handled automatically.</p>

<!-- more -->

<h3 id="flow-chart">Flow chart</h3>

<p>Previously, our app could be represented by a somewhat trivial <a href="/blog/2016/03/08/scala-and-opencv-ep-1-akka-webcam/#flow-chart">flow chart</a> that nonetheless had all the elements of a useful Akka stream: a <code>Source</code>, multiple transformations, and controlled side-effecting.</p>

<p>To build our face detector, we will add the following:</p>

<ol>
  <li><strong>Conversion to grey scale</strong>: Many image analysis tools need to be run on greyscale images, both for simplicity and efficiency.</li>
  <li><strong>Facial features detector</strong>: We will make use of OpenCV’s Haar Cascade feature detection API to detect and identify faces in our video feed.</li>
  <li><strong>Video editing</strong>: We want to draw rectangles around the faces that have been identified into the image.</li>
</ol>

<p>Our updated flow chart is as follows (new transformations are highlighted by a light green rectangle):</p>

<div id="flow-chart"><img class="center" src="/images/opencv-flowchart-part-2.png" title="'Simple wecam feed flow'" ></div>

<h3 id="greyscale">Greyscale</h3>

<p>To convert a given <code>Mat</code> to a greyscale <code>Mat</code>, we can make use of the OpenCV method <a href="http://docs.opencv.org/2.4/modules/imgproc/doc/miscellaneous_transformations.html"><code>cvtColor</code></a>. The only slight niggle is that the method isn’t idempotent: if you try to convert a greyscale image to greyscale, the method will throw. No matter, we can try handle that scenario ourselves by detecting the number of channels in the matrix.</p>

<p><code>scala
def toGreyScale(mat: Mat): Mat = {
  if (mat.channels() == 1) {
    mat // just hand back the matrix as is; it is already grey
  } else {
    // allocate a new Matrix with the same dimensions
    val greyMat = {
      val (rows, cols) = (mat.rows(), mat.cols())
      new Mat(rows, cols, CV_8U)
    }
    opencv_imgproc.cvtColor(mat, greyMat, COLOR_BGR2GRAY, 1)
    greyMat
  }
}
</code></p>

<p>However, since we want to pass the original <em>colour</em> image and the new greyscale image down the pipeline, we’ll make things a bit easier for ourselves by defining a simple <code>WithGreyscale</code> case class to hold both:</p>

<p>```scala
object WithGrey {</p>

<p>/**
   * Simple transformer method that produces a [[WithGrey]]
   */
  def build(orig: Mat): WithGrey = {
    val grey = toGreyScale(orig)
    WithGrey(orig = orig, grey = grey)
  }</p>

<p>// toGreyScale is in here too
}</p>

<p>/**
 * Original Matrix with a Grey image. Useful because almost all analysis processing requires a greyscale image instead of
 * a colour image.
 *
 * The constructor is private to make sure we don’t mix up the two references
 *
 * Passing [[WithGrey]] images along with the original saves us from having to process to grey scale over and over again.
 */
final case class WithGrey private (orig: Mat, grey: Mat)
```</p>

<h3 id="face-detection">Face detection</h3>

<p>To find faces in the images in our video feed, we will make use of Haar feature-based cascade classifiers, which are supported directly by OpenCV.  Haar Cascade classifers define how to look at an image and quickly identify any areas in it that are of interest to us.  A given classifier definition will usually contain multiple stages, so that a region is considered to test positive if all features in all stages of the definition return positive (thus <em>cascade</em>).</p>

<p>In actual usage, this relies on careful training and tuning of classifier defintions, as well as a combination of clever mathematics and pragmatic optimisation for detection.  I will not cover exactly how they work in this tutorial (my understanding is dubious and there is a wealth of information online about them), but the following are a couple links that really helped me understand the theory behind them and how they work in practice:</p>

<ol>
  <li><a href="http://docs.opencv.org/3.1.0/d7/d8b/tutorial_py_face_detection.html#gsc.tab=0">OpenCV documentation on using Haar Cascades for face detection</a></li>
  <li><a href="https://www.youtube.com/watch?v=sWTvK72-SPU">Youtube video covering Haar Cascades with a really good explanation of summed area tables</a></li>
</ol>

<p>OpenCV’s Haar Classifier API (or perhaps JavaCV’s wrapping of it) is fairly straight forward and boils down to:</p>

<ol>
  <li>Instantiating a <code>CascadeClassifier</code>, passing in a path to a classifier definition (you can find some <a href="https://github.com/Itseez/opencv/tree/master/data/haarcascades">here</a>) as a constructor argument</li>
  <li>Instantiating an instance of <code>RectVector</code>, which is aptly named because it is a wrapper for a native vector of rectangles.</li>
  <li>Pass the allocated instance of <code>RectVector</code> to the <code>CascadeClassifier</code>’s detectMultiScale along with a greyscale image and some other options (yes, OpenCV will mutate the <code>RectVector</code> you pass in by adding in <code>Rect</code>s)</li>
</ol>

<p>In our implementation of a face detector, we’ll wrap a few raw (but aliased) primitives that serve as option flags in OpenCV, just for our own sanity.  We’ll also create a delegator class that  has a <code>detect(withGrey: WithGrey): (WithGrey, Seq[Face])</code> method and wraps the classifier to hold constant values for the classifier options because for our purposes, those won’t be changing on the fly.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Tuple-like class for holding width and height in pixels (Dimensions.scala)</span> <a href='/downloads/code/scala/Dimensions.scala'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Tuple-like class for holding width and height in pixels</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="k">case</span> <span class="k">class</span> <span class="nc">Dimensions</span><span class="o">(</span><span class="n">width</span><span class="k">:</span> <span class="kt">Int</span><span class="o">,</span> <span class="n">height</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Nothing face-specific in this class per say; it can hold ids and Rects for any detected object (Face.scala)</span> <a href='/downloads/code/scala/Face.scala'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm">  * Holds an id and an OpenCV Rect defining the corners of a rectangle.</span>
</span><span class='line'><span class="cm">  *</span>
</span><span class='line'><span class="cm">  * There is nothing *face* specific in this class per say; it can hold ids and Rects for any detected</span>
</span><span class='line'><span class="cm">  * object</span>
</span><span class='line'><span class="cm">  */</span>
</span><span class='line'><span class="k">case</span> <span class="k">class</span> <span class="nc">Face</span><span class="o">(</span><span class="n">id</span><span class="k">:</span> <span class="kt">Long</span><span class="o">,</span> <span class="n">faceRect</span><span class="k">:</span> <span class="kt">Rect</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Haar classifier option wrapper class (HaarDetectorFlag.scala)</span> <a href='/downloads/code/scala/HaarDetectorFlag.scala'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">sealed</span> <span class="k">abstract</span> <span class="k">class</span> <span class="nc">HaarDetectorFlag</span><span class="o">(</span><span class="k">val</span> <span class="n">flag</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">case</span> <span class="k">object</span> <span class="nc">HaarDetectorFlag</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">case</span> <span class="k">object</span> <span class="nc">DoCannyPruning</span> <span class="k">extends</span> <span class="nc">HaarDetectorFlag</span><span class="o">(</span><span class="nc">CV_HAAR_DO_CANNY_PRUNING</span><span class="o">)</span>
</span><span class='line'>  <span class="k">case</span> <span class="k">object</span> <span class="nc">ScaleImage</span> <span class="k">extends</span> <span class="nc">HaarDetectorFlag</span><span class="o">(</span><span class="nc">CV_HAAR_SCALE_IMAGE</span><span class="o">)</span>
</span><span class='line'>  <span class="k">case</span> <span class="k">object</span> <span class="nc">FindBiggestObject</span> <span class="k">extends</span> <span class="nc">HaarDetectorFlag</span><span class="o">(</span><span class="nc">CV_HAAR_FIND_BIGGEST_OBJECT</span><span class="o">)</span>
</span><span class='line'>  <span class="k">case</span> <span class="k">object</span> <span class="nc">DoRoughSearch</span> <span class="k">extends</span> <span class="nc">HaarDetectorFlag</span><span class="o">(</span><span class="nc">CV_HAAR_DO_ROUGH_SEARCH</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Face detector class that holds a Haar classifier (FaceDetector.scala)</span> <a href='/downloads/code/scala/FaceDetector.scala'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">object</span> <span class="nc">FaceDetector</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">   * Builds a FaceDetector with the default Haar Cascade classifier in the resource directory</span>
</span><span class='line'><span class="cm">   */</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">defaultCascadeFile</span><span class="o">(</span>
</span><span class='line'>    <span class="n">dimensions</span><span class="k">:</span> <span class="kt">Dimensions</span><span class="o">,</span>
</span><span class='line'>    <span class="n">scaleFactor</span><span class="k">:</span> <span class="kt">Double</span> <span class="o">=</span> <span class="mf">1.3</span><span class="o">,</span>
</span><span class='line'>    <span class="n">minNeighbours</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="mi">3</span><span class="o">,</span>
</span><span class='line'>    <span class="n">detectorFlag</span><span class="k">:</span> <span class="kt">HaarDetectorFlag</span> <span class="o">=</span> <span class="nc">HaarDetectorFlag</span><span class="o">.</span><span class="nc">DoCannyPruning</span><span class="o">,</span>
</span><span class='line'>    <span class="n">minSize</span><span class="k">:</span> <span class="kt">Dimensions</span> <span class="o">=</span> <span class="nc">Dimensions</span><span class="o">(</span><span class="n">width</span> <span class="k">=</span> <span class="mi">30</span><span class="o">,</span> <span class="n">height</span> <span class="k">=</span> <span class="mi">30</span><span class="o">),</span>
</span><span class='line'>    <span class="n">maxSize</span><span class="k">:</span> <span class="kt">Option</span><span class="o">[</span><span class="kt">Dimensions</span><span class="o">]</span> <span class="k">=</span> <span class="nc">None</span>
</span><span class='line'>  <span class="o">)</span><span class="k">:</span> <span class="kt">FaceDetector</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">classLoader</span> <span class="k">=</span> <span class="k">this</span><span class="o">.</span><span class="n">getClass</span><span class="o">.</span><span class="n">getClassLoader</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">faceXml</span> <span class="k">=</span> <span class="n">classLoader</span><span class="o">.</span><span class="n">getResource</span><span class="o">(</span><span class="s">&quot;haarcascade_frontalface_alt.xml&quot;</span><span class="o">).</span><span class="n">getPath</span>
</span><span class='line'>    <span class="k">new</span> <span class="nc">FaceDetector</span><span class="o">(</span>
</span><span class='line'>      <span class="n">dimensions</span> <span class="k">=</span> <span class="n">dimensions</span><span class="o">,</span>
</span><span class='line'>      <span class="n">classifierPath</span> <span class="k">=</span> <span class="n">faceXml</span><span class="o">,</span>
</span><span class='line'>      <span class="n">scaleFactor</span> <span class="k">=</span> <span class="n">scaleFactor</span><span class="o">,</span>
</span><span class='line'>      <span class="n">minNeighbours</span> <span class="k">=</span> <span class="n">minNeighbours</span><span class="o">,</span>
</span><span class='line'>      <span class="n">detectorFlag</span> <span class="k">=</span> <span class="n">detectorFlag</span><span class="o">,</span>
</span><span class='line'>      <span class="n">minSize</span> <span class="k">=</span> <span class="n">minSize</span><span class="o">,</span>
</span><span class='line'>      <span class="n">maxSize</span> <span class="k">=</span> <span class="n">maxSize</span>
</span><span class='line'>    <span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">FaceDetector</span><span class="o">(</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">dimensions</span><span class="k">:</span> <span class="kt">Dimensions</span><span class="o">,</span>
</span><span class='line'>    <span class="n">classifierPath</span><span class="k">:</span> <span class="kt">String</span><span class="o">,</span>
</span><span class='line'>    <span class="n">scaleFactor</span><span class="k">:</span> <span class="kt">Double</span> <span class="o">=</span> <span class="mf">1.3</span><span class="o">,</span>
</span><span class='line'>    <span class="n">minNeighbours</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="mi">3</span><span class="o">,</span>
</span><span class='line'>    <span class="n">detectorFlag</span><span class="k">:</span> <span class="kt">HaarDetectorFlag</span> <span class="o">=</span> <span class="nc">HaarDetectorFlag</span><span class="o">.</span><span class="nc">ScaleImage</span><span class="o">,</span>
</span><span class='line'>    <span class="n">minSize</span><span class="k">:</span> <span class="kt">Dimensions</span> <span class="o">=</span> <span class="nc">Dimensions</span><span class="o">(</span><span class="n">width</span> <span class="k">=</span> <span class="mi">30</span><span class="o">,</span> <span class="n">height</span> <span class="k">=</span> <span class="mi">30</span><span class="o">),</span>
</span><span class='line'>    <span class="n">maxSize</span><span class="k">:</span> <span class="kt">Option</span><span class="o">[</span><span class="kt">Dimensions</span><span class="o">]</span> <span class="k">=</span> <span class="nc">None</span>
</span><span class='line'><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">private</span> <span class="k">val</span> <span class="n">faceCascade</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">CascadeClassifier</span><span class="o">(</span><span class="n">classifierPath</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">private</span> <span class="k">val</span> <span class="n">minSizeOpenCV</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">Size</span><span class="o">(</span><span class="n">minSize</span><span class="o">.</span><span class="n">width</span><span class="o">,</span> <span class="n">minSize</span><span class="o">.</span><span class="n">height</span><span class="o">)</span>
</span><span class='line'>  <span class="k">private</span> <span class="k">val</span> <span class="n">maxSizeOpenCV</span> <span class="k">=</span> <span class="n">maxSize</span><span class="o">.</span><span class="n">map</span><span class="o">(</span><span class="n">d</span> <span class="k">=&gt;</span> <span class="k">new</span> <span class="nc">Size</span><span class="o">(</span><span class="n">d</span><span class="o">.</span><span class="n">width</span><span class="o">,</span> <span class="n">d</span><span class="o">.</span><span class="n">height</span><span class="o">)).</span><span class="n">getOrElse</span><span class="o">(</span><span class="k">new</span> <span class="nc">Size</span><span class="o">())</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">   * Given a frame matrix, a series of detected faces</span>
</span><span class='line'><span class="cm">   */</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">detect</span><span class="o">(</span><span class="n">frameMatWithGrey</span><span class="k">:</span> <span class="kt">WithGrey</span><span class="o">)</span><span class="k">:</span> <span class="o">(</span><span class="kt">WithGrey</span><span class="o">,</span> <span class="kt">Seq</span><span class="o">[</span><span class="kt">Face</span><span class="o">])</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">currentGreyMat</span> <span class="k">=</span> <span class="n">frameMatWithGrey</span><span class="o">.</span><span class="n">grey</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">faceRects</span> <span class="k">=</span> <span class="n">findFaces</span><span class="o">(</span><span class="n">currentGreyMat</span><span class="o">)</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">faces</span> <span class="k">=</span> <span class="k">for</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">i</span> <span class="k">&lt;-</span> <span class="mi">0L</span> <span class="n">until</span> <span class="n">faceRects</span><span class="o">.</span><span class="n">size</span><span class="o">()</span>
</span><span class='line'>      <span class="n">faceRect</span> <span class="k">=</span> <span class="n">faceRects</span><span class="o">.</span><span class="n">get</span><span class="o">(</span><span class="n">i</span><span class="o">)</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">yield</span> <span class="nc">Face</span><span class="o">(</span><span class="n">i</span><span class="o">,</span> <span class="n">faceRect</span><span class="o">)</span>
</span><span class='line'>    <span class="o">(</span><span class="n">frameMatWithGrey</span><span class="o">,</span> <span class="n">faces</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">private</span> <span class="k">def</span> <span class="n">findFaces</span><span class="o">(</span><span class="n">greyMat</span><span class="k">:</span> <span class="kt">Mat</span><span class="o">)</span><span class="k">:</span> <span class="kt">RectVector</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">faceRects</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">RectVector</span><span class="o">()</span>
</span><span class='line'>    <span class="n">faceCascade</span><span class="o">.</span><span class="n">detectMultiScale</span><span class="o">(</span><span class="n">greyMat</span><span class="o">,</span> <span class="n">faceRects</span><span class="o">,</span> <span class="n">scaleFactor</span><span class="o">,</span> <span class="n">minNeighbours</span><span class="o">,</span> <span class="n">detectorFlag</span><span class="o">.</span><span class="n">flag</span><span class="o">,</span> <span class="n">minSizeOpenCV</span><span class="o">,</span> <span class="n">maxSizeOpenCV</span><span class="o">)</span>
</span><span class='line'>    <span class="n">faceRects</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>To be clear, there is really nothing <em>face-specific</em> in our classifier because what it detects is entirely dependent on the Haar cascade XML file passed to it on construction.</p>

<h3 id="drawing-rectangles">Drawing rectangles</h3>

<p>Once we have a list of rectangles that denote where our objects are in the image matrix, the last thing we need to do is draw the rectangles on the original image matrix. OpenCV provides a <code>rectangle</code> method that takes a <code>Mat</code> and two points denoting the top left and bottom right corners of a rectangle and draws the rectangle to the matrix it in-place.  Here again, our implementation will clone the matrix first before calling the OpenCV method so as to keep our code easy to reason about.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (FaceDrawer.scala)</span> <a href='/downloads/code/scala/FaceDrawer.scala'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">class</span> <span class="nc">FaceDrawer</span><span class="o">(</span><span class="n">fontScale</span><span class="k">:</span> <span class="kt">Float</span> <span class="o">=</span> <span class="mf">0.6f</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">private</span> <span class="k">val</span> <span class="nc">RedColour</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">Scalar</span><span class="o">(</span><span class="nc">AbstractCvScalar</span><span class="o">.</span><span class="nc">RED</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">   * Clones the Mat, draws squares around the faces on it using the provided [[Face]] sequence and returns the new Mat</span>
</span><span class='line'><span class="cm">   */</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">drawFaces</span><span class="o">(</span><span class="n">withGrey</span><span class="k">:</span> <span class="kt">WithGrey</span><span class="o">,</span> <span class="n">faces</span><span class="k">:</span> <span class="kt">Seq</span><span class="o">[</span><span class="kt">Face</span><span class="o">])</span><span class="k">:</span> <span class="kt">Mat</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">clonedMat</span> <span class="k">=</span> <span class="n">withGrey</span><span class="o">.</span><span class="n">orig</span><span class="o">.</span><span class="n">clone</span><span class="o">()</span>
</span><span class='line'>    <span class="k">for</span> <span class="o">(</span><span class="n">f</span> <span class="k">&lt;-</span> <span class="n">faces</span><span class="o">)</span> <span class="n">drawFace</span><span class="o">(</span><span class="n">clonedMat</span><span class="o">,</span> <span class="n">f</span><span class="o">)</span>
</span><span class='line'>    <span class="n">clonedMat</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">private</span> <span class="k">def</span> <span class="n">drawFace</span><span class="o">(</span><span class="n">clonedMat</span><span class="k">:</span> <span class="kt">Mat</span><span class="o">,</span> <span class="n">f</span><span class="k">:</span> <span class="kt">Face</span><span class="o">)</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">rectangle</span><span class="o">(</span>
</span><span class='line'>      <span class="n">clonedMat</span><span class="o">,</span>
</span><span class='line'>      <span class="k">new</span> <span class="nc">Point</span><span class="o">(</span><span class="n">f</span><span class="o">.</span><span class="n">faceRect</span><span class="o">.</span><span class="n">x</span><span class="o">,</span> <span class="n">f</span><span class="o">.</span><span class="n">faceRect</span><span class="o">.</span><span class="n">y</span><span class="o">),</span>
</span><span class='line'>      <span class="k">new</span> <span class="nc">Point</span><span class="o">(</span><span class="n">f</span><span class="o">.</span><span class="n">faceRect</span><span class="o">.</span><span class="n">x</span> <span class="o">+</span> <span class="n">f</span><span class="o">.</span><span class="n">faceRect</span><span class="o">.</span><span class="n">width</span><span class="o">,</span> <span class="n">f</span><span class="o">.</span><span class="n">faceRect</span><span class="o">.</span><span class="n">y</span> <span class="o">+</span> <span class="n">f</span><span class="o">.</span><span class="n">faceRect</span><span class="o">.</span><span class="n">height</span><span class="o">),</span>
</span><span class='line'>      <span class="nc">RedColour</span><span class="o">,</span>
</span><span class='line'>      <span class="mi">1</span><span class="o">,</span>
</span><span class='line'>      <span class="nc">CV_AA</span><span class="o">,</span>
</span><span class='line'>      <span class="mi">0</span>
</span><span class='line'>    <span class="o">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// draw the face number</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">cvPoint</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">Point</span><span class="o">(</span><span class="n">f</span><span class="o">.</span><span class="n">faceRect</span><span class="o">.</span><span class="n">x</span><span class="o">,</span> <span class="n">f</span><span class="o">.</span><span class="n">faceRect</span><span class="o">.</span><span class="n">y</span> <span class="o">-</span> <span class="mi">20</span><span class="o">)</span>
</span><span class='line'>    <span class="n">putText</span><span class="o">(</span><span class="n">clonedMat</span><span class="o">,</span> <span class="n">s</span><span class="s">&quot;Face ${f.id}&quot;</span><span class="o">,</span> <span class="n">cvPoint</span><span class="o">,</span> <span class="nc">FONT_HERSHEY_SIMPLEX</span><span class="o">,</span> <span class="n">fontScale</span><span class="o">,</span> <span class="nc">RedColour</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Our <code>FaceDrawer</code> will expose a<code>drawFaces</code> method that takes a <code>WithGrey</code> with a list of detected <code>Face</code>s and use the above method to draw rectanges around each face. We’ll also make use of OpenCV’s <code>putText</code> method to write the word “Face” along with a number right on top of the rectangle.</p>

<h3 id="ui">UI</h3>

<p>We’ll hook up all our components in a simple Swing app. To make things a little more interesting, the app will consist of 2 frames:</p>

<ol>
  <li>An initial frame to allow the user to choose between loading a custom Haar cascade classifier file or to load the default one that’s packaged in <code>resources</code></li>
  <li>The actual CanvasFrame shows our feed along with rectangles around detected objects</li>
</ol>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>WebcamFaceDetector UI (WebcamFaceDetector.scala)</span> <a href='/downloads/code/scala/WebcamFaceDetector.scala'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">object</span> <span class="nc">WebcamFaceDetector</span> <span class="k">extends</span> <span class="nc">SimpleSwingApplication</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="n">top</span><span class="k">:</span> <span class="kt">Frame</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">OptionsFrame</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">   * This is the initial frame, which presents two simple options, to load a custom Haar cascade file for face detection,</span>
</span><span class='line'><span class="cm">   * or to use the default one</span>
</span><span class='line'><span class="cm">   */</span>
</span><span class='line'>  <span class="k">private</span> <span class="k">class</span> <span class="nc">OptionsFrame</span> <span class="k">extends</span> <span class="nc">Frame</span> <span class="o">{</span> <span class="n">currentFrame</span> <span class="k">=&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">peer</span><span class="o">.</span><span class="n">setDefaultCloseOperation</span><span class="o">(</span><span class="n">javax</span><span class="o">.</span><span class="n">swing</span><span class="o">.</span><span class="nc">JFrame</span><span class="o">.</span><span class="nc">EXIT_ON_CLOSE</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">val</span> <span class="n">imageDimensions</span> <span class="k">=</span> <span class="nc">Dimensions</span><span class="o">(</span><span class="n">width</span> <span class="k">=</span> <span class="mi">640</span><span class="o">,</span> <span class="n">height</span> <span class="k">=</span> <span class="mi">480</span><span class="o">)</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">chooseCascadeBtn</span> <span class="k">=</span> <span class="nc">Button</span><span class="o">(</span><span class="s">&quot;Load custom Haar cascade file&quot;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">val</span> <span class="n">filePath</span> <span class="k">=</span> <span class="n">openChooser</span><span class="o">()</span>
</span><span class='line'>      <span class="n">filePath</span><span class="o">.</span><span class="n">foreach</span> <span class="o">{</span> <span class="n">path</span> <span class="k">=&gt;</span>
</span><span class='line'>        <span class="k">val</span> <span class="n">detector</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">FaceDetector</span><span class="o">(</span><span class="n">dimensions</span> <span class="k">=</span> <span class="n">imageDimensions</span><span class="o">,</span> <span class="n">classifierPath</span> <span class="k">=</span> <span class="n">path</span><span class="o">)</span>
</span><span class='line'>        <span class="n">openFaceDetectionWindow</span><span class="o">(</span><span class="n">detector</span><span class="o">)</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">defaultCascadeBtn</span> <span class="k">=</span> <span class="nc">Button</span><span class="o">(</span><span class="s">&quot;Use default face Haar cascade file&quot;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">val</span> <span class="n">detector</span> <span class="k">=</span> <span class="nc">FaceDetector</span><span class="o">.</span><span class="n">defaultCascadeFile</span><span class="o">(</span><span class="n">imageDimensions</span><span class="o">)</span>
</span><span class='line'>      <span class="n">openFaceDetectionWindow</span><span class="o">(</span><span class="n">detector</span><span class="o">)</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">val</span> <span class="n">mainPanel</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">GridPanel</span><span class="o">(</span><span class="n">rows0</span> <span class="k">=</span> <span class="mi">0</span><span class="o">,</span> <span class="n">cols0</span> <span class="k">=</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">preferredSize</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">Dimension</span><span class="o">(</span><span class="mi">300</span><span class="o">,</span> <span class="mi">200</span><span class="o">)</span>
</span><span class='line'>      <span class="n">contents</span> <span class="o">++=</span> <span class="nc">Seq</span><span class="o">(</span><span class="n">chooseCascadeBtn</span><span class="o">,</span> <span class="n">defaultCascadeBtn</span><span class="o">)</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">contents</span> <span class="k">=</span> <span class="n">mainPanel</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span> <span class="k">def</span> <span class="n">openChooser</span><span class="o">()</span><span class="k">:</span> <span class="kt">Option</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">val</span> <span class="n">chooser</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">FileChooser</span><span class="o">(</span><span class="k">new</span> <span class="n">java</span><span class="o">.</span><span class="n">io</span><span class="o">.</span><span class="nc">File</span><span class="o">(</span><span class="s">&quot;.&quot;</span><span class="o">))</span>
</span><span class='line'>      <span class="n">chooser</span><span class="o">.</span><span class="n">fileSelectionMode</span> <span class="k">=</span> <span class="nc">FileChooser</span><span class="o">.</span><span class="nc">SelectionMode</span><span class="o">.</span><span class="nc">FilesOnly</span>
</span><span class='line'>      <span class="n">chooser</span><span class="o">.</span><span class="n">showOpenDialog</span><span class="o">(</span><span class="n">currentFrame</span><span class="o">)</span> <span class="k">match</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">case</span> <span class="nc">FileChooser</span><span class="o">.</span><span class="nc">Result</span><span class="o">.</span><span class="nc">Approve</span> <span class="k">=&gt;</span> <span class="nc">Some</span><span class="o">(</span><span class="n">chooser</span><span class="o">.</span><span class="n">selectedFile</span><span class="o">.</span><span class="n">toPath</span><span class="o">.</span><span class="n">toAbsolutePath</span><span class="o">.</span><span class="n">toString</span><span class="o">)</span>
</span><span class='line'>        <span class="k">case</span> <span class="k">_</span> <span class="k">=&gt;</span> <span class="nc">None</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span> <span class="k">def</span> <span class="n">openFaceDetectionWindow</span><span class="o">(</span><span class="n">faceDetector</span><span class="k">:</span> <span class="kt">FaceDetector</span><span class="o">)</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">new</span> <span class="nc">DetectionFrame</span><span class="o">(</span><span class="n">faceDetector</span><span class="o">)</span>
</span><span class='line'>      <span class="n">peer</span><span class="o">.</span><span class="n">setDefaultCloseOperation</span><span class="o">(</span><span class="n">javax</span><span class="o">.</span><span class="n">swing</span><span class="o">.</span><span class="nc">WindowConstants</span><span class="o">.</span><span class="nc">DO_NOTHING_ON_CLOSE</span><span class="o">)</span>
</span><span class='line'>      <span class="n">currentFrame</span><span class="o">.</span><span class="n">close</span><span class="o">()</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">   * Our detection window; opened by Initial Frame</span>
</span><span class='line'><span class="cm">   */</span>
</span><span class='line'>  <span class="k">private</span> <span class="k">class</span> <span class="nc">DetectionFrame</span><span class="o">(</span><span class="n">faceDetector</span><span class="k">:</span> <span class="kt">FaceDetector</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">implicit</span> <span class="k">val</span> <span class="n">system</span> <span class="k">=</span> <span class="nc">ActorSystem</span><span class="o">()</span>
</span><span class='line'>    <span class="k">implicit</span> <span class="k">val</span> <span class="n">materializer</span> <span class="k">=</span> <span class="nc">ActorMaterializer</span><span class="o">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">val</span> <span class="n">webcamSource</span> <span class="k">=</span> <span class="nc">Webcam</span><span class="o">.</span><span class="n">source</span><span class="o">(</span><span class="n">deviceId</span> <span class="k">=</span> <span class="mi">0</span><span class="o">,</span> <span class="n">dimensions</span> <span class="k">=</span> <span class="n">faceDetector</span><span class="o">.</span><span class="n">dimensions</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">val</span> <span class="n">canvas</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">CanvasFrame</span><span class="o">(</span><span class="s">&quot;Webcam&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="c1">//  //Set Canvas frame to close on exit</span>
</span><span class='line'>    <span class="n">canvas</span><span class="o">.</span><span class="n">setDefaultCloseOperation</span><span class="o">(</span><span class="n">javax</span><span class="o">.</span><span class="n">swing</span><span class="o">.</span><span class="nc">JFrame</span><span class="o">.</span><span class="nc">EXIT_ON_CLOSE</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">val</span> <span class="n">faceDrawer</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">FaceDrawer</span><span class="o">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">val</span> <span class="n">flow</span> <span class="k">=</span> <span class="n">webcamSource</span>
</span><span class='line'>      <span class="o">.</span><span class="n">map</span><span class="o">(</span><span class="nc">MediaConversion</span><span class="o">.</span><span class="n">toMat</span><span class="o">)</span> <span class="c1">// most OpenCV manipulations require a Matrix</span>
</span><span class='line'>      <span class="o">.</span><span class="n">map</span><span class="o">(</span><span class="nc">Flip</span><span class="o">.</span><span class="n">horizontal</span><span class="o">)</span>
</span><span class='line'>      <span class="o">.</span><span class="n">map</span><span class="o">(</span><span class="nc">WithGrey</span><span class="o">.</span><span class="n">build</span><span class="o">)</span>
</span><span class='line'>      <span class="o">.</span><span class="n">map</span><span class="o">(</span><span class="n">faceDetector</span><span class="o">.</span><span class="n">detect</span><span class="o">)</span>
</span><span class='line'>      <span class="o">.</span><span class="n">map</span><span class="o">((</span><span class="n">faceDrawer</span><span class="o">.</span><span class="n">drawFaces</span> <span class="k">_</span><span class="o">).</span><span class="n">tupled</span><span class="o">)</span>
</span><span class='line'>      <span class="o">.</span><span class="n">map</span><span class="o">(</span><span class="nc">MediaConversion</span><span class="o">.</span><span class="n">toFrame</span><span class="o">)</span> <span class="c1">// convert back to a frame</span>
</span><span class='line'>      <span class="o">.</span><span class="n">map</span><span class="o">(</span><span class="n">canvas</span><span class="o">.</span><span class="n">showImage</span><span class="o">)</span>
</span><span class='line'>      <span class="o">.</span><span class="n">to</span><span class="o">(</span><span class="nc">Sink</span><span class="o">.</span><span class="n">ignore</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">flow</span><span class="o">.</span><span class="n">run</span><span class="o">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Notice that once again, the code defining the Akka Flow Graph maps almost one to one to our flow chart.</p>

<h2 id="conclusion">Conclusion</h2>

<p>We now have a face detector that uses  OpenCV’s Haar cascade classifier toolbelt and draws rectangles around any identified faces, and we made it by expanding on the Akka Stream foundations laid in the <a href="/blog/2016/03/08/scala-and-opencv-ep-1-akka-webcam/">previous post</a>. As before, the code for this tutorial can be found <a href="https://github.com/lloydmeta/scala-akka-cv-part2">on Github</a>.</p>

<p>In the next post, we’ll expand this further by classifying the faces that we’ve detected as smiling or not using a supervised machine-learning model. We could of course continue to use Haar cascades to identify smiles in our feed (we can simply choose to load a smile Haar cascade classifier file), but what would be the fun in that ? :)</p>

<h3 id="credits">Credits</h3>

<ol>
  <li><a href="https://chimpler.wordpress.com/2014/11/18/playing-with-opencv-in-scala-to-do-face-detection-with-haarcascade-classifier-using-a-webcam/">Playing with OpenCV in Scala to do face detection with Haarcascade classifier using a webcam</a></li>
</ol>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Scala and OpenCV Ep 1: Akka Webcam]]></title>
    <link href="https://beachape.com/blog/2016/03/08/scala-and-opencv-ep-1-akka-webcam/"/>
    <updated>2016-03-08T16:16:00+09:00</updated>
    <id>https://beachape.com/blog/2016/03/08/scala-and-opencv-ep-1-akka-webcam</id>
    <content type="html"><![CDATA[<p>In a <a href="/blog/2016/03/05/opencv-sbt-plugin/">previous post</a>, I talked about SBT-OpenCV, a plugin for SBT that makes it easy to get started with OpenCV in any SBT-defined JVM app using just one line in <code>project/plugins.sbt</code>.  Having handled the issue of getting the proper dependencies into a project, we can turn our attention to actually using the libraries to do something cool.</p>

<p>This post is the beginning of a series, where the end goal is to build a smile detector.  Akka and OpenCV will be used, with Spark joining later on to complete the buzzwords treble.</p>

<p>A well-rounded and fun first step is to get a video feed from a webcam showing on our screen. To do this, we will cover a variety of things, including how to define a custom Akka <code>Source</code>, how to use JavaCV, and some basic OpenCV image manipulation utilities.</p>

<!-- more -->

<h2 id="akka-streams">Akka Streams</h2>

<p>Many of the OpenCV tutorials floating around on the interwebs use a procedural approach; perhaps because it better fits the programming language of the tutorial, or for performance. In this series of posts, we will instead adopt a stream processing model, specifically in the manner of <a href="http://www.reactive-streams.org/">Reactive Streams</a>.</p>

<p>There are many benefits of using the Reactive Stream model (<a href="https://medium.com/@kvnwbbr/a-journey-into-reactive-streams-5ee2a9cd7e29#.am5eyvz5x">this blog post</a>, and <a href="http://www.slideshare.net/rolandkuhn/reactive-streams">this slide deck by Roland Kuhn</a> are great places to start reading), but the main ones I feel are relevant for us are:</p>

<ol>
  <li>
    <p><strong>Simplicity</strong>: by turning data processing into a series of simple stateless transformations, your code is easy to maintain, easy to change, and easy to understand: in other words, it becomes agile (<em>relax</em>: your code, not your team…).</p>
  </li>
  <li>
    <p><strong>Backpressure</strong>: Reactive Streams implementations ensure that backpressure (when downstream transforms take too long, upstream is informed so as to not overload your system) is handled automatically</p>
  </li>
  <li>
    <p><strong>Asynchronous</strong>: Reactive Streams are run asynchronously by default, leaving your main thread(s) responsive</p>
  </li>
</ol>

<p>In Scala, <a href="http://doc.akka.io/docs/akka-stream-and-http-experimental/snapshot/scala.html">Akka-Streams</a> is the defacto implementation of the Reactive Streams spec, and although it is labelled experimental, its adoption looks imminent (for example, <a href="https://www.playframework.com/documentation/2.4.x/ReactiveStreamsIntegration">there is already a Play integration</a> and the innards of Play are being rewritten to use Akka-Http, which is based on Akka-Streams).  Another nice Reactive Streams implementation in Scala is <a href="https://github.com/monixio/monix">Monix</a>, which offers a (subjectively) cleaner interface that is more familiar for people who come from RxScala/RxJava.</p>

<p>For the purposes of this tutorial, we will be using Akka-Streams because it seems to have higher chances of wide-spread adoption.</p>

<p><em>Note that this tutorial was written based on an <strong>experimental</strong> version of Akka streams.</em></p>

<h3 id="flow-chart">Flow chart</h3>

<p>Asides from wrapping OpenCV, JavaCV comes with a number of useful classes. One such class is <code>CanvasFrame</code>, which is a hardware-accelerated Swing Frame implementation for showing images.  <code>CanvasFrame</code>’s <code>.showImage</code> method accepts a <code>Frame</code>, which is the exact same type that <code>OpenCVFrameGrabber</code> (another useful JavaCV class) returns from its <code>.grabh()</code> method.</p>

<p>Before showing the image, we will flip the image so that the feed we see on screen moves in the direction we expect. This requires us to do a simple transformation to a <code>Mat</code>, a wrapper type for OpenCV’s native matrix, do the actual flipping of the matrix, convert the <code>Mat</code> back into a <code>Frame</code>, and then show it on the <code>CanvasFrame</code>.</p>

<p>In short, our pipeline looks something like this:</p>

<div id="flow-chart"><img class="center" src="/images/opencv-flowchart-part-1.png" title="'Simple wecam feed flow'" ></div>

<h3 id="the-source">The Source</h3>

<p>As the diagram suggests, the first thing we need is a <code>Source</code> that produces <code>Frames</code>; in other words, a <code>Source[Frame]</code>.</p>

<p>The <code>OpenCVFrameGrabber</code> API for grabbing frames from a webcam is fairly simple: you instantiate one passing in an <code>Int</code> for the device id of the webcam (usually 0), optionally pass some settings to it, and then call <code>start</code> to initialise the grabber.  Afterwards, it is simly a matter of calling <code>.grab()</code> to obtain a <code>Frame</code>.</p>

<p>```scala
val grabber = new OpenCVFrameGrabber(deviceId)
grabber.setImageWidth(imageWidth)
grabber.setImageHeight(imageHeight)
grabber.setBitsPerPixel(bitsPerPixel)
grabber.setImageMode(imageMode)
grabber.start()</p>

<p>//…</p>

<p>grabber.grab() // returns a Frame
```
In order to create an Akka <code>Source[Frame]</code>, we will make use of the Akka-provided <code>ActorPublisher</code> class, which provides helper methods that specifically make it easy to send data only when there is downstream demand (this is how backpressure is automagically handled).</p>

<p>In the actor’s <code>receive</code> method, we match on</p>

<ul>
  <li><code>Request</code> message type, which use to then call <code>emitFrames()</code></li>
  <li>A custom <code>Continue</code> object, which also calls <code>emitFrames()</code></li>
  <li><code>Cancel</code> in order to know when to stop the actor.</li>
</ul>

<p>The <code>emitFrames()</code> method is a method that checks to see if the Actor is currently active (whether it has any subscribers), and if it is, grabs a frame and sends it to the <code>onNext</code> helper method from <code>ActorPublisher</code> to send a piece of data. It then checks if <code>totalDemand</code> (another <code>ActorPublisher</code> method) is greater than 0, and sends <em>itself</em> a <code>Continue</code> message, which invokes <code>emitFrames()</code> again. This somewhat convoluted way of sending data downstream is required because <code>grabber.grab()</code> is a blocking call, and we don’t want to block the Actor threadpool for too long at a time (this pattern is used by the built-in <a href="https://github.com/akka/akka/blob/master/akka-stream/src/main/scala/akka/stream/impl/io/InputStreamPublisher.scala#L43"><code>InputStreamPublisher</code></a>).</p>

<p>In order to make a <code>Source[Frame]</code>, we instantiate an instance of our actor, pass its <code>ActorRef</code> to a method that creates a <code>Publisher[Frame]</code>, and then pass the publisher to a method that makes a <code>Source[Frame]</code>.</p>

<p>For the purposes of keeping our API clean, we make it a private class and expose only a static method for creating a source.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Webcam Source[Frame] (WebcamSource.scala)</span> <a href='/downloads/code/scala/WebcamSource.scala'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">package</span> <span class="nn">com.beachape.video</span>
</span><span class='line'>
</span><span class='line'><span class="k">import</span> <span class="nn">akka.actor.</span><span class="o">{</span> <span class="nc">DeadLetterSuppression</span><span class="o">,</span> <span class="nc">Props</span><span class="o">,</span> <span class="nc">ActorSystem</span><span class="o">,</span> <span class="nc">ActorLogging</span> <span class="o">}</span>
</span><span class='line'><span class="k">import</span> <span class="nn">akka.stream.actor.ActorPublisher</span>
</span><span class='line'><span class="k">import</span> <span class="nn">akka.stream.actor.ActorPublisherMessage.</span><span class="o">{</span> <span class="nc">Cancel</span><span class="o">,</span> <span class="nc">Request</span> <span class="o">}</span>
</span><span class='line'><span class="k">import</span> <span class="nn">akka.stream.scaladsl.Source</span>
</span><span class='line'><span class="k">import</span> <span class="nn">org.bytedeco.javacpp.opencv_core._</span>
</span><span class='line'><span class="k">import</span> <span class="nn">org.bytedeco.javacv.</span><span class="o">{</span> <span class="nc">FrameGrabber</span><span class="o">,</span> <span class="nc">Frame</span> <span class="o">}</span>
</span><span class='line'><span class="k">import</span> <span class="nn">org.bytedeco.javacv.FrameGrabber.ImageMode</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Created by Lloyd on 2/13/16.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'>
</span><span class='line'><span class="k">object</span> <span class="nc">Webcam</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">   * Builds a Frame [[Source]]</span>
</span><span class='line'><span class="cm">   *</span>
</span><span class='line'><span class="cm">   * @param deviceId device ID for the webcam</span>
</span><span class='line'><span class="cm">   * @param dimensions</span>
</span><span class='line'><span class="cm">   * @param bitsPerPixel</span>
</span><span class='line'><span class="cm">   * @param imageMode</span>
</span><span class='line'><span class="cm">   * @param system ActorSystem</span>
</span><span class='line'><span class="cm">   * @return a Source of [[Frame]]s</span>
</span><span class='line'><span class="cm">   */</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">source</span><span class="o">(</span>
</span><span class='line'>    <span class="n">deviceId</span><span class="k">:</span> <span class="kt">Int</span><span class="o">,</span>
</span><span class='line'>    <span class="n">dimensions</span><span class="k">:</span> <span class="kt">Dimensions</span><span class="o">,</span>
</span><span class='line'>    <span class="n">bitsPerPixel</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="nc">CV_8U</span><span class="o">,</span>
</span><span class='line'>    <span class="n">imageMode</span><span class="k">:</span> <span class="kt">ImageMode</span> <span class="o">=</span> <span class="nc">ImageMode</span><span class="o">.</span><span class="nc">COLOR</span>
</span><span class='line'>  <span class="o">)(</span><span class="k">implicit</span> <span class="n">system</span><span class="k">:</span> <span class="kt">ActorSystem</span><span class="o">)</span><span class="k">:</span> <span class="kt">Source</span><span class="o">[</span><span class="kt">Frame</span>, <span class="kt">Unit</span><span class="o">]</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">props</span> <span class="k">=</span> <span class="nc">Props</span><span class="o">(</span>
</span><span class='line'>      <span class="k">new</span> <span class="nc">WebcamFramePublisher</span><span class="o">(</span>
</span><span class='line'>        <span class="n">deviceId</span> <span class="k">=</span> <span class="n">deviceId</span><span class="o">,</span>
</span><span class='line'>        <span class="n">imageWidth</span> <span class="k">=</span> <span class="n">dimensions</span><span class="o">.</span><span class="n">width</span><span class="o">,</span>
</span><span class='line'>        <span class="n">imageHeight</span> <span class="k">=</span> <span class="n">dimensions</span><span class="o">.</span><span class="n">height</span><span class="o">,</span>
</span><span class='line'>        <span class="n">bitsPerPixel</span> <span class="k">=</span> <span class="n">bitsPerPixel</span><span class="o">,</span>
</span><span class='line'>        <span class="n">imageMode</span> <span class="k">=</span> <span class="n">imageMode</span>
</span><span class='line'>      <span class="o">)</span>
</span><span class='line'>    <span class="o">)</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">webcamActorRef</span> <span class="k">=</span> <span class="n">system</span><span class="o">.</span><span class="n">actorOf</span><span class="o">(</span><span class="n">props</span><span class="o">)</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">webcamActorPublisher</span> <span class="k">=</span> <span class="nc">ActorPublisher</span><span class="o">[</span><span class="kt">Frame</span><span class="o">](</span><span class="n">webcamActorRef</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="nc">Source</span><span class="o">.</span><span class="n">fromPublisher</span><span class="o">(</span><span class="n">webcamActorPublisher</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Building a started grabber seems finicky if not synchronised; there may be some freaky stuff happening somewhere.</span>
</span><span class='line'>  <span class="k">private</span> <span class="k">def</span> <span class="n">buildGrabber</span><span class="o">(</span>
</span><span class='line'>    <span class="n">deviceId</span><span class="k">:</span> <span class="kt">Int</span><span class="o">,</span>
</span><span class='line'>    <span class="n">imageWidth</span><span class="k">:</span> <span class="kt">Int</span><span class="o">,</span>
</span><span class='line'>    <span class="n">imageHeight</span><span class="k">:</span> <span class="kt">Int</span><span class="o">,</span>
</span><span class='line'>    <span class="n">bitsPerPixel</span><span class="k">:</span> <span class="kt">Int</span><span class="o">,</span>
</span><span class='line'>    <span class="n">imageMode</span><span class="k">:</span> <span class="kt">ImageMode</span>
</span><span class='line'>  <span class="o">)</span><span class="k">:</span> <span class="kt">FrameGrabber</span> <span class="o">=</span> <span class="n">synchronized</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">g</span> <span class="k">=</span> <span class="nc">FrameGrabber</span><span class="o">.</span><span class="n">createDefault</span><span class="o">(</span><span class="n">deviceId</span><span class="o">)</span>
</span><span class='line'>    <span class="n">g</span><span class="o">.</span><span class="n">setImageWidth</span><span class="o">(</span><span class="n">imageWidth</span><span class="o">)</span>
</span><span class='line'>    <span class="n">g</span><span class="o">.</span><span class="n">setImageHeight</span><span class="o">(</span><span class="n">imageHeight</span><span class="o">)</span>
</span><span class='line'>    <span class="n">g</span><span class="o">.</span><span class="n">setBitsPerPixel</span><span class="o">(</span><span class="n">bitsPerPixel</span><span class="o">)</span>
</span><span class='line'>    <span class="n">g</span><span class="o">.</span><span class="n">setImageMode</span><span class="o">(</span><span class="n">imageMode</span><span class="o">)</span>
</span><span class='line'>    <span class="n">g</span><span class="o">.</span><span class="n">start</span><span class="o">()</span>
</span><span class='line'>    <span class="n">g</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">   * Actor that backs the Akka Stream source</span>
</span><span class='line'><span class="cm">   */</span>
</span><span class='line'>  <span class="k">private</span> <span class="k">class</span> <span class="nc">WebcamFramePublisher</span><span class="o">(</span>
</span><span class='line'>      <span class="n">deviceId</span><span class="k">:</span> <span class="kt">Int</span><span class="o">,</span>
</span><span class='line'>      <span class="n">imageWidth</span><span class="k">:</span> <span class="kt">Int</span><span class="o">,</span>
</span><span class='line'>      <span class="n">imageHeight</span><span class="k">:</span> <span class="kt">Int</span><span class="o">,</span>
</span><span class='line'>      <span class="n">bitsPerPixel</span><span class="k">:</span> <span class="kt">Int</span><span class="o">,</span>
</span><span class='line'>      <span class="n">imageMode</span><span class="k">:</span> <span class="kt">ImageMode</span>
</span><span class='line'>  <span class="o">)</span> <span class="k">extends</span> <span class="nc">ActorPublisher</span><span class="o">[</span><span class="kt">Frame</span><span class="o">]</span> <span class="k">with</span> <span class="nc">ActorLogging</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span> <span class="k">implicit</span> <span class="k">val</span> <span class="n">ec</span> <span class="k">=</span> <span class="n">context</span><span class="o">.</span><span class="n">dispatcher</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Lazy so that nothing happens until the flow begins</span>
</span><span class='line'>    <span class="k">private</span> <span class="k">lazy</span> <span class="k">val</span> <span class="n">grabber</span> <span class="k">=</span> <span class="n">buildGrabber</span><span class="o">(</span>
</span><span class='line'>      <span class="n">deviceId</span> <span class="k">=</span> <span class="n">deviceId</span><span class="o">,</span>
</span><span class='line'>      <span class="n">imageWidth</span> <span class="k">=</span> <span class="n">imageWidth</span><span class="o">,</span>
</span><span class='line'>      <span class="n">imageHeight</span> <span class="k">=</span> <span class="n">imageHeight</span><span class="o">,</span>
</span><span class='line'>      <span class="n">bitsPerPixel</span> <span class="k">=</span> <span class="n">bitsPerPixel</span><span class="o">,</span>
</span><span class='line'>      <span class="n">imageMode</span> <span class="k">=</span> <span class="n">imageMode</span>
</span><span class='line'>    <span class="o">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="n">receive</span><span class="k">:</span> <span class="kt">Receive</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">case</span> <span class="k">_:</span> <span class="kt">Request</span> <span class="o">=&gt;</span> <span class="n">emitFrames</span><span class="o">()</span>
</span><span class='line'>      <span class="k">case</span> <span class="nc">Continue</span> <span class="k">=&gt;</span> <span class="n">emitFrames</span><span class="o">()</span>
</span><span class='line'>      <span class="k">case</span> <span class="nc">Cancel</span> <span class="k">=&gt;</span> <span class="n">onCompleteThenStop</span><span class="o">()</span>
</span><span class='line'>      <span class="k">case</span> <span class="n">unexpectedMsg</span> <span class="k">=&gt;</span> <span class="n">log</span><span class="o">.</span><span class="n">warning</span><span class="o">(</span><span class="n">s</span><span class="s">&quot;Unexpected message: $unexpectedMsg&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span> <span class="k">def</span> <span class="n">emitFrames</span><span class="o">()</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">isActive</span> <span class="o">&amp;&amp;</span> <span class="n">totalDemand</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="cm">/*</span>
</span><span class='line'><span class="cm">          Grabbing a frame is a blocking I/O operation, so we don&#39;t send too many at once.</span>
</span><span class='line'><span class="cm">         */</span>
</span><span class='line'>        <span class="n">grabFrame</span><span class="o">().</span><span class="n">foreach</span><span class="o">(</span><span class="n">onNext</span><span class="o">)</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">totalDemand</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">self</span> <span class="o">!</span> <span class="nc">Continue</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span> <span class="k">def</span> <span class="n">grabFrame</span><span class="o">()</span><span class="k">:</span> <span class="kt">Option</span><span class="o">[</span><span class="kt">Frame</span><span class="o">]</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>      <span class="nc">Option</span><span class="o">(</span><span class="n">grabber</span><span class="o">.</span><span class="n">grab</span><span class="o">())</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">private</span> <span class="k">case</span> <span class="k">object</span> <span class="nc">Continue</span> <span class="k">extends</span> <span class="nc">DeadLetterSuppression</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>We’ll also define a simple <code>Dimensions</code> case class to make things a bit clearer (keyword arguments FTW)</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Tuple-like class for holding dimensions (Dimensions.scala)</span> <a href='/downloads/code/scala/Dimensions.scala'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Tuple-like class for holding width and height in pixels</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="k">case</span> <span class="k">class</span> <span class="nc">Dimensions</span><span class="o">(</span><span class="n">width</span><span class="k">:</span> <span class="kt">Int</span><span class="o">,</span> <span class="n">height</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3 id="conversion">Conversion</h3>

<p>In order to begin processing our feed with OpenCV, we first need to transform our <code>Frame</code>, which is a JavaCV type, into a type that works with JavaCV’s wrapping of OpenCV’s main representation of images, the matrix, aka <code>Mat</code>.  Fortunately, JavaCV has a <code>OpenCVFrameConverter.ToMat</code> helper class that helps us do this.  Since the class uses a mutable private field for holding on to temporary results, it normally isn’t advisable to use it in multithreaded code unless we make new copies of it each time, but we can make it thread safe by binding it to a <code>ThreadLocal</code>.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Media conversion utility methods (MediaConversion.scala)</span> <a href='/downloads/code/scala/MediaConversion.scala'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Holds conversion and transformation methods for media types</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="k">object</span> <span class="nc">MediaConversion</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Each thread gets its own greyMat for safety</span>
</span><span class='line'>  <span class="k">private</span> <span class="k">val</span> <span class="n">frameToMatConverter</span> <span class="k">=</span> <span class="nc">ThreadLocal</span><span class="o">.</span><span class="n">withInitial</span><span class="o">(</span><span class="k">new</span> <span class="nc">Supplier</span><span class="o">[</span><span class="kt">OpenCVFrameConverter.ToMat</span><span class="o">]</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">def</span> <span class="n">get</span><span class="o">()</span><span class="k">:</span> <span class="kt">OpenCVFrameConverter.ToMat</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">OpenCVFrameConverter</span><span class="o">.</span><span class="nc">ToMat</span>
</span><span class='line'>  <span class="o">})</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">   * Returns an OpenCV Mat for a given JavaCV frame</span>
</span><span class='line'><span class="cm">   */</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">toMat</span><span class="o">(</span><span class="n">frame</span><span class="k">:</span> <span class="kt">Frame</span><span class="o">)</span><span class="k">:</span> <span class="kt">Mat</span> <span class="o">=</span> <span class="n">frameToMatConverter</span><span class="o">.</span><span class="n">get</span><span class="o">().</span><span class="n">convert</span><span class="o">(</span><span class="n">frame</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">   * Returns a JavaCV Frame for a given OpenCV Mat</span>
</span><span class='line'><span class="cm">   */</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">toFrame</span><span class="o">(</span><span class="n">mat</span><span class="k">:</span> <span class="kt">Mat</span><span class="o">)</span><span class="k">:</span> <span class="kt">Frame</span> <span class="o">=</span> <span class="n">frameToMatConverter</span><span class="o">.</span><span class="n">get</span><span class="o">().</span><span class="n">convert</span><span class="o">(</span><span class="n">mat</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3 id="manipulation">Manipulation</h3>

<p>Once we have our <code>Mat</code>, we can use OpenCV methods to do manipulation.  One thing though, is that (perhaps for efficiency) by default, these methods mutate the original object. This can cause strange issues in a multi-threaded, multi-path Flow graph, so instead of using them as is, we make use of the convenient <code>clone</code> method before doing our flip so that the original matrix remains as-is.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (Flip.scala)</span> <a href='/downloads/code/scala/Flip.scala'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">object</span> <span class="nc">Flip</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">   * Clones the image and returns a flipped version of the given image matrix along the y axis (horizontally)</span>
</span><span class='line'><span class="cm">   */</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">horizontal</span><span class="o">(</span><span class="n">mat</span><span class="k">:</span> <span class="kt">Mat</span><span class="o">)</span><span class="k">:</span> <span class="kt">Mat</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">val</span> <span class="n">cloned</span> <span class="k">=</span> <span class="n">mat</span><span class="o">.</span><span class="n">clone</span><span class="o">()</span>
</span><span class='line'>    <span class="n">flip</span><span class="o">(</span><span class="n">cloned</span><span class="o">,</span> <span class="n">cloned</span><span class="o">,</span> <span class="mi">1</span><span class="o">)</span>
</span><span class='line'>    <span class="n">cloned</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3 id="hooking-things-up">Hooking things up</h3>

<p>Now that we have all our components, all we need to do is create a simple application that instantiates all our components and hooks them all together:</p>

<ol>
  <li>Instantiate our <code>ActorSystem</code> and <code>Materializer</code></li>
  <li>Instantiate a <code>CanvasFrame</code></li>
  <li>Instantiate our <code>Source[Frame]</code></li>
  <li>Define our <code>Graph</code> by using our components to transform it</li>
  <li>Run the graph</li>
</ol>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Webcam feed app (WebcamWindow.scala)</span> <a href='/downloads/code/scala/WebcamWindow.scala'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">object</span> <span class="nc">WebcamWindow</span> <span class="k">extends</span> <span class="nc">App</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">implicit</span> <span class="k">val</span> <span class="n">system</span> <span class="k">=</span> <span class="nc">ActorSystem</span><span class="o">()</span>
</span><span class='line'>  <span class="k">implicit</span> <span class="k">val</span> <span class="n">materializer</span> <span class="k">=</span> <span class="nc">ActorMaterializer</span><span class="o">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">val</span> <span class="n">canvas</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">CanvasFrame</span><span class="o">(</span><span class="s">&quot;Webcam&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="c1">//  Set Canvas frame to close on exit</span>
</span><span class='line'>  <span class="n">canvas</span><span class="o">.</span><span class="n">setDefaultCloseOperation</span><span class="o">(</span><span class="n">javax</span><span class="o">.</span><span class="n">swing</span><span class="o">.</span><span class="nc">JFrame</span><span class="o">.</span><span class="nc">EXIT_ON_CLOSE</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">val</span> <span class="n">imageDimensions</span> <span class="k">=</span> <span class="nc">Dimensions</span><span class="o">(</span><span class="n">width</span> <span class="k">=</span> <span class="mi">640</span><span class="o">,</span> <span class="n">height</span> <span class="k">=</span> <span class="mi">480</span><span class="o">)</span>
</span><span class='line'>  <span class="k">val</span> <span class="n">webcamSource</span> <span class="k">=</span> <span class="nc">Webcam</span><span class="o">.</span><span class="n">source</span><span class="o">(</span><span class="n">deviceId</span> <span class="k">=</span> <span class="mi">0</span><span class="o">,</span> <span class="n">dimensions</span> <span class="k">=</span> <span class="n">imageDimensions</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">val</span> <span class="n">graph</span> <span class="k">=</span> <span class="n">webcamSource</span>
</span><span class='line'>    <span class="o">.</span><span class="n">map</span><span class="o">(</span><span class="nc">MediaConversion</span><span class="o">.</span><span class="n">toMat</span><span class="o">)</span> <span class="c1">// most OpenCV manipulations require a Matrix</span>
</span><span class='line'>    <span class="o">.</span><span class="n">map</span><span class="o">(</span><span class="nc">Flip</span><span class="o">.</span><span class="n">horizontal</span><span class="o">)</span>
</span><span class='line'>    <span class="o">.</span><span class="n">map</span><span class="o">(</span><span class="nc">MediaConversion</span><span class="o">.</span><span class="n">toFrame</span><span class="o">)</span> <span class="c1">// convert back to a frame</span>
</span><span class='line'>    <span class="o">.</span><span class="n">map</span><span class="o">(</span><span class="n">canvas</span><span class="o">.</span><span class="n">showImage</span><span class="o">)</span>
</span><span class='line'>    <span class="o">.</span><span class="n">to</span><span class="o">(</span><span class="nc">Sink</span><span class="o">.</span><span class="n">ignore</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">graph</span><span class="o">.</span><span class="n">run</span><span class="o">()</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Looking at the code, one of the rewards of using the stream processing model over the procedureal approach might jump out at you: the near 1 to 1 correspondence that the graph definition has with our earlier diagram.</p>

<h2 id="conclusion">Conclusion</h2>

<p>So, with that we should now have a very simple app shows what your webcam sees, flipped so that when you move left, the image moves with you.  We’ve done it by declaring a custom Akka Stream <code>Source</code> and transforming it a little bit before shoving it onto the screen.</p>

<p>In the next post, we will look at how to do something a bit more complex: face detection using OpenCV.</p>

<p><strong>Note</strong> the code for this post is <a href="https://github.com/lloydmeta/scala-akka-cv-part1">on Github</a></p>

<h3 id="credits">Credits</h3>

<ol>
  <li><a href="https://chimpler.wordpress.com/2014/11/18/playing-with-opencv-in-scala-to-do-face-detection-with-haarcascade-classifier-using-a-webcam/">Playing with OpenCV in Scala to do face detection with Haarcascade classifier using a webcam</a></li>
</ol>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OpenCV SBT Plugin]]></title>
    <link href="https://beachape.com/blog/2016/03/05/opencv-sbt-plugin/"/>
    <updated>2016-03-05T00:30:00+09:00</updated>
    <id>https://beachape.com/blog/2016/03/05/opencv-sbt-plugin</id>
    <content type="html"><![CDATA[<p>OpenCV is arguably the defacto free, open-source computer vision library, but setting it up for usage in a JVM project can be hard because OpenCV itself is written in C++, so there are a bunch of system-dependent things that you need to download/compile/install before you can use it.</p>

<p><a href="https://github.com/bytedeco/javacv">JavaCV</a>, written by <a href="http://bytedeco.org/">Bytedeco</a> is a library that makes it more bearable to use OpenCV from JVM projects by providing a bunch of wrapper classes and logic around OpenCV (there’s a lot more to it, see their page for details).</p>

<p>Still, because JavaCV depends on <a href="https://github.com/bytedeco/javacpp-presets">JavaCPP</a> for common and OpenCV C++ wrappers, and JavaCPP requires you to set your target platform (what platform you want to run on), I thought getting started could be easier still.</p>

<p><!-- more --></p>

<p>After taking a look at <a href="https://github.com/chimpler/blog-scala-javacv/blob/master/build.sbt#L19">this Github project</a>, I created an SBT plugin, <a href="https://github.com/lloydmeta/sbt-opencv">SBT-OpenCV</a>, that allows you to add just one line to your <code>project/plugins.sbt</code> to begin playing around with OpenCV:</p>

<p><code>scala
addSbtPlugin("com.beachape" % "sbt-opencv" % "1.4")
</code></p>

<p>The following is a list of SBT setting keys that you can set in order to customise the behaviour of the plugin:</p>

<p><code>
* `javaCVPlatform`: The platform that you want to compile for (defaults to the platform of the current computer). You can also set this via the "sbt.javacv.platform" System Property
* `javaCppVersion`: Version of Java CPP that you want to use
* `javaCppPresetsVersion`:  Version of Java CPP Presets that you want to use
* `javaCVVersion`: Version of Java CV that you want to use
</code></p>

<p>I think <code>javaCVPlatform</code> is the one that will be most interesting, since you may want to compile JARs for different target platforms; for a list of supported strings, look at the classifiers supported by <a href="https://github.com/bytedeco/javacpp-presets">JavaCPP presets</a>, or work out the different strings that can result from <a href="https://github.com/bytedeco/javacpp/blob/master/src/main/java/org/bytedeco/javacpp/Loader.java#L65-L95">the JavaCPP Loader</a>.</p>

<p>For example:</p>

<p><code>scala
javaCppPlatform := "android-arm"
</code></p>

<p>Feel free to try it out and submit issues, ideas, and PRs at the <a href="https://github.com/lloydmeta/sbt-opencv">Github page</a> :)</p>
]]></content>
  </entry>
  
</feed>
