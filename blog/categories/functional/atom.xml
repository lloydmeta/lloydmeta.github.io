<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Functional | BeachApe.]]></title>
  <link href="https://beachape.com/blog/categories/functional/atom.xml" rel="self"/>
  <link href="https://beachape.com/"/>
  <updated>2016-10-23T14:31:15+09:00</updated>
  <id>https://beachape.com/</id>
  <author>
    <name><![CDATA[Lloyd]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Scala: Processing Option-wrapped Collections]]></title>
    <link href="https://beachape.com/blog/2013/06/20/scala-processing-option-wrapped-collections/"/>
    <updated>2013-06-20T11:14:00+09:00</updated>
    <id>https://beachape.com/blog/2013/06/20/scala-processing-option-wrapped-collections</id>
    <content type="html"><![CDATA[<p>In Scala, there are a lot of cool things - too many to list. Among them is something borrowed from Haskell; the <strong>Maybe</strong>, spelt <a href="http://www.scala-lang.org/api/current/index.html#scala.Option"><em>Option</em> in Scala</a>, which itself is based on the concept of computing via <a href="http://en.wikibooks.org/wiki/Haskell/Understanding_monads">monads</a>.</p>

<p>The reason why <code>Option</code> is awesome is that, if used properly, it largely frees the programmer from having to worry about various variables being in states of nothingness (Nil, null, etc). Without fail, every programmer has at one point or another written things like <code>thing.nil? ? do_nothing : do_something</code> .... all over the place. The point (in my mind, at least) of <code>Option</code> is to free us from having to do this in as many places as possible.</p>

<p>Many libraries in Scala, such as <a href="https://github.com/debasishg/scala-redis">Scala-Redis</a> are made with the assumption that the programmer knows how to deal with <code>Option</code> and return results wrapped in either <code>Some[List[T]]</code> or <code>None</code>.  That said, how to work with these types of results is not exactly straight forward for someone coming from other languages that don't have such constructs, so I've written down some of my thoughts.</p>

<!-- more -->


<p>As an example, let's try tackling the issue of how to use a result like the one that comes from <a href="https://github.com/debasishg/scala-redis">Scala-Redis</a>: <code>Some[List[T]]</code>.</p>

<p>To keep things simple, assume we have a <code>val maybeList = Some(List(1,2,3))</code> and we want to increment each member of the list inside the <code>Option</code>, and want to return another<code>Option</code> with the incremented list inside. While we could potentially do pattern matching to check if the <code>Option</code> is a <code>None</code>, we would prefer to take advantage of the patterns afforded to us by the fact that we're dealing with an <code>Option</code>. This means using <code>map</code>, <code>flatMap</code> and <code>for</code>.</p>

<p>Based on what <a href="http://www.scala-lang.org/api/current/index.html#scala.Option">official Scala documentation on Options</a> tells us, we have</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Scala option-wrapped collections (processing_option_wrapped_collections.scala)</span> <a href='/downloads/code/scala/processing_option_wrapped_collections.scala'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">incrementMaybeList</span><span class="o">(</span><span class="n">maybeList</span><span class="k">:</span> <span class="kt">Option</span><span class="o">[</span><span class="kt">List</span><span class="o">[</span><span class="kt">Int</span><span class="o">]],</span> <span class="n">increment</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="mi">1</span><span class="o">)</span><span class="k">:</span> <span class="kt">Option</span><span class="o">[</span><span class="kt">List</span><span class="o">[</span><span class="kt">Int</span><span class="o">]]</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">maybeList</span><span class="o">.</span><span class="n">map</span><span class="o">{</span><span class="n">list</span> <span class="k">=&gt;</span>
</span><span class='line'>    <span class="n">list</span><span class="o">.</span><span class="n">map</span><span class="o">(</span><span class="k">_</span> <span class="o">+</span> <span class="n">increment</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="n">incrementMaybeListFor</span><span class="o">(</span><span class="n">maybeList</span><span class="k">:</span> <span class="kt">Option</span><span class="o">[</span><span class="kt">List</span><span class="o">[</span><span class="kt">Int</span><span class="o">]],</span> <span class="n">increment</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="mi">1</span><span class="o">)</span><span class="k">:</span> <span class="kt">Option</span><span class="o">[</span><span class="kt">List</span><span class="o">[</span><span class="kt">Int</span><span class="o">]]</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">for</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">list</span> <span class="k">&lt;-</span> <span class="n">maybeList</span>
</span><span class='line'>  <span class="o">}</span> <span class="k">yield</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">list</span> <span class="n">map</span> <span class="o">(</span><span class="k">_</span> <span class="o">+</span> <span class="mi">1</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>There are two versions that we can choose from; one using <code>map</code> and another using <code>for</code>. In essense, they are the same, because <a href="http://tataryn.net/2011/10/whats-in-a-scala-for-comprehension/">for-comprehensions boil down to appropriate <code>map</code> and <code>flatMap</code> methods</a> anyway. This also means that sometimes you may get funky errors with type mismatch errors, for which a good rule of thumb is to remember that <a href="http://stackoverflow.com/questions/4719592/type-mismatch-on-scala-for-comprehension">for comprehensions will try to return the type of the collection of the first generator</a></p>

<p>Using the code above, we can do:</p>

<p>```scala
val maybeList = Some(List(1,2,3))
val incrementedMaybeList = incrementMaybeList(maybeList)
// => incrementedMaybeList: Option[List[Int]] = Some(List(2, 3, 4))</p>

<p>val maybeListNone = None
val incrementedMaybeList = incrementMaybeList(maybeListNone)
// => incrementedMaybeList: Option[List[Int]] = None
```</p>

<p>The fact that calling <code>incrementMaybeList</code> with <code>maybeList</code> worked should not be surprising, but notice how <code>maybeListNone</code> didn't cause the function to throw up. This is because calling methods like <code>map</code> or using for-comprehnsion on <code>Option</code>s that are <code>None</code> immediately return None instead of proceeding to run internal logic. No need to write if/else guards !</p>

<p>By building and using functions like <code>incrementMaybeList</code>, where an <code>Option</code> is processed and an <code>Option</code> is returned throughout the code, one can stop worrying about Nothingness (for the most part), because they can be chained together.</p>

<p><code>scala
incrementMaybeList(incrementMaybeList(None))
// =&gt; Option[List[Int]] = None
</code></p>

<p>When the time comes to actually do something with those <code>Option</code>-wrapped results without returning another value, once again, its time to break out for-comprehensions.</p>

<p>```scala
// Unimaginatively print the incremented results</p>

<p>for{
  list &lt;- incrementList(Some(List(1,2,3)))
  item &lt;- list
} println(item)</p>

<p>for{
  list &lt;- incrementMaybeList(incrementMaybeList(None))
  item &lt;- list
} println(item)
```</p>

<h2>Conclusion</h2>

<p><code>Option</code>s  free the programmer from worrying about Nothingness and thus from writing tons of boilerplate nothingness checks in our code. This blog post talks about a simplish, but applicable example on how to deal with <code>Option</code> in Scala.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby Hash Traversal]]></title>
    <link href="https://beachape.com/blog/2013/01/18/walking-a-ruby-hash/"/>
    <updated>2013-01-18T23:52:00+09:00</updated>
    <id>https://beachape.com/blog/2013/01/18/walking-a-ruby-hash</id>
    <content type="html"><![CDATA[<p><em>TL;DR</em> If you're using Ruby, want to perform operations on the values of a hash only at specific locations in the hash, check out <a href="https://rubygems.org/gems/hash_walker">hash_walker</a></p>

<p>A while back I worked at a Tokyo-based startup focused on building a crowd-sourced translation platform. The great thing about <a href="http://gengo.com/">Gengo</a> was that we (and they still do) offered a translation API that allowed clients to integrate and thus order huge amounts of translations, receive translated content back via callbacks and do whatever it is that clients do with translated materials.</p>

<p>On one of the projects I worked on for a potential client, as part of a trial project, I needed to process a huge amounts (ok, not huge, maybe around 2000 or so) JSON responses and grab the data, throw it over the Gengo API and once it was translated, re-insert the translated content into the JSON responses and send all the JSON responses in text files to the client.</p>

<!-- more -->


<p>Not too hard, but at the same time not entirely trivial because the client wanted to make sure that only specific pieces in the original JSON were translated. For example given the following JSON response:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Contrived JSON example (hash_walker_orig.json)</span> <a href='/downloads/code/json/hash_walker_orig.json'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;title&quot;</span><span class="p">:</span> <span class="s2">&quot;Hilarious article&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;subtitle&quot;</span><span class="p">:</span> <span class="s2">&quot;Something people might find funny&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;description&quot;</span><span class="p">:</span> <span class="s2">&quot;super funny stuff&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;system&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nt">&quot;categories&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>            <span class="s2">&quot;high ratings&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="s2">&quot;link bait&quot;</span>
</span><span class='line'>        <span class="p">],</span>
</span><span class='line'>        <span class="nt">&quot;description&quot;</span><span class="p">:</span> <span class="s2">&quot;really not that funny&quot;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nt">&quot;author&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;Some Body&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;body&quot;</span><span class="p">:</span> <span class="s2">&quot;Not too bad&quot;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nt">&quot;categories&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>        <span class="s2">&quot;Life&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;Happiness&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;Jokes&quot;</span>
</span><span class='line'>    <span class="p">],</span>
</span><span class='line'>    <span class="nt">&quot;content&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nt">&quot;categories&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>            <span class="s2">&quot;Life&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="s2">&quot;Happiness&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="s2">&quot;Jokes&quot;</span>
</span><span class='line'>        <span class="p">],</span>
</span><span class='line'>        <span class="nt">&quot;body&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>        <span class="s2">&quot;lots of jokes here&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;lots of jokes here again !&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;last of the jokes !&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="p">]</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The client wanted title, subtitle, description, content.categories, content.body translated, but <strong>NOT</strong>  system.categories, system.descriptions etc. So in other words, it wouldn't be good enough to just traverse the JSON and look for specific keys, it had to be dependent on where the key was. To make things even more interesting, there would be cases where keys were inside objects that were inside arrays inside objects, inside arrays, etc.</p>

<p>Since I like using Ruby and in Ruby, the natural data structure that JSON maps to is the Hash, I decided to build an app that would allow me to define some sort of "template" if you will, for the purpose of traversing the JSON responses involved in this project.</p>

<p>I came up with the <a href="https://rubygems.org/gems/hash_walker">hash_walker gem</a>. Use it like you would any gem, require it, and you get a each_primitive_value_at method on all hash objects. For full details on how to use it, check out <a href="https://github.com/lloydmeta/hash_walker">the project's Github page</a>; I'll just be explaining the basics here.</p>

<p>Since a code example says a thousand words:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Code example for hash_walker (hash_walker_hash.rb)</span> <a href='/downloads/code/ruby/hash_walker_hash.rb'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="nb">require</span> <span class="s1">&#39;hash_walker&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">json_response</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;title&quot;</span><span class="o">=&gt;</span> <span class="s2">&quot;Hilarious article&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;subtitle&quot;</span><span class="o">=&gt;</span> <span class="s2">&quot;Something people might find funny&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;description&quot;</span><span class="o">=&gt;</span> <span class="s2">&quot;super funny stuff&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;system&quot;</span><span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>        <span class="s2">&quot;categories&quot;</span><span class="o">=&gt;</span> <span class="o">[</span>
</span><span class='line'>            <span class="s2">&quot;high ratings&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="s2">&quot;link bait&quot;</span>
</span><span class='line'>        <span class="o">]</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;description&quot;</span><span class="o">=&gt;</span> <span class="s2">&quot;really not that funny&quot;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="s2">&quot;author&quot;</span><span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>        <span class="s2">&quot;name&quot;</span><span class="o">=&gt;</span> <span class="s2">&quot;Some Body&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;body&quot;</span><span class="o">=&gt;</span> <span class="s2">&quot;Not too bad&quot;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="s2">&quot;categories&quot;</span><span class="o">=&gt;</span> <span class="o">[</span>
</span><span class='line'>        <span class="s2">&quot;Life&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;Happiness&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;Jokes&quot;</span>
</span><span class='line'>    <span class="o">]</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;content&quot;</span><span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>        <span class="s2">&quot;categories&quot;</span><span class="o">=&gt;</span> <span class="o">[</span>
</span><span class='line'>            <span class="s2">&quot;Life&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="s2">&quot;Happiness&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="s2">&quot;Jokes&quot;</span>
</span><span class='line'>        <span class="o">]</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;body&quot;</span><span class="o">=&gt;</span> <span class="o">[</span>
</span><span class='line'>            <span class="s2">&quot;lots of jokes here&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="s2">&quot;lots of jokes here again !&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="s2">&quot;last of the jokes !&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="o">]</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">keys_to_read</span> <span class="o">=</span> <span class="o">[</span>
</span><span class='line'>        <span class="s2">&quot;title&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;author&quot;</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="s2">&quot;name&quot;</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;categories&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;content&quot;</span> <span class="o">=&gt;</span> <span class="o">[</span>
</span><span class='line'>            <span class="s2">&quot;body&quot;</span>
</span><span class='line'>        <span class="o">]</span>
</span><span class='line'>    <span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">json_response</span><span class="o">.</span><span class="n">each_primitive_value_at</span><span class="p">(</span><span class="n">keys_to_read</span><span class="p">){</span><span class="o">|</span><span class="n">value</span><span class="p">,</span><span class="n">path</span><span class="o">|</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">value</span><span class="si">}</span><span class="s2">, </span><span class="si">#{</span><span class="n">path</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Output</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Hilarious article, [&quot;title&quot;]</span>
</span><span class='line'><span class="c1"># Some Body, [&quot;author&quot;, &quot;body&quot;]</span>
</span><span class='line'><span class="c1"># Life, [&quot;a_array&quot;, 0]</span>
</span><span class='line'><span class="c1"># Happiness, [&quot;a_array&quot;, 1]</span>
</span><span class='line'><span class="c1"># Jokes, [&quot;a_array&quot;, 2]</span>
</span><span class='line'><span class="c1"># lots of jokes here, [&quot;content&quot;, body&quot;, 0]</span>
</span><span class='line'><span class="c1"># lots of jokes here again !, [&quot;content&quot;, body&quot;, 1]</span>
</span><span class='line'><span class="c1"># last of the jokes !, [&quot;content&quot;, body&quot;, 2]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>If you have any suggestions, contributions or issues, please feel free to leave a comment here or on the repo itself !</p>
]]></content>
  </entry>
  
</feed>
