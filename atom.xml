<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[BeachApe.]]></title>
  <link href="https://beachape.com/atom.xml" rel="self"/>
  <link href="https://beachape.com/"/>
  <updated>2017-05-29T03:18:52+09:00</updated>
  <id>https://beachape.com/</id>
  <author>
    <name><![CDATA[Lloyd]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Rust: A Scala Engineer's Perspective]]></title>
    <link href="https://beachape.com/blog/2017/05/24/rust-from-scala/"/>
    <updated>2017-05-24T13:45:00+09:00</updated>
    <id>https://beachape.com/blog/2017/05/24/rust-from-scala</id>
    <content type="html"><![CDATA[<p>The 1st year anniversary of my first line of Rust code is coming up, and it’s getting for 5 years since I wrote my first line of Scala code. I thought it would be a good idea to summarise my Scala-tinted perspective of The Rust Experience <sup>TM</sup>, one year on.</p>

<p><span class="caption-wrapper center" style="width: 468px"><img class="caption" src="https://beachape.com/images/rusty-spiral-staircase.jpg" width="450" height="450" title="[Rusty spiral staircase](https://www.flickr.com/photos/janodecesare/2947948666/in/photolist-5uv1r9-56xXaX-4bDqR-SebcMQ-maN4i-7N23dr-7xSH4D-7rhtiD-pHDnby-62icy-pZNZN8-6cZ79B-5uv1BG-4cTa1X-Bwg7kq-7ahJE2-pb2Mcq-5DQf7p-o2NMu4-3VwpKy-nKqFJu-nJCpHS-aA3uj1-zi3AJf-9iUi3a-maMRE-maMUM-maMSb-5bpZDr-388hw8-maMSL-maN4Q-68jZPS-dWFLCF-aA3urd-4vjtb6-7B76ht-36fhwZ-maMYH-7jPJw9-avc8L2-4SQCD3-4C4njx-h46Ev-maN5y-DuqqVb-CpMJiF-maMY4-maN7f-Raj8Es) by Jano De Cesare" /><span class="caption-text"><a href="https://www.flickr.com/photos/janodecesare/2947948666/in/photolist-5uv1r9-56xXaX-4bDqR-SebcMQ-maN4i-7N23dr-7xSH4D-7rhtiD-pHDnby-62icy-pZNZN8-6cZ79B-5uv1BG-4cTa1X-Bwg7kq-7ahJE2-pb2Mcq-5DQf7p-o2NMu4-3VwpKy-nKqFJu-nJCpHS-aA3uj1-zi3AJf-9iUi3a-maMRE-maMUM-maMSb-5bpZDr-388hw8-maMSL-maN4Q-68jZPS-dWFLCF-aA3urd-4vjtb6-7B76ht-36fhwZ-maMYH-7jPJw9-avc8L2-4SQCD3-4C4njx-h46Ev-maN5y-DuqqVb-CpMJiF-maMY4-maN7f-Raj8Es">Rusty spiral staircase</a> by Jano De Cesare</span></span></p>

<p>This is <em>not</em> an objective language vs language comparison. I’ve written this post as part experience dump, part breadcrumb trail for other Scala devs who are exploring or thinking of exploring Rust.</p>

<!-- more -->

<h2 class="no_toc" id="a-bit-about-me">A bit about me</h2>

<p>I’ve written <a href="https://github.com/lloydmeta?utf8=%E2%9C%93&amp;tab=repositories&amp;q=&amp;type=&amp;language=rust">a few Rust libraries/tools</a> as well as <a href="https://github.com/lloydmeta?utf8=%E2%9C%93&amp;tab=repositories&amp;q=&amp;type=&amp;language=scala">Scala ones</a>. For all intents and purposes, I’m a Scala engineer: I get paid to do it and it’s by far my strongest language. I’ve used Rust in a few of my side projects (libraries and smaller utilities).</p>

<p>On the Scala side, I’m the author of <a href="https://github.com/lloydmeta/enumeratum">enumeratum</a>, which brings flexible enums and <a href="https://github.com/lloydmeta/enumeratum#valueenum">value-enums</a> to Scala as a library. I’ve also dabbled in writing macro-based libraries to make things like <a href="https://github.com/lloydmeta/freast">Free Monads</a> and <a href="https://github.com/lloydmeta/diesel">Tagless Final</a> nicer to use.</p>

<p>On the Rust side, I’ve written <a href="https://github.com/lloydmeta/frunk">frunk</a>, a Rust functional programming toolbelt that is roughly a port of <a href="https://github.com/milessabin/shapeless">Shapeless</a> with a bit of <a href="https://github.com/typelevel/cats">cats</a>/<a href="https://github.com/scalaz/scalaz">scalaz</a> mixed in, which does some pretty funky things with the type system that I’ve blogged about (<a href="https://beachape.com/blog/2017/03/04/labelledgeneric-in-rust-what-why-how/">1</a>, <a href="https://beachape.com/blog/2017/03/12/gentle-intro-to-type-level-recursion-in-Rust-from-zero-to-frunk-hlist-sculpting/">2</a>, <a href="https://beachape.com/blog/2017/04/12/boilerplate-free-struct-transforms-in-rust/">3</a>, <a href="https://beachape.com/blog/2017/02/04/rust-generic-not-generics/">4</a>). I also wrote a Rust port of <a href="https://requestb.in">requestb.in</a> called <a href="https://github.com/lloydmeta/rusqbin">rusqbin</a> based on Hyper, and a small WIP async client for Microsoft Cognitive services called <a href="https://github.com/lloydmeta/cogs">cogs</a>.</p>

<h3 class="no_toc" id="forewarning">Forewarning</h3>

<ul>
  <li>I’m biased towards Scala and I’ve mostly gotten used to <a href="http://www.lihaoyi.com/post/WartsoftheScalaProgrammingLanguage.html">Scala’s warts</a>. That said, I make an effort to try to be as neutral as possible.</li>
  <li>When I talk about Rust, I mean Rust stable. This is because I only use Scala stable.</li>
  <li>Some of the stuff that I write about with regards to Rust might have changed by the time you read this. After all, there is an ongoing <a href="https://blog.rust-lang.org/2017/03/02/lang-ergonomics.html">ergonomics initiative</a></li>
</ul>

<h2 class="no_toc" id="overview">Overview</h2>
<ul id="markdown-toc">
  <li><a href="#things-im-happy-with">Things I’m happy with</a>    <ul>
      <li><a href="#batteries-included">Batteries included</a></li>
      <li><a href="#type-system">Type System</a></li>
      <li><a href="#macros">Macros</a></li>
      <li><a href="#compiler-optimisations">Compiler optimisations</a></li>
      <li><a href="#syntax">Syntax</a></li>
      <li><a href="#interoperability-with-c">Interoperability with C</a></li>
      <li><a href="#the-current-zeitgeist">The current Zeitgeist</a></li>
    </ul>
  </li>
  <li><a href="#things-ive-adjusted-to">Things I’ve adjusted to</a>    <ul>
      <li><a href="#semicolons">Semicolons</a></li>
      <li><a href="#ownership-model-stack-vs-heap">Ownership model: Stack vs heap</a></li>
    </ul>
  </li>
  <li><a href="#things-i-wish-were-different">Things I wish were different</a>    <ul>
      <li><a href="#async-io">Async IO</a></li>
      <li><a href="#strings">Strings</a></li>
      <li><a href="#cross-compiling">Cross compiling</a></li>
      <li><a href="#odd-headscratchers">Odd headscratchers</a>        <ul>
          <li><a href="#scoping-of-lifetimes-with-braces"><strong>Scoping of lifetimes with braces</strong></a></li>
        </ul>
      </li>
      <li><a href="#gimme">Gimme</a></li>
    </ul>
  </li>
  <li><a href="#conclusion">Conclusion</a></li>
</ul>

<h2 id="things-im-happy-with">Things I’m happy with</h2>

<h3 id="batteries-included">Batteries included</h3>

<p>The dev-environment-setup experience with Rust is amazing. The Rust community has striven to make it super easy to <a href="https://doc.rust-lang.org/book/getting-started.html">get started with Rust</a> and it shows. Literally <a href="https://doc.rust-lang.org/book/getting-started.html#installing-rust">one shell command</a> will set everything you need up.</p>

<ul>
  <li><code>rustup</code> for managing your Rust toolbelts (different versions/channels of Rust)</li>
  <li><code>cargo</code> for managing your build and for publishing to crates.io, which includes, among other things:
    <ul>
      <li>A <a href="https://doc.rust-lang.org/book/testing.html"><code>test</code> subcommand</a> for running tests</li>
      <li>A <a href="https://doc.rust-lang.org/book/benchmark-tests.html"><code>bench</code> subcommand</a> for running benchmarks</li>
    </ul>
  </li>
  <li><code>rustfmt</code> for formatting your code (runs on cargo projects via <code>cargo fmt</code>)</li>
  <li><code>rustdoc</code> for generating beautiful <a href="https://api.rocket.rs/rocket/">documentation websites</a>.
    <ul>
      <li>This tool supports doc tests with zero additional configuration/setup (runs as part of <code>cargo test</code>)</li>
    </ul>
  </li>
</ul>

<p>Coming from Scala, having all of this set up with no fuss right out of the gate is a breath of fresh air and feels like a big win for productivity. I know there are reasons for Scala’s more <em>modular</em> approach, but I think it would be nice if <em>some</em> of this rubbed off on <del>Scala</del> other languages.</p>

<h4 class="no_toc" id="editoride"><strong>Editor/IDE</strong></h4>

<p>When I first started with Rust, I used IntelliJ and its Rust plugin, but later switched to <a href="https://code.visualstudio.com/">Microsoft Studio Code</a> with the <a href="https://github.com/editor-rs/vscode-rust">Rust plugin</a>, which interfaces very well with Rust Language Server (installable as a <a href="https://github.com/rust-lang-nursery/rls#step-3-install-the-rls">rustup toolchain component</a>). It feels very lightweight, and offers all the assistance I need.</p>

<h3 id="type-system">Type System</h3>

<p>If you lean more towards the functional programming paradigm side of Scala then you’ll probably love the following about Rust’s type system:</p>

<ul>
  <li>No inheritance for data types (there is a bottom type but it’s used much more sparingly)</li>
  <li>No universal equality</li>
  <li>No nulls</li>
  <li>Traits are basically Haskell typeclasses</li>
  <li>Many more primary types (instead of just <code>Int</code>, there are <code>i8</code>, <code>i16</code>, <code>i32</code>, <code>i64</code>, <code>isize</code>, as well as <code>u8</code>, <code>u16</code> … )</li>
</ul>

<p>Essentially Rust has a <em>lot</em> of the good things about Scala’s type system. One thing currently missing from Rust is first class support for higher-kinded types (HKT), which, to be honest, I don’t miss too much because:</p>

<ol>
  <li>There are ways to emulate it to an extent</li>
  <li>Rust’s ownership/memory model tends to push you towards thinking more granularly about your values/references, something which is perhaps in conflict with the kind of programming typically involving HKT-based abstractions.</li>
</ol>

<p>If this still sounds unacceptable, just know that you can get quite far in building reuseable abstractions using Rust’s traits + associated types, and BurnSushi’s <a href="https://github.com/BurntSushi/quickcheck">port of quickcheck</a> is available for writing and enforcing laws.</p>

<p>There are a few interesting things in the pipeline as well:</p>

<ol>
  <li><a href="https://github.com/rust-lang/rfcs/issues/324">Higher kinded polymorphism</a></li>
  <li><a href="https://github.com/rust-lang/rfcs/issues/1930">Pi (value) types</a></li>
</ol>

<p>Adding functionality by using Rust’s traits should be familiar territory if you’ve written typeclass-like stuff in Scala. In fact, Rust’s trait system feels a lot more similar to Haskell’s typeclass system than Scala’s, something which has its pros and cons (no scoping of implementations for a given type, for example). I’ve written an intro/guide to Rust’s trait system in <a href="https://beachape.com/blog/2017/03/12/gentle-intro-to-type-level-recursion-in-Rust-from-zero-to-frunk-hlist-sculpting/">another post</a>.</p>

<h4 class="no_toc" id="type-inference"><strong>Type inference</strong></h4>

<p>Both Rust and Scala have local type inference, and overall, they work in pretty much the same way. In both of them, you need to write the types for your function parameters. In Scala, you can leave the return type off and have the compiler infer it for you, in Rust you can’t (if you leave it off, it is assumed to be <code>()</code>, unit).</p>

<h3 id="macros">Macros</h3>

<p>The <a href="https://doc.rust-lang.org/book/macros.html">Rust macro system</a>, while less powerful than Scala’s, is quite useful for keeping your code DRY and importantly, integrates really well with the rest of the language. It is in fact enabled and available out of the box without any additional dependencies/flags.</p>

<p>Compared with Scala’s macros, Rust’s macros feel like a very natural part of the language, and you’ll run into them quite often when reading/using Rust libraries. In Rust code bases, you’ll often see macros declared and used immediately for the purpose of code generation (e.g. deriving trait implementations for a list of numeric types, or for tuples up to N elements), something that Scala users have generally done “out-of-band” by <a href="http://www.scala-sbt.org/0.13/docs/Howto-Generating-Files.html">hooking into SBT</a> and using another templating or AST-based tool.</p>

<p>On the other hand, in Scala, the usual refrain is “don’t write macros if you don’t have to”. When I compare the approaches the two languages have taken, I feel that Scala may have been overambitious in terms of giving developers power, thus leading to deprecations of APIs that can’t be maintained due to complexity. Indeed, Scala’s metaprogramming toolkit is going through another reform with the migration to <a href="http://scalameta.org/">Scalameta</a>.</p>

<p>Because of its simplicity (the macros work based on a series of patterns), Rust’s macro API may feel limited at first, but if you stick with it, you’ll likely find that you can accomplish more than what you initially thought. For example, the fact that you can build/restructure macro arguments recursively (!) and call the macro again (or even call another macro) is <a href="https://stackoverflow.com/a/40070907/1814775">a fairly powerful tool</a>.</p>

<p>Having said that, in addition to the legacy macro system, Rust will soon be getting <a href="https://github.com/rust-lang/rfcs/blob/master/text/1566-proc-macros.md">procedural macros</a>, which are more similar to what Scala devs are used to seeing. You can get a peek of what procedural macros are like by looking at <a href="https://doc.rust-lang.org/book/procedural-macros.html">custom derives</a>, which I’ve used to implement <a href="https://beachape.com/blog/2017/03/04/labelledgeneric-in-rust-what-why-how/"><code>derive</code> for <code>LabelledGeneric</code> in Rust</a>.</p>

<h3 id="compiler-optimisations">Compiler optimisations</h3>

<p>I think it’s not news to anyone that Rust is fast and efficient. The <a href="https://www.rust-lang.org">home page of the official site</a> says it runs “blazingly fast” and features “zero-cost abstractions”, and the Rust-faithfuls loudly trumpted <a href="https://www.reddit.com/r/rust/comments/5vcrvb/rust_is_now_the_fastest_language_on_knucleotide/">Rust’s defeat of GCC-C in in k-nucleotide</a> a few months ago. Even if you don’t strictly believe in the conclusion of Rust being faster than C as a result of these microbenchmarks, it’s not a big jump to say that Rust performance is in the same ballpark as C, or at least, there is no reason for it not to be (yes, language and implementation are different, compilers make a difference, etc.).</p>

<p>I’m particularly impressed by the Rust compiler’s (though I’m not sure if it’s LLVM?) ability to compile abstractions away so that they operations they enable have zero cost. As a personal anecdote, when I wrote <a href="https://github.com/lloydmeta/frunk#labelledgeneric">LabelledGeneric in frunk</a>, I expected there to be <em>some</em> performance difference between using that abstraction for conversions between structs versus writing the conversions by hand (using <code>From</code>). After all, there are non-negligible differences in the Shapeless version of it in Scala land (<a href="https://github.com/lloydmeta/caseclass-conversion-benches#results">benchmark code</a>):</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class=""><span class="line">// JMH benchmark results
</span><span class="line">
</span><span class="line">[info] Benchmark                               Mode  Cnt     Score     Error  Units
</span><span class="line">[info] Benchmarks.from24FieldsManual           avgt   30    33.626 ±   1.032  ns/op
</span><span class="line">[info] Benchmarks.from24FieldsShapeless        avgt   30  4443.018 ± 101.612  ns/op
</span><span class="line">[info] Benchmarks.from25FieldsManual           avgt   30    33.066 ±   0.650  ns/op
</span><span class="line">[info] Benchmarks.from25FieldsShapeless        avgt   30  4859.432 ± 104.763  ns/op</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>To my surprise, Rust manages to compile frunk’s LabelledGeneric-based, non-trivial, multi-step, unoptimised (other than using the stack, no effort was spent) transform between structs into a zero-cost abstraction. That is, using LabelledGeneric for conversion adds <em>zero</em> overhead over writting the transform by hand (<a href="https://github.com/lloydmeta/frunk/blob/master/benches/labelled.rs">benchmark code</a>):</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class=""><span class="line">// Cargo benchmark results
</span><span class="line">
</span><span class="line">test from_24fields_manual           ... bench:         109 ns/iter (+/- 49)
</span><span class="line">test from_24fields_labelledgeneric  ... bench:         104 ns/iter (+/- 24)
</span><span class="line">test from_25fields_manual           ... bench:         129 ns/iter (+/- 9)
</span><span class="line">test from_25fields_labelledgeneric  ... bench:         131 ns/iter (+/- 13)</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><img class="center" src="https://beachape.com/images/mind-blown.gif" title="'Mind Blown'" /></p>

<p><em>Note</em>: The Rust vs Scala <code>LabelledGeneric</code> benchmarks are not completely apples-to-apples (the Rust version needs to instantiate new source objects every run because of move semantics), but they illustrate the performance difference between LabelledGeneric-based vs handwritten conversion in the two languages.</p>

<h3 id="syntax">Syntax</h3>

<p>Overall, the Rust’s syntax is very similar to Scala’s. Sure, there are small adjustments here and there (<code>let</code> and <code>let mut</code> vs <code>var</code> and <code>val</code>, you’ll be using angle brackets instead of square ones, etc), but overall the languages feel very similar because they’re both C-like languages that are heavily inspired by ML.</p>

<p>Scala people will probably rejoice at things like the <a href="https://doc.rust-lang.org/book/enums.html"><code>enum</code></a> being available (coming soon to Scala via Dotty) as well as partial destructuring (e.g. assuming <code>struct Point { x: i32, y: 32}</code>, you can do <code>let Point { x, .. } = p;</code>).</p>

<p>There are a handful of things that you’ll miss just from muscle memory in the beginning, but are either implemented as libraries or are done slightly differently, such as lazy values (<a href="https://github.com/reem/rust-lazy">rust-lazy</a> or <a href="https://github.com/rust-lang-nursery/lazy-static.rs">lazy-static</a>) and methods such as Option’s <code>foreach</code> (try <code>if let Some(x) = myOption { /* use x here */ }</code> instead). Others are just plain missing, such as by-name parameters (not too big of a deal for me) and keyword arguments (this one hurts).</p>

<p>Oh, in Rust, types and traits are named the same way as in Scala, in CamelCase, but identifiers (bindings and methods) use snake_case, which I still find makes code look longer but isn’t a big problem. You’ll find <a href="https://aturon.github.io/style/naming.html">references</a> that can help if you are unsure and you’ll likely pick it up from reading library code anyways.</p>

<p>As with Swift, I haven’t been able to find conclusive evidence nor credit given to suggest that there was any influence from Scala on Rust …</p>

<h3 id="interoperability-with-c">Interoperability with C</h3>

<p>Rust makes working with C as smooth as possible while sticking to its mantra of keeping things safe. For reference take a look at the section in the Rust book that deals with <a href="https://doc.rust-lang.org/book/ffi.html">FFI</a>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="rust"><span class="line"><span class="c1">// Taken from the Rust book</span>
</span><span class="line"><span class="cp">#[link(name = </span><span class="s">&quot;snappy&quot;</span><span class="cp">)]</span>
</span><span class="line"><span class="n">extern</span> <span class="p">{</span>
</span><span class="line">    <span class="k">fn</span> <span class="n">snappy_max_compressed_length</span><span class="p">(</span><span class="n">source_length</span><span class="o">:</span> <span class="n">size_t</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">size_t</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="k">let</span> <span class="n">x</span> <span class="o">=</span> <span class="k">unsafe</span> <span class="p">{</span> <span class="n">snappy_max_compressed_length</span><span class="p">(</span><span class="m">100</span><span class="p">)</span> <span class="p">};</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The syntax might look familiar to those who have played around with <a href="https://scala-native.readthedocs.io/en/latest/">Scala.Native</a>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="c1">// Taken from Scala Native homepage</span>
</span><span class="line"><span class="nd">@extern</span> <span class="k">object</span> <span class="nc">stdlib</span> <span class="o">{</span>
</span><span class="line">  <span class="k">def</span> <span class="n">malloc</span><span class="o">(</span><span class="n">size</span><span class="k">:</span> <span class="kt">CSize</span><span class="o">)</span><span class="k">:</span> <span class="kt">Ptr</span><span class="o">[</span><span class="kt">Byte</span><span class="o">]</span> <span class="k">=</span> <span class="n">extern</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line">
</span><span class="line"><span class="k">val</span> <span class="n">ptr</span> <span class="k">=</span> <span class="n">stdlib</span><span class="o">.</span><span class="n">malloc</span><span class="o">(</span><span class="mi">32</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Since calling C-code can be unsafe (wrt memory, thread-safety), Rust requires you to wrap your C-calls in unsafe. If you wish to hide this from your users, you can wrap these calls in another function.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="rust"><span class="line"><span class="c1">// Taken from the Rust book</span>
</span><span class="line"><span class="n">pub</span> <span class="k">fn</span> <span class="n">validate_compressed_buffer</span><span class="p">(</span><span class="n">src</span><span class="o">:</span> <span class="o">&amp;</span><span class="p">[</span><span class="k">u8</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">bool</span> <span class="p">{</span>
</span><span class="line">    <span class="k">unsafe</span> <span class="p">{</span>
</span><span class="line">        <span class="n">snappy_validate_compressed_buffer</span><span class="p">(</span><span class="n">src</span><span class="p">.</span><span class="n">as_ptr</span><span class="p">(),</span> <span class="n">src</span><span class="p">.</span><span class="n">len</span><span class="p">()</span> <span class="k">as</span> <span class="n">size_t</span><span class="p">)</span> <span class="o">==</span> <span class="m">0</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Calling Rust code from C is also <a href="https://doc.rust-lang.org/book/ffi.html#callbacks-from-c-code-to-rust-functions">very smooth</a>, something that Scala Native has yet to implement.</p>

<h3 id="the-current-zeitgeist">The current Zeitgeist</h3>

<p>The current “feel” of Rust, and its community (or communities, since libraries/frameworks can have their own) is very welcoming and helpful. It’s also very difficult to quantify so I’ll just list some observations:</p>

<ul>
  <li>Rust stable is only 2 years old and yet there is an official <a href="https://blog.rust-lang.org/2017/03/02/lang-ergonomics.html">ergonomics initiative</a> to reduce friction</li>
  <li>I’ve asked a hand full of questions on StackOverflow and have gotten prompt and helpful answers each time.</li>
  <li>Rust is the #1 “most loved” language in <a href="https://insights.stackoverflow.com/survey/2016#technology-most-loved-dreaded-and-wanted">StackOverflow’s 2017 survey</a></li>
  <li>Rust feels very community driven: its got a very lively <a href="https://github.com/rust-lang/rfcs/issues">RFC repo</a> and since I’ve started tinkering in it I’ve seen at least 3 RFCs make it into the language (type macros, custom derives, and <code>?</code> syntax for <code>Try</code>s).</li>
</ul>

<h2 id="things-ive-adjusted-to">Things I’ve adjusted to</h2>

<h3 id="semicolons">Semicolons</h3>

<p>In Scala, semicolons are optional and <em>almost</em> everything is an expression and therefore return values.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="mi">3</span> <span class="c1">// returns 3</span>
</span><span class="line">
</span><span class="line"><span class="k">val</span> <span class="n">x</span> <span class="k">=</span> <span class="mi">3</span> <span class="c1">// assignment, returns unit</span>
</span><span class="line">
</span><span class="line"><span class="c1">// certain things don&#39;t return anything though, such as import</span>
</span><span class="line"><span class="c1">// statements, and blocks</span>
</span><span class="line">
</span><span class="line"><span class="k">import</span> <span class="nn">com.beachape._</span> <span class="c1">// returns nothing</span>
</span><span class="line"><span class="k">object</span> <span class="nc">Hello</span> <span class="o">{}</span> <span class="c1">// returns nothing</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>In Rust, semicolons are non-optional and <a href="http://rustbyexample.com/expression.html">are of significance</a>. Statements that end with semicolons return <code>()</code> (unit) and those that do not get turned into expressions and thus return a value.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class="rust"><span class="line"><span></span><span class="c1">// taken from the Rust book</span>
</span><span class="line">
</span><span class="line"><span class="kd">let</span><span class="w"> </span><span class="n">x</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">5</span><span class="k">u32</span><span class="p">;</span><span class="w"> </span><span class="c1">// this is a statement</span>
</span><span class="line">
</span><span class="line"><span class="kd">let</span><span class="w"> </span><span class="n">y</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
</span><span class="line"><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">x_squared</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">x</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">x</span><span class="p">;</span><span class="w"></span>
</span><span class="line"><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">x_cube</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">x_squared</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">x</span><span class="p">;</span><span class="w"></span>
</span><span class="line">
</span><span class="line"><span class="w">    </span><span class="c1">// This expression will be assigned to `y`</span>
</span><span class="line"><span class="w">    </span><span class="n">x_cube</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">x_squared</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">x</span><span class="w"></span>
</span><span class="line"><span class="p">};</span><span class="w"></span>
</span><span class="line">
</span><span class="line"><span class="kd">let</span><span class="w"> </span><span class="n">z</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
</span><span class="line"><span class="w">    </span><span class="c1">// The semicolon suppresses this expression and `()` is assigned to `z`</span>
</span><span class="line"><span class="w">    </span><span class="mi">2</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">x</span><span class="p">;</span><span class="w"></span>
</span><span class="line"><span class="p">};</span><span class="w"></span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="ownership-model-stack-vs-heap">Ownership model: Stack vs heap</h3>

<p>Rust’s memory/ownership model is, to me, its main killer feature; it gives you tighter control over the way your program consumes memory while maintaining memory-safety, all without having to ship a garbage collector with the runtime. You get to decide whether to pass things by value or by reference as well as mutability of bindings (including when pattern matching).</p>

<p>There is also the matter of <em>where</em> things get allocated. In Scala (and perhaps with most JVM-based languages), there are a set of rules that decide whether or not something gets put on the stack or on the heap (and thus incur the future cost of garbage collection). In general, the only time something gets allocated on the stack are primitives that do not escape methods as fields of objects, and references to objects which themselves get allocated on the heap. There might be fun runtime tricks the runtime environment does, like escape analysis, but overall, you don’t get to choose.</p>

<p>In Rust, you can choose to allocate things on the heap by instantiating them inside (or transferring ownership of them to) data structures such as <code>Box</code>es or <code>Mutex</code>es, etc. Or you can choose to work with plain values. You get to pick your abstraction based on the cost you want to pay for the features and guarantees they offer, such as safe multi-thread access (<a href="http://manishearth.github.io/blog/2015/05/27/wrapper-types-in-rust-choosing-your-guarantees/">this page</a> is a great reference point). Either way, Rust’s ownership system will, at compile time, make sure that you won’t get data races caused by, for instance, modifying naked values in different threads with no access control.</p>

<p>Scala’s doesn’t give its users the same level of control, so naturally there is some adjustment to be made. However, contrary to the experiences of some others, I didn’t find the ownership stuff <strong>too</strong> hard to understand and get used to. Having experience with Scala’s rich type system meant that the lifetime annotation stuff was quite easy to come to grips with. Maybe doing C and C++ in Comsci courses in university helped too.</p>

<ul>
  <li><strong>Note</strong>: If you’re a glass-half-full kind of person, I guess you can say that Rust <em>forces</em> you to take control rather than <em>gives</em> you control. It’s all a matter of perspective …</li>
  <li><strong>Note 2</strong>: If you find yourself doing lots of <code>.clone()</code>s to get the compiler off your back, maybe you’re doing something not quite right.</li>
</ul>

<h4 class="no_toc" id="mutability"><strong>Mutability</strong></h4>

<p>Mutability deserves to be mentioned separately. If you’re coming from years of Scala (or pretty much any other language that stresses immutability and referential transparency as the road to enlightenment), writing your first <code>let mut</code> or <code>self: &amp;mut</code> can feel dirty.</p>

<p>It took me a while to get used to the idea, but hey, when in Rome, right? If it helps, remember that Rust is focused on speed and efficiency through (near, or actually) zero-cost abstractions and that, thanks to its strict ownership model, data races due to mutability are not a problem.</p>

<h2 id="things-i-wish-were-different">Things I wish were different</h2>

<h3 id="async-io">Async IO</h3>

<p>In Scala, most frameworks that deal with any sort of IO have embraced non-blocking IO by utilising some kind of wrapper data type, such as <code>Future[A]</code>, <code>Task[A]</code>, or <code>IO[A]</code> (usually a Monad), that separates the description of your program from its execution, and identify, by type, the effect of talking with the scary and dirty outside world. This allows you to not block the executing thread when waiting for stuff to happen (such as data to come back) by choosing a suitable execution strategy.</p>

<p>In Rust land, most of the widely-used libraries that I’ve seen, such as the Redis client, and and Hyper (and all the various things built on it, such as Rusoto, Rocket, etc) are all blocking. While this works okay for stuff like single-user utilities, this is suboptimal for applications that are IO heavy and need to serve a large number of concurrent users because your application’s threads can get tied up just waiting for data, leaving it unable to serve other requests. Or, you end up with potentially huge thread pools (à la old school Java Servlet apps..), which seems to go against Rust’s spirit of efficiency.</p>

<p>Having said that I know that advances are being made in this area:</p>

<ul>
  <li><a href="https://tokio.rs/">Tokio</a>, “tokenised IO”, an async IO framework that exposes a Future-based API is making lots of progress. Looks production-ready.</li>
  <li><a href="https://github.com/hyperium/hyper">Hyper</a>, the defacto HTTP client server framework, is going to hit 0.11 soon, which will bring with it a Futures-based API based on Tokio. This will likely (I hope) cascade down to any libs based on Hyper.</li>
</ul>

<p>Also, as of now, it’s painful to transform and return Futures from functions because every transformation causes the concrete type of your object to get chained and tagged with an arbitrary closure type. Since writing the result type is non-optional in Rust, the current solution is to declare your return type as <code>Box&lt;Future&lt;A&gt;&gt;</code>, but it’s less efficient at runtime because boxed <a href="https://doc.rust-lang.org/book/trait-objects.html">trait objects</a> necessitate dynamic dispatch and heap allocation. Hopefully soon “impl Trait” will be released to address this issue (<a href="https://github.com/rust-lang/rust/issues/34511">tracking RFC</a>)</p>

<h3 id="strings">Strings</h3>

<p>In Rust there are a number of ways to represent Strings:</p>

<ul>
  <li><code>String</code> runtime string value, with its contents allocated on the heap</li>
  <li><code>&amp;'a str</code> string with a lifetime
    <ul>
      <li><code>&amp;' static str</code> string with static lifetime (baked into your binary)</li>
    </ul>
  </li>
  <li><code>Vec&lt;u8&gt;</code></li>
</ul>

<p>While I’ve mostly gotten used to this by now and understand the purpose of having each one, I hope the ergonomics initiative can make this situation better to understand, since strings are so ubiquitous. How? I have no idea..maybe I’m just ranting.</p>

<h3 id="cross-compiling">Cross compiling</h3>

<p>Obviously, Scala devs are used to compiling once and running the same binaries everywhere thanks to the JVM (mostly :p). While I don’t expect the same for Rust because it compiles to native machine code, I do wish the cross-compilation tools were better out of the box (for example, like <a href="https://dave.cheney.net/2015/08/22/cross-compilation-with-go-1-5">it is in Golang</a>).</p>

<p>At the moment, depending on the target platform, cross-compilation for Rust is a bit involved and there are several options:</p>

<ol>
  <li>Adding a target toolchain via Rustup and possibly installing some more packages specifically for your target platform (as in <a href="https://hackernoon.com/compiling-rust-for-the-raspberry-pi-49fdcd7df658">this guide</a>)</li>
  <li>Using a pre-built Docker container that holds all the settings/environment variables/installations needed to compile to your target platform (see <a href="https://github.com/Ragnaroek/rust-on-raspberry-docker">rust-on-raspberry-docker</a>)</li>
  <li>Using the <a href="https://github.com/japaric/cross"><code>cross</code></a>, cargo tool that seems like it automates 2.</li>
</ol>

<p>My use case is building for the my Raspberry Pi and I’ve only tried the first 2, but that last one looks to be the winner here and it would be awesome to see something like that included by default as part of rustup or cargo.</p>

<h3 id="odd-headscratchers">Odd headscratchers</h3>

<p>Just a few things I still don’t quite get:</p>

<h4 class="no_toc" id="do-we-actually-need-ref"><strong>Do we actually need <code>ref</code>?</strong></h4>

<p>In my opinion, <code>ref</code> is unnecessarily confusing. From what I can tell, it’s mostly used for binding pointers during pattern matching</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="rust"><span class="line"><span></span><span class="k">match</span><span class="w"> </span><span class="n">some_int</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
</span><span class="line"><span class="w">  </span><span class="c1">// Why not Some(&amp; s) =&gt; ... ???</span>
</span><span class="line"><span class="w">  </span><span class="nb">Some</span><span class="p">(</span><span class="k">ref</span><span class="w"> </span><span class="n">s</span><span class="p">)</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="n">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;{}&quot;</span><span class="p">,</span><span class="n">s</span><span class="p">),</span><span class="w"></span>
</span><span class="line"><span class="w">  </span><span class="nb">None</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="n">unreachable</span><span class="o">!</span><span class="p">()</span><span class="w"></span>
</span><span class="line"><span class="p">}</span><span class="w"></span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 class="no_toc" id="mut"><strong><code>&amp;mut</code></strong></h4>

<p>When handing out references of something bound with let mut, why do i need to do <code>&amp;mut</code> instead of just <code>&amp;</code> ?</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="rust"><span class="line"><span></span><span class="c1">// This uses mut for no reason other than to prove a point.</span>
</span><span class="line"><span class="k">fn</span> <span class="nf">non_empty</span><span class="p">(</span><span class="n">s</span><span class="o">:</span><span class="w"> </span><span class="o">&amp;</span><span class="k">mut</span><span class="w"> </span><span class="nb">String</span><span class="p">)</span><span class="w"> </span><span class="o">-&gt;</span><span class="w"> </span><span class="kt">bool</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="n">s</span><span class="p">.</span><span class="n">len</span><span class="p">()</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="mi">0</span><span class="w"> </span><span class="p">}</span><span class="w"></span>
</span><span class="line">
</span><span class="line"><span class="kd">let</span><span class="w"> </span><span class="k">mut</span><span class="w"> </span><span class="n">string</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s">&quot;hello&quot;</span><span class="p">.</span><span class="n">to_string</span><span class="p">();</span><span class="w"></span>
</span><span class="line"><span class="n">hello</span><span class="p">(</span><span class="o">&amp;</span><span class="k">mut</span><span class="w"> </span><span class="n">string</span><span class="p">);</span><span class="w"> </span><span class="c1">// why can&#39;t this just be hello(&amp; string) ??</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="scoping-of-lifetimes-with-braces"><strong>Scoping of lifetimes with braces</strong></h4>

<p>I somehow managed to code my way into a deadlock when using <code>RWLock</code> because the lifetime-scoping behaviour of <code>{}</code> braces when used with pattern matching is, in my opinion, non-intuitive. If you’re interested, more about it in <a href="https://github.com/rust-lang/rust/issues/37612">this issue</a>.</p>

<h3 id="gimme">Gimme</h3>

<p>I know these things are in the pipeline but I wish they were in Rust yesterday:</p>

<ol>
  <li>Higher kinded types</li>
  <li>“Specialisation”, aka finding the most specific implementations of a traits according to the type of value at the call site. Right now, if you implement a Rust trait <code>for A</code>, then it clashes with every other implementation you write. Specialisation should remedy that (<a href="https://github.com/rust-lang/rust/issues/31844">tracking RFC</a>)</li>
  <li>A REPL. There’s <a href="https://github.com/murarth/rusti">Rusti</a> but I think Rust is missing a trick by not supplying one out of the box in this day and age.</li>
</ol>

<h2 id="conclusion">Conclusion</h2>

<p>That concludes my take on what it’s like to use Rust, from a Scala dev’s perspective, one year on, in 2017. Overall I’m very happy that the me a year ago decided to look into Rust. It’s been a fun and exciting ride: for a while it felt like every few months I was getting new toys that I could immediately use: type macros and custom derives were game changers because they made it ergonomic to write <a href="https://beachape.com/frunk/frunk/macro.Hlist.html">Hlist types</a> by hand, and made <a href="https://beachape.com/frunk/frunk_core/generic/trait.Generic.html">Generic</a>/<a href="https://beachape.com/frunk/frunk_core/labelled/trait.LabelledGeneric.html">LabelledGeneric</a> practical, respectively.</p>

<p>Overall, I believe there are a lot of things in Rust for Scala engineers to like. The community is friendly and diverse so you can easily find a library that interests you to get involved in (shameless plug: contributions to <a href="https://github.com/lloydmeta/frunk">frunk</a> are always welcome). Or, you can do your own side project and write a small system utility or program a microcontroller; online resources are very easy to find. In any case, with Rust, you really can’t say it’s hard to get started !</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Boilerplate-free Struct Transforms in Rust.]]></title>
    <link href="https://beachape.com/blog/2017/04/12/boilerplate-free-struct-transforms-in-rust/"/>
    <updated>2017-04-12T12:45:00+09:00</updated>
    <id>https://beachape.com/blog/2017/04/12/boilerplate-free-struct-transforms-in-rust</id>
    <content type="html"><![CDATA[<p>The last several posts have introduced a number of abstractions, namely HList, Generic, LabelledGeneric, as well as <code>pluck()</code> and <code>sculpt()</code>. Although each of those have impressive party tricks of their own, I’d like to share how you can use them to write a reuseable, generic function that handles converting between structs with mis-matched fields and thus have different <code>LabelledGeneric</code> representations.</p>

<p><img class="center" src="https://beachape.com/images/optimus-prime.gif" title="'All together now'" /></p>

<p>Unlike the last post, this one will be relatively light on recursion and mind-bending type-level stuff; it’s time to sit back and enjoy the fruits of our labour.</p>

<!-- more -->

<h2 id="adding-frunk-to-your-project">Adding Frunk to your project</h2>

<p>Much of this post will make use of <a href="https://github.com/lloydmeta/frunk">Frunk’s</a> types (e.g. <code>HCons</code>, <code>HNil</code>), methods, macros (esp. for describing macro types via the <code>Hlist!</code> <a href="https://beachape.com/frunk/frunk_core/macro.Hlist.html">type macro</a>), and terminology.</p>

<p>It might be easier to follow along if you add Frunk to your project and play around with it. <a href="https://github.com/lloydmeta/frunk">Frunk</a> is published to <a href="https://beachape.com//crates.io/crates/frunk">Crates.io</a>, so to add it your list of dependencies, simply put this in your <code>Cargo.toml</code>:</p>

<p><a href="https://crates.io/crates/frunk"><img src="https://img.shields.io/crates/v/frunk.svg" alt="Crates.io" /></a></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="rust"><span class="line"><span></span><span class="p">[</span><span class="n">dependencies</span><span class="p">]</span><span class="w"></span>
</span><span class="line"><span class="n">frunk</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s">&quot;${latest_version}&quot;</span><span class="w"></span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Alternatively, take a look at the <a href="https://beachape.com/frunk">published Rustdocs</a>.</p>

<h2 id="boilerplate-free-conversions-between-structs">Boilerplate-free conversions between Structs</h2>

<p>Suppose we have a bunch of structs that are similar-ish in terms of their data but ultimately, not necessarily
exactly the same. This means we can’t just use the normal <code>LabelledGeneric</code> <code>convert_from</code> method to convert between them.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
</pre></td><td class="code"><pre><code class="rust"><span class="line"><span></span><span class="cp">#[derive(LabelledGeneric)]</span><span class="w"></span>
</span><span class="line"><span class="k">struct</span> <span class="nc">UserFromDb</span><span class="o">&lt;</span><span class="na">&#39;a</span><span class="o">&gt;</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
</span><span class="line"><span class="w">    </span><span class="n">id</span><span class="o">:</span><span class="w"> </span><span class="kt">u64</span><span class="p">,</span><span class="w"></span>
</span><span class="line"><span class="w">    </span><span class="n">first_name</span><span class="o">:</span><span class="w"> </span><span class="o">&amp;</span><span class="na">&#39;a</span><span class="w"> </span><span class="kt">str</span><span class="p">,</span><span class="w"></span>
</span><span class="line"><span class="w">    </span><span class="n">last_name</span><span class="o">:</span><span class="w"> </span><span class="o">&amp;</span><span class="na">&#39;a</span><span class="w"> </span><span class="kt">str</span><span class="p">,</span><span class="w"></span>
</span><span class="line"><span class="w">    </span><span class="n">email</span><span class="o">:</span><span class="w"> </span><span class="o">&amp;</span><span class="na">&#39;a</span><span class="w"> </span><span class="kt">str</span><span class="p">,</span><span class="w"></span>
</span><span class="line"><span class="w">    </span><span class="n">age</span><span class="o">:</span><span class="w"> </span><span class="kt">u32</span><span class="p">,</span><span class="w"></span>
</span><span class="line"><span class="w">    </span><span class="n">pw_hash</span><span class="o">:</span><span class="w"> </span><span class="o">&amp;</span><span class="na">&#39;a</span><span class="w"> </span><span class="kt">str</span><span class="p">,</span><span class="w"></span>
</span><span class="line"><span class="w">    </span><span class="n">is_admin</span><span class="o">:</span><span class="w"> </span><span class="kt">bool</span><span class="p">,</span><span class="w"></span>
</span><span class="line"><span class="w">    </span><span class="n">created_at</span><span class="o">:</span><span class="w"> </span><span class="kt">i64</span><span class="w"></span>
</span><span class="line"><span class="p">}</span><span class="w"></span>
</span><span class="line">
</span><span class="line"><span class="c1">// Holds User data for rendering in a front-end view</span>
</span><span class="line"><span class="c1">// or for sending over an API. Striped of any sensitive</span>
</span><span class="line"><span class="c1">// information</span>
</span><span class="line"><span class="cp">#[derive(LabelledGeneric)]</span><span class="w"></span>
</span><span class="line"><span class="k">struct</span> <span class="nc">PresentableUser</span><span class="o">&lt;</span><span class="na">&#39;a</span><span class="o">&gt;</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
</span><span class="line"><span class="w">    </span><span class="n">last_name</span><span class="o">:</span><span class="w"> </span><span class="o">&amp;</span><span class="na">&#39;a</span><span class="w"> </span><span class="kt">str</span><span class="p">,</span><span class="w"></span>
</span><span class="line"><span class="w">    </span><span class="n">first_name</span><span class="o">:</span><span class="w"> </span><span class="o">&amp;</span><span class="na">&#39;a</span><span class="w"> </span><span class="kt">str</span><span class="p">,</span><span class="w"></span>
</span><span class="line"><span class="w">    </span><span class="n">age</span><span class="o">:</span><span class="w"> </span><span class="kt">u32</span><span class="p">,</span><span class="w"></span>
</span><span class="line"><span class="w">    </span><span class="n">created_at</span><span class="o">:</span><span class="w"> </span><span class="kt">i64</span><span class="w"></span>
</span><span class="line"><span class="p">}</span><span class="w"></span>
</span><span class="line">
</span><span class="line"><span class="c1">// Holds data for sending a User over our internal API</span>
</span><span class="line"><span class="cp">#[derive(LabelledGeneric)]</span><span class="w"></span>
</span><span class="line"><span class="k">struct</span> <span class="nc">InternalApiUser</span><span class="o">&lt;</span><span class="na">&#39;a</span><span class="o">&gt;</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
</span><span class="line"><span class="w">    </span><span class="n">id</span><span class="o">:</span><span class="w"> </span><span class="kt">u64</span><span class="p">,</span><span class="w"></span>
</span><span class="line"><span class="w">    </span><span class="n">first_name</span><span class="o">:</span><span class="w"> </span><span class="o">&amp;</span><span class="na">&#39;a</span><span class="w"> </span><span class="kt">str</span><span class="p">,</span><span class="w"></span>
</span><span class="line"><span class="w">    </span><span class="n">last_name</span><span class="o">:</span><span class="w"> </span><span class="o">&amp;</span><span class="na">&#39;a</span><span class="w"> </span><span class="kt">str</span><span class="p">,</span><span class="w"></span>
</span><span class="line"><span class="w">    </span><span class="n">age</span><span class="o">:</span><span class="w"> </span><span class="kt">u32</span><span class="p">,</span><span class="w"></span>
</span><span class="line"><span class="w">    </span><span class="n">email</span><span class="o">:</span><span class="w"> </span><span class="o">&amp;</span><span class="na">&#39;a</span><span class="w"> </span><span class="kt">str</span><span class="p">,</span><span class="w"></span>
</span><span class="line"><span class="w">    </span><span class="n">is_admin</span><span class="o">:</span><span class="w"> </span><span class="kt">bool</span><span class="p">,</span><span class="w"></span>
</span><span class="line"><span class="w">    </span><span class="n">created_at</span><span class="o">:</span><span class="w"> </span><span class="kt">i64</span><span class="w"></span>
</span><span class="line"><span class="p">}</span><span class="w"></span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>In our example, <code>PresentableUser</code> and <code>InternalApiUser</code> structs have fields that are subsets of the fields in <code>UserFromDb</code>, and not in the same order either. The scenario is that <code>UserFromDb</code> is a struct that we get from reading our persistence layer, and the other 2 are types that we use in our application for business logic.</p>

<p>Assuming a flow where we want to be able to go from <code>UserFromDb</code> to either <code>PresentableUser</code> or <code>InternalApiUser</code>, the idea is that we don’t want be holding on to sensitive data like <code>pw_hash</code> when we don’t need to, thus lowering the risk of accidentally leaking said data (e.g. serialising it by accident, or by rendering it in debug messages, etc).</p>

<p>While we could go about writing <code>From</code>s by hand for each of these, and for every other time a similar situation arises, that’s quite a lot of boilerplate to write and maintain. Thankfully, we can make use of Frunk’s <code>LabelledGeneric</code> and <code>Sculptor</code> to write a single, reuseable generic function.</p>

<p>Note, for a review of:</p>

<ul>
  <li><code>LabelledGeneric</code>, see <a href="https://beachape.com/blog/2017/03/04/labelledgeneric-in-rust-what-why-how/">this post</a></li>
  <li><code>Sculptor</code>, see <a href="https://beachape.com/blog/2017/03/12/gentle-intro-to-type-level-recursion-in-Rust-from-zero-to-frunk-hlist-sculpting/">this post</a></li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class="rust"><span class="line"><span></span><span class="sd">/// Converts from another type A into B assuming that A and B have labelled generic representations</span>
</span><span class="line"><span class="sd">/// that can be sculpted into each other.</span>
</span><span class="line"><span class="sd">///</span>
</span><span class="line"><span class="sd">/// Note that this method tosses away the &quot;remainder&quot; of the sculpted representation.</span>
</span><span class="line"><span class="k">fn</span> <span class="nf">transform_from</span><span class="o">&lt;</span><span class="n">A</span><span class="p">,</span><span class="w"> </span><span class="n">B</span><span class="p">,</span><span class="w"> </span><span class="n">Indices</span><span class="o">&gt;</span><span class="p">(</span><span class="n">a</span><span class="o">:</span><span class="w"> </span><span class="n">A</span><span class="p">)</span><span class="w"> </span><span class="o">-&gt;</span><span class="w"> </span><span class="n">B</span><span class="w"></span>
</span><span class="line"><span class="w">    </span><span class="k">where</span><span class="w"> </span><span class="n">A</span><span class="o">:</span><span class="w"> </span><span class="n">LabelledGeneric</span><span class="p">,</span><span class="w"></span>
</span><span class="line"><span class="w">          </span><span class="n">B</span><span class="o">:</span><span class="w"> </span><span class="n">LabelledGeneric</span><span class="p">,</span><span class="w"></span>
</span><span class="line"><span class="c1">// The labelled representation of A must be sculpt-able into the labelled representation of Self</span>
</span><span class="line"><span class="w">          </span><span class="o">&lt;</span><span class="n">A</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="n">LabelledGeneric</span><span class="o">&gt;::</span><span class="n">Repr</span><span class="o">:</span><span class="w"> </span><span class="n">Sculptor</span><span class="o">&lt;&lt;</span><span class="n">B</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="n">LabelledGeneric</span><span class="o">&gt;::</span><span class="n">Repr</span><span class="p">,</span><span class="w"> </span><span class="n">Indices</span><span class="o">&gt;</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
</span><span class="line"><span class="w">    </span><span class="c1">// Turn A into its labelled generic representation</span>
</span><span class="line"><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">a_gen</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">&lt;</span><span class="n">A</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="n">LabelledGeneric</span><span class="o">&gt;::</span><span class="n">into</span><span class="p">(</span><span class="n">a</span><span class="p">);</span><span class="w"></span>
</span><span class="line"><span class="w">    </span><span class="c1">// Sculpt the generic labelled representation of A into the labelled generic representation</span>
</span><span class="line"><span class="w">    </span><span class="c1">// of B. We ignore the remainder.</span>
</span><span class="line"><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="p">(</span><span class="n">b_gen</span><span class="p">,</span><span class="w"> </span><span class="n">_</span><span class="p">)</span><span class="o">:</span><span class="w"> </span><span class="p">(</span><span class="o">&lt;</span><span class="n">B</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="n">LabelledGeneric</span><span class="o">&gt;::</span><span class="n">Repr</span><span class="p">,</span><span class="w"> </span><span class="n">_</span><span class="p">)</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">a_gen</span><span class="p">.</span><span class="n">sculpt</span><span class="p">();</span><span class="w"></span>
</span><span class="line"><span class="w">    </span><span class="c1">// Turn the lablled generic representation of B into B</span>
</span><span class="line"><span class="w">    </span><span class="o">&lt;</span><span class="n">B</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="n">LabelledGeneric</span><span class="o">&gt;::</span><span class="n">from</span><span class="p">(</span><span class="n">b_gen</span><span class="p">)</span><span class="w"></span>
</span><span class="line"><span class="p">}</span><span class="w"></span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Not bad. The body of the function is literally 3 lines long :) Now we can do this:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="rust"><span class="line"><span></span><span class="kd">let</span><span class="w"> </span><span class="n">u_db</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">UserFromDb</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
</span><span class="line"><span class="w">    </span><span class="n">id</span><span class="o">:</span><span class="w"> </span><span class="mi">3</span><span class="p">,</span><span class="w"></span>
</span><span class="line"><span class="w">    </span><span class="n">first_name</span><span class="o">:</span><span class="w"> </span><span class="s">&quot;Joe&quot;</span><span class="p">,</span><span class="w"></span>
</span><span class="line"><span class="w">    </span><span class="n">last_name</span><span class="o">:</span><span class="w"> </span><span class="s">&quot;Blow&quot;</span><span class="p">,</span><span class="w"></span>
</span><span class="line"><span class="w">    </span><span class="n">email</span><span class="o">:</span><span class="w"> </span><span class="s">&quot;joe@gmail.com&quot;</span><span class="p">,</span><span class="w"></span>
</span><span class="line"><span class="w">    </span><span class="n">age</span><span class="o">:</span><span class="w"> </span><span class="mi">30</span><span class="p">,</span><span class="w"></span>
</span><span class="line"><span class="w">    </span><span class="n">pw_hash</span><span class="o">:</span><span class="w"> </span><span class="s">&quot;asd35235adsf&quot;</span><span class="p">,</span><span class="w"></span>
</span><span class="line"><span class="w">    </span><span class="n">is_admin</span><span class="o">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w"></span>
</span><span class="line"><span class="w">    </span><span class="n">created_at</span><span class="o">:</span><span class="w"> </span><span class="mi">12345</span><span class="p">,</span><span class="w"></span>
</span><span class="line"><span class="p">};</span><span class="w"></span>
</span><span class="line">
</span><span class="line"><span class="kd">let</span><span class="w"> </span><span class="n">p_user</span><span class="o">:</span><span class="w"> </span><span class="n">PresentableUser</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">transform_from</span><span class="p">(</span><span class="n">udb</span><span class="p">);</span><span class="w"></span>
</span><span class="line"><span class="c1">// or</span>
</span><span class="line"><span class="kd">let</span><span class="w"> </span><span class="n">i_user</span><span class="o">:</span><span class="w"> </span><span class="n">InternalApiUser</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">transform_from</span><span class="p">(</span><span class="n">udb</span><span class="p">);</span><span class="w"></span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>In actuality, Frunk already <a href="https://beachape.com/frunk/frunk_core/labelled/fn.transform_from.html">ships with this function</a> so you can use it out of the box.</p>

<h2 id="conclusion">Conclusion</h2>

<p>Often times, you’ll hear that heterogeneous lists enable developers to write reuseable generic functions because they abstract over arity and types, and it might not be obvious exactly what that means on a practical level. The example shown in this post just scratches the surface of what is made possible through <code>HList</code> and <code>LabelledGeneric</code>, and there are definitely more creative usages out there, such as building of boilerplate-free (e.g. JSON) codecs (hint: look to Haskell and Scala libs for more).</p>

<p>As usual, please give it a spin and chime in with any questions, corrections, and suggestions !</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gentle Intro to Type-level Recursion in Rust: From Zero to HList Sculpting.]]></title>
    <link href="https://beachape.com/blog/2017/03/12/gentle-intro-to-type-level-recursion-in-Rust-from-zero-to-frunk-hlist-sculpting/"/>
    <updated>2017-03-12T12:03:00+09:00</updated>
    <id>https://beachape.com/blog/2017/03/12/gentle-intro-to-type-level-recursion-in-Rust-from-zero-to-frunk-hlist-sculpting</id>
    <content type="html"><![CDATA[<blockquote>
  <p>Getting the type signature right was 99% of the work in implementing <code>pluck</code> and <code>sculpt</code> for <code>HList</code>s in Frunk.</p>

  <p>Here’s what I’ve learnt along the way: what works, and what doesn’t work (and why).</p>
</blockquote>

<p>As you may already know, Rust eschews the now-mainstream object-oriented model of programming (e.g. in Java, where behaviour for a type is added to the type/interface definition directly) in favour of a typeclass-like approach (e.g. in Haskell where you can ad-hoc add behaviour to a type separate from the type definition itself).  Both approaches have their merits, and indeed, some languages, such as Scala, allow for a mix of both.</p>

<p>For those coming from the OOP school of programming, Rust’s system of adding behaviour to types might be daunting to come to grips with. At a glance, it might not be obvious how to get things done, especially when what you want to build goes beyond implementing <code>Debug</code> or <code>Eq</code>. If your abstraction has a certain degree of type-level recursiveness, it might be even harder to see the light at the end of the tunnel, and the lack of online material covering that sort of thing doesn’t help.</p>

<p>As a Scala guy with Haskell knowledge, I’m no stranger to typeclasses, but it took me a while and several failed attempts to figure out how to implement the following:</p>

<ol>
  <li>Plucking out a value by type from an HList and getting back the remainder **</li>
  <li>Sculpting an HList into another shape, and getting back the remainder (in the case where we only want a smaller subset than the original) **</li>
</ol>

<p>Of course, the type signature of the finished product can be intimidating !</p>

<p><img class="center" src="https://beachape.com/images/sculptor-typesig.png" title="'6 type parameters, 1 fills in a type parameter on the trait that is recursive, and a recursive associated type. WTF? '" /></p>

<p>In this post, I’ll briefly introduce Rust’s trait system and present my mental model for writing trait implementations that deal with type-level recursion. To do so, I will go through how <code>pluck()</code> and <code>sculpt()</code> were written in Frunk, as well as recount some of my failed approaches so you can learn from my mistakes.</p>

<p>Hopefully, by the end of it, you’ll be able to look at signatures like the one above and not go “WTF”, but rather, “FTW”.</p>

<!-- more -->

<h2 class="no_toc" id="type-level-recursion">“Type-level recursion”?</h2>

<p>Ok, I may be butchering/making up a term, but by “type-level recursion”, I’m referring to recursive expansions/evaluations of types  at compile-time, particularly for the purpose of proving that a certain typeclass instance exists at a function call site. This is distinct from runtime “value”-level recursion that occurs when you call a function that calls itself.</p>

<p>If you’re having trouble understanding the difference:</p>

<ul>
  <li><strong>Value-level recursion</strong>: If it can’t find an exit condition, your program is stuck running forever.</li>
  <li><strong>Type-level recursion</strong>: If it can’t expand/find the exit-type, your compiler will either give up or never finish compiling; you won’t even have a program to run.</li>
</ul>

<h2 class="no_toc" id="outline">Outline</h2>
<ul id="markdown-toc">
  <li><a href="#basic-gist-of-rust-typeclasses-traits">Basic Gist of Rust typeclasses (traits)</a>    <ul>
      <li><a href="#dependent-trait-implementations">Dependent trait implementations</a></li>
      <li><a href="#mental-model-for-type-level-recursion">Mental model for type-level recursion</a>        <ul>
          <li><a href="#recursion-on-the-value-level">Recursion on the value level</a></li>
          <li><a href="#recursion-on-the-type-level">Recursion on the type level</a></li>
        </ul>
      </li>
    </ul>
  </li>
  <li><a href="#what-the-frunk">What the Frunk?</a></li>
  <li><a href="#plucking-from-hlists">Plucking from HLists</a>    <ul>
      <li><a href="#implementation-intuition">Implementation intuition</a></li>
      <li><a href="#first-attempt">First attempt</a></li>
      <li><a href="#second-attempt">Second attempt</a></li>
      <li><a href="#type-level-walkthrough">Type-level walkthrough</a></li>
    </ul>
  </li>
  <li><a href="#sculpting-hlists">Sculpting HLists</a>    <ul>
      <li><a href="#implementation-intuition-1">Implementation intuition</a></li>
      <li><a href="#first-attempt-1">First attempt</a></li>
      <li><a href="#second-attempt-1">Second attempt</a></li>
    </ul>
  </li>
  <li><a href="#conclusion">Conclusion</a>    <ul>
      <li><a href="#credit">Credit</a></li>
    </ul>
  </li>
</ul>

<h2 id="basic-gist-of-rust-typeclasses-traits">Basic Gist of Rust typeclasses (traits)</h2>

<p>In Rust, typeclass is spelt <code>trait</code>, and although that word is somewhat ambiguous and overloaded with different meanings depending on context (e.g. in Scala), I’ll try to stick with it throughout this article. Subsequently, a typeclass instance is called an “implementation” (<code>impl</code> in code) in Rust.</p>

<p>Here is a basic example of a simple trait and implementation for a type <code>Circle</code>, taken from the official <a href="https://doc.rust-lang.org/book/traits.html">Rust book</a>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
</pre></td><td class="code"><pre><code class="rust"><span class="line"><span></span><span class="c1">// A trait that allows you to call &quot;area&quot; on something</span>
</span><span class="line"><span class="k">trait</span><span class="w"> </span><span class="n">HasArea</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
</span><span class="line"><span class="w">    </span><span class="k">fn</span> <span class="nf">area</span><span class="p">(</span><span class="o">&amp;</span><span class="bp">self</span><span class="p">)</span><span class="w"> </span><span class="o">-&gt;</span><span class="w"> </span><span class="kt">f64</span><span class="p">;</span><span class="w"></span>
</span><span class="line"><span class="p">}</span><span class="w"></span>
</span><span class="line">
</span><span class="line"><span class="c1">// Our type</span>
</span><span class="line"><span class="k">struct</span> <span class="nc">Circle</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
</span><span class="line"><span class="w">    </span><span class="n">x</span><span class="o">:</span><span class="w"> </span><span class="kt">f64</span><span class="p">,</span><span class="w"></span>
</span><span class="line"><span class="w">    </span><span class="n">y</span><span class="o">:</span><span class="w"> </span><span class="kt">f64</span><span class="p">,</span><span class="w"></span>
</span><span class="line"><span class="w">    </span><span class="n">radius</span><span class="o">:</span><span class="w"> </span><span class="kt">f64</span><span class="p">,</span><span class="w"></span>
</span><span class="line"><span class="p">}</span><span class="w"></span>
</span><span class="line">
</span><span class="line"><span class="c1">// Our implementation of HasArea for Circle</span>
</span><span class="line"><span class="k">impl</span><span class="w"> </span><span class="n">HasArea</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="n">Circle</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
</span><span class="line"><span class="w">    </span><span class="k">fn</span> <span class="nf">area</span><span class="p">(</span><span class="o">&amp;</span><span class="bp">self</span><span class="p">)</span><span class="w"> </span><span class="o">-&gt;</span><span class="w"> </span><span class="kt">f64</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
</span><span class="line"><span class="w">        </span><span class="n">std</span><span class="o">::</span><span class="kt">f64</span><span class="o">::</span><span class="n">consts</span><span class="o">::</span><span class="n">PI</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">radius</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="bp">self</span><span class="p">.</span><span class="n">radius</span><span class="p">)</span><span class="w"></span>
</span><span class="line"><span class="w">    </span><span class="p">}</span><span class="w"></span>
</span><span class="line"><span class="p">}</span><span class="w"></span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>For comparison, here is the Haskell equivalent</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="haskell"><span class="line"><span></span><span class="c1">-- Our typeclass</span>
</span><span class="line"><span class="kr">class</span> <span class="kt">HasArea</span> <span class="n">a</span> <span class="kr">where</span>
</span><span class="line">  <span class="n">area</span> <span class="ow">::</span> <span class="n">a</span> <span class="ow">-&gt;</span> <span class="kt">Float</span>
</span><span class="line">
</span><span class="line"><span class="c1">-- Our type</span>
</span><span class="line"><span class="kr">data</span> <span class="kt">Circle</span> <span class="ow">=</span> <span class="kt">Circle</span> <span class="p">{</span> <span class="n">x</span> <span class="ow">::</span> <span class="kt">Float</span><span class="p">,</span> <span class="n">y</span> <span class="ow">::</span> <span class="kt">Float</span><span class="p">,</span> <span class="n">radius</span> <span class="ow">::</span> <span class="kt">Float</span> <span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="c1">-- Our typeclass instance for Circle</span>
</span><span class="line"><span class="kr">instance</span> <span class="kt">HasArea</span> <span class="kt">Circle</span> <span class="kr">where</span>
</span><span class="line">  <span class="n">area</span> <span class="n">c</span> <span class="ow">=</span> <span class="n">pi</span> <span class="o">*</span> <span class="n">radius</span> <span class="n">c</span> <span class="o">^</span> <span class="mi">2</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>In both of these cases, what we see is</p>

<ol>
  <li>There is a trait, <code>HasArea</code>, which describes behaviour (must implement an <code>area</code> function that takes as its first argument the implementing type) for types that want to belong to, or join it.</li>
  <li>Next, we have a type, <code>Circle</code>, which has one purpose: hold data.</li>
  <li>Then, we add <code>Circle</code> to the <code>HasArea</code> trait by implementing an instance of the trait, fulfilling the contract by writing the <code>area</code> function.</li>
</ol>

<p>The key difference between this approach and the OOP approach is that adding behaviour to an existing type does not require us to edit the original type declaration, nor does it require us to create a wrapper type. This allows us to add behaviour to types that do not belong to us (e.g. we don’t have access to its source)! This flexibility is a key advantage of the typeclass/trait approach. For a much more detailed comparison between OOP and typeclasses (traits), checkout this <a href="https://wiki.haskell.org/OOP_vs_type_classes">wiki entry on haskell.org</a>.</p>

<h3 id="dependent-trait-implementations">Dependent trait implementations</h3>

<p>Sometimes, you’ll want to write trait implementations for data types that have one or more type parameters. In these cases, your trait implementation will likely require that implementations of the trait exist for each of those type parameters.</p>

<p>For example</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
</pre></td><td class="code"><pre><code class="rust"><span class="line"><span></span><span class="c1">// The Add trait, which exists in core::ops, copied verbatim here.</span>
</span><span class="line"><span class="c1">//</span>
</span><span class="line"><span class="c1">// Note that the Add trait has a right hand side (RHS) type parameter</span>
</span><span class="line"><span class="c1">// to represent the type that the implementing trait is being added</span>
</span><span class="line"><span class="c1">// with.</span>
</span><span class="line"><span class="k">pub</span><span class="w"> </span><span class="k">trait</span><span class="w"> </span><span class="n">Add</span><span class="o">&lt;</span><span class="n">RHS</span><span class="o">=</span><span class="n">Self</span><span class="o">&gt;</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
</span><span class="line"><span class="w">    </span><span class="sd">/// The resulting type after applying the `+` operator</span>
</span><span class="line"><span class="w">    </span><span class="cp">#[stable(feature = </span><span class="s">&quot;rust1&quot;</span><span class="cp">, since = </span><span class="s">&quot;1.0.0&quot;</span><span class="cp">)]</span><span class="w"></span>
</span><span class="line"><span class="w">    </span><span class="k">type</span> <span class="nc">Output</span><span class="p">;</span><span class="w"></span>
</span><span class="line">
</span><span class="line"><span class="w">    </span><span class="sd">/// The method for the `+` operator</span>
</span><span class="line"><span class="w">    </span><span class="cp">#[stable(feature = </span><span class="s">&quot;rust1&quot;</span><span class="cp">, since = </span><span class="s">&quot;1.0.0&quot;</span><span class="cp">)]</span><span class="w"></span>
</span><span class="line"><span class="w">    </span><span class="k">fn</span> <span class="nf">add</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="w"> </span><span class="n">rhs</span><span class="o">:</span><span class="w"> </span><span class="n">RHS</span><span class="p">)</span><span class="w"> </span><span class="o">-&gt;</span><span class="w"> </span><span class="n">Self</span><span class="o">::</span><span class="n">Output</span><span class="p">;</span><span class="w"></span>
</span><span class="line"><span class="p">}</span><span class="w"></span>
</span><span class="line">
</span><span class="line"><span class="c1">// Our Cup struct. We signal that its contents can be</span>
</span><span class="line"><span class="c1">// anything because it has an unrestricted type parameter</span>
</span><span class="line"><span class="c1">// of A</span>
</span><span class="line"><span class="k">struct</span> <span class="nc">Cup</span><span class="o">&lt;</span><span class="n">A</span><span class="o">&gt;</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
</span><span class="line"><span class="w">    </span><span class="n">content</span><span class="o">:</span><span class="w"> </span><span class="n">A</span><span class="p">,</span><span class="w"></span>
</span><span class="line"><span class="p">}</span><span class="w"></span>
</span><span class="line">
</span><span class="line"><span class="c1">// In our case, we want to implement Add&lt;Cup&lt;A&gt;&gt; because we want to add</span>
</span><span class="line"><span class="c1">// 2 cups with the same content type together, but we don&#39;t know in</span>
</span><span class="line"><span class="c1">// advance what kind of content would be in them; hence we keep</span>
</span><span class="line"><span class="c1">// it parameterised with A.</span>
</span><span class="line"><span class="c1">//</span>
</span><span class="line"><span class="c1">// Thus, we write an implementation of Cup for Add, but add a restriction:</span>
</span><span class="line"><span class="c1">// the implementation only exists for Cups where the content is bound to a</span>
</span><span class="line"><span class="c1">// type that is already implements the Add trait (thus &quot;A: Add&lt;A&gt;&quot;)</span>
</span><span class="line"><span class="k">impl</span><span class="o">&lt;</span><span class="n">A</span><span class="o">:</span><span class="w"> </span><span class="n">Add</span><span class="o">&lt;</span><span class="n">A</span><span class="o">&gt;&gt;</span><span class="w"> </span><span class="n">Add</span><span class="o">&lt;</span><span class="n">Cup</span><span class="o">&lt;</span><span class="n">A</span><span class="o">&gt;&gt;</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="n">Cup</span><span class="o">&lt;</span><span class="n">A</span><span class="o">&gt;</span><span class="w"></span>
</span><span class="line"><span class="p">{</span><span class="w"></span>
</span><span class="line"><span class="w">    </span><span class="c1">// This is what is called an associated type.</span>
</span><span class="line"><span class="w">    </span><span class="c1">// Here, Output is the type that will be returned</span>
</span><span class="line"><span class="w">    </span><span class="c1">// from the add operation</span>
</span><span class="line"><span class="w">    </span><span class="k">type</span> <span class="nc">Output</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Cup</span><span class="o">&lt;&lt;</span><span class="w"> </span><span class="n">A</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="n">Add</span><span class="o">&lt;</span><span class="n">A</span><span class="o">&gt;</span><span class="w"> </span><span class="o">&gt;::</span><span class="n">Output</span><span class="o">&gt;</span><span class="p">;</span><span class="w"></span>
</span><span class="line">
</span><span class="line"><span class="w">    </span><span class="k">fn</span> <span class="nf">add</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="w"> </span><span class="n">rhs</span><span class="o">:</span><span class="w"> </span><span class="n">Cup</span><span class="o">&lt;</span><span class="n">A</span><span class="o">&gt;</span><span class="p">)</span><span class="w"> </span><span class="o">-&gt;</span><span class="w"> </span><span class="n">Self</span><span class="o">::</span><span class="n">Output</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
</span><span class="line"><span class="w">        </span><span class="c1">// Here we make use of the Add trait for A to add</span>
</span><span class="line"><span class="w">        </span><span class="c1">// the contents from both cups together</span>
</span><span class="line"><span class="w">        </span><span class="kd">let</span><span class="w"> </span><span class="n">added_content</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="bp">self</span><span class="p">.</span><span class="n">content</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="n">rhs</span><span class="p">.</span><span class="n">content</span><span class="p">);</span><span class="w"></span>
</span><span class="line"><span class="w">        </span><span class="n">Cup</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="n">content</span><span class="o">:</span><span class="w"> </span><span class="n">added_content</span><span class="w"> </span><span class="p">}</span><span class="w"></span>
</span><span class="line"><span class="w">    </span><span class="p">}</span><span class="w"></span>
</span><span class="line"><span class="p">}</span><span class="w"></span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Making <code>Cup</code> part of the <code>Add</code> typeclass will allow us to call <code>cup_a + cup_b</code>, which is kind of neat. One thing to take note of here is the <code>Output</code> associated type. Pay attention to the fact that in our implementation of <code>Add</code> for <code>Cup</code>, the type of <code>Output</code> is <code>Cup&lt;&lt; A as Add&lt;A&gt; &gt;::Output&gt;</code>, which means that ultimately, the output of <code>Add</code>ing of 2 <code>Cup&lt;A&gt;</code>s will depend on what the <code>Output</code> of <code>Add&lt;A&gt;</code> is.  The <code>&lt; A as Add&lt;A&gt; &gt;</code> part can be read as “summon the <code>Add&lt;A&gt;</code> implementation for the type A” (the compiler will do the actual lookup work here; if one doesn’t exist, your code will fail to compile), and the <code>::Output</code> following it means “retrieve the associated type, Output, from <em>that</em> implementation”. Let this sink in, because it’s important in order for us to move towards the concept of type-level recursion for traits.</p>

<p>Here is another way to write the same thing: using <a href="https://doc.rust-lang.org/book/traits.html#where-clause">where clause</a> syntax, so that the restriction goes at the end of the initial type signature in our implementation declaration. This is useful when you have more than 2 or 3 type parameters for your typeclass instance and you have a complex set of restraints. Using <code>where</code> can help cut down on initial noise.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="rust"><span class="line"><span></span><span class="k">impl</span><span class="o">&lt;</span><span class="n">A</span><span class="o">&gt;</span><span class="w"> </span><span class="n">Add</span><span class="o">&lt;</span><span class="n">Cup</span><span class="o">&lt;</span><span class="n">A</span><span class="o">&gt;&gt;</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="n">Cup</span><span class="o">&lt;</span><span class="n">A</span><span class="o">&gt;</span><span class="w"></span>
</span><span class="line"><span class="w">    </span><span class="k">where</span><span class="w"> </span><span class="n">A</span><span class="o">:</span><span class="w"> </span><span class="n">Add</span><span class="o">&lt;</span><span class="n">A</span><span class="o">&gt;</span><span class="w"></span>
</span><span class="line"><span class="p">{</span><span class="w"></span>
</span><span class="line"><span class="w">    </span><span class="k">type</span> <span class="nc">Output</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Cup</span><span class="o">&lt;&lt;</span><span class="n">A</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="n">Add</span><span class="o">&lt;</span><span class="n">A</span><span class="o">&gt;&gt;::</span><span class="n">Output</span><span class="o">&gt;</span><span class="p">;</span><span class="w"></span>
</span><span class="line">
</span><span class="line"><span class="w">    </span><span class="k">fn</span> <span class="nf">add</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="w"> </span><span class="n">rhs</span><span class="o">:</span><span class="w"> </span><span class="n">Cup</span><span class="o">&lt;</span><span class="n">A</span><span class="o">&gt;</span><span class="p">)</span><span class="w"> </span><span class="o">-&gt;</span><span class="w"> </span><span class="n">Self</span><span class="o">::</span><span class="n">Output</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
</span><span class="line"><span class="w">        </span><span class="kd">let</span><span class="w"> </span><span class="n">added_content</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="bp">self</span><span class="p">.</span><span class="n">content</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="n">rhs</span><span class="p">.</span><span class="n">content</span><span class="p">);</span><span class="w"></span>
</span><span class="line"><span class="w">        </span><span class="n">Cup</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="n">content</span><span class="o">:</span><span class="w"> </span><span class="n">added_content</span><span class="w"> </span><span class="p">}</span><span class="w"></span>
</span><span class="line"><span class="w">    </span><span class="p">}</span><span class="w"></span>
</span><span class="line"><span class="p">}</span><span class="w"></span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Here’s another, more general implementation of <code>Add</code> for <code>Cup</code>. It’s more general because it lets us add <code>Cup</code>s of <em>different</em> content types, provided that there exists an <code>Add&lt;B&gt;</code> implementation for whatever concrete type is bound to <code>A</code> in any given <code>Cup&lt;A&gt;</code>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class="rust"><span class="line"><span></span><span class="c1">// Instead of just A, we introduce another type parameter, B, which</span>
</span><span class="line"><span class="c1">// is passed as the type parameter for the Cup that we want to add with</span>
</span><span class="line"><span class="k">impl</span><span class="o">&lt;</span><span class="n">A</span><span class="p">,</span><span class="w"> </span><span class="n">B</span><span class="o">&gt;</span><span class="w"> </span><span class="n">Add</span><span class="o">&lt;</span><span class="n">Cup</span><span class="o">&lt;</span><span class="n">B</span><span class="o">&gt;&gt;</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="n">Cup</span><span class="o">&lt;</span><span class="n">A</span><span class="o">&gt;</span><span class="w"></span>
</span><span class="line"><span class="w">    </span><span class="c1">// This next line means &quot;A must have an Add&lt;B&gt; implementation&quot;</span>
</span><span class="line"><span class="w">    </span><span class="k">where</span><span class="w"> </span><span class="n">A</span><span class="o">:</span><span class="w"> </span><span class="n">Add</span><span class="o">&lt;</span><span class="n">B</span><span class="o">&gt;</span><span class="w"></span>
</span><span class="line"><span class="p">{</span><span class="w"></span>
</span><span class="line"><span class="w">    </span><span class="c1">// The Output associated type now depends on the Output of &lt;A as Add&lt;B&gt;&gt;</span>
</span><span class="line"><span class="w">    </span><span class="k">type</span> <span class="nc">Output</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Cup</span><span class="o">&lt;&lt;</span><span class="n">A</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="n">Add</span><span class="o">&lt;</span><span class="n">B</span><span class="o">&gt;&gt;::</span><span class="n">Output</span><span class="o">&gt;</span><span class="p">;</span><span class="w"></span>
</span><span class="line">
</span><span class="line"><span class="w">    </span><span class="k">fn</span> <span class="nf">add</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="w"> </span><span class="n">rhs</span><span class="o">:</span><span class="w"> </span><span class="n">Cup</span><span class="o">&lt;</span><span class="n">B</span><span class="o">&gt;</span><span class="p">)</span><span class="w"> </span><span class="o">-&gt;</span><span class="w"> </span><span class="n">Self</span><span class="o">::</span><span class="n">Output</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
</span><span class="line"><span class="w">        </span><span class="c1">// Notice that we can use the operator &quot;+&quot;</span>
</span><span class="line"><span class="w">        </span><span class="kd">let</span><span class="w"> </span><span class="n">added_content</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="bp">self</span><span class="p">.</span><span class="n">content</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">rhs</span><span class="p">.</span><span class="n">content</span><span class="p">;</span><span class="w"></span>
</span><span class="line"><span class="w">        </span><span class="n">Cup</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="n">content</span><span class="o">:</span><span class="w"> </span><span class="n">added_content</span><span class="w"> </span><span class="p">}</span><span class="w"></span>
</span><span class="line"><span class="w">    </span><span class="p">}</span><span class="w"></span>
</span><span class="line"><span class="p">}</span><span class="w"></span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="mental-model-for-type-level-recursion">Mental model for type-level recursion</h3>

<p>By this point, we have covered most of the basic understanding required to write more complex traits and implementations. To recap, they are:</p>

<ol>
  <li>The differences between a trait, a type, and a trait implementation</li>
  <li>How to use bounds (<code>A: Add&lt;A&gt;</code> or <code>where</code> clauses) when writing implementations for generic types</li>
  <li>How to summon an implementation for a given type (<code>&lt;A as Display&gt;</code>)</li>
  <li>How to write and use associated types (see <code>Output</code> in the above examples)</li>
</ol>

<p>For a more thorough introduction to Rust’s trait system, by all means refer to the official Rust <a href="https://doc.rust-lang.org/book/traits.html">docs on traits</a>.</p>

<p>Before going any further, I’d like to provide you with my mental model of how to think about recursion on the <em>type level</em>.</p>

<h4 id="recursion-on-the-value-level">Recursion on the value level</h4>
<blockquote>
  <p>You write a function that keeps calling itself until an exit condition is met, then returns a value.</p>
</blockquote>

<h4 id="recursion-on-the-type-level">Recursion on the type level</h4>
<blockquote>
  <p>You write implementations of your trait for exit-types and work-to-be-done types. In order to prove an implementation of your trait exists for a concrete type at a function call site, the compiler will try to lookup and expand/expand types recursively until it can figure out a concrete implementation to use, or gives up with an error.</p>
</blockquote>

<p>This may not make much sense at the moment, but hopefully it will soon.</p>

<h2 id="what-the-frunk">What the Frunk?</h2>

<p>Much of this post will make use of <a href="https://github.com/lloydmeta/frunk">Frunk’s</a> types (e.g. <code>HCons</code>, <code>HNil</code>), methods, macros (esp. for describing macro types via the <code>Hlist!</code> <a href="https://beachape.com/frunk/frunk_core/macro.Hlist.html">type macro</a>), and terminology.</p>

<p>It might be easier to follow along if you add Frunk to your project and play around with it.  <a href="https://github.com/lloydmeta/frunk">Frunk</a> is published to <a href="https://beachape.com//crates.io/crates/frunk">Crates.io</a>, so to add it your list of dependencies, simply put this in your <code>Cargo.toml</code>:</p>

<p><a href="https://crates.io/crates/frunk"><img src="https://img.shields.io/crates/v/frunk.svg" alt="Crates.io" /></a></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="rust"><span class="line"><span></span><span class="p">[</span><span class="n">dependencies</span><span class="p">]</span><span class="w"></span>
</span><span class="line"><span class="n">frunk</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s">&quot;${latest_version}&quot;</span><span class="w"></span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Alternatively, take a look at the <a href="https://beachape.com/frunk">published Rustdocs</a>.</p>

<h2 id="plucking-from-hlists">Plucking from HLists</h2>

<p>Given an <a href="https://beachape.com/blog/2016/10/23/rust-hlists-heterogenously-typed-list/">HList</a>, how can we write a function that allows us to pluck out a value by type (if the <code>HList</code> does not contain this type, the compiler should let us know), and also return the rest of the <code>HList</code>?</p>

<p>Suppose we call this function <code>pluck()</code>, it should behave like so:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="rust"><span class="line"><span></span><span class="c1">// h has type Hlist![ {integer}, &amp;str, f32, bool ]</span>
</span><span class="line"><span class="kd">let</span><span class="w"> </span><span class="n">h</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">hlist</span><span class="o">!</span><span class="p">[</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;Joe&quot;</span><span class="p">,</span><span class="w"> </span><span class="mi">42</span><span class="k">f32</span><span class="p">,</span><span class="w"> </span><span class="kc">true</span><span class="w"> </span><span class="p">];</span><span class="w"></span>
</span><span class="line">
</span><span class="line"><span class="c1">// We tell it the target type, and let the compiler infer the rest</span>
</span><span class="line"><span class="kd">let</span><span class="w"> </span><span class="p">(</span><span class="n">target</span><span class="p">,</span><span class="w"> </span><span class="n">remainder</span><span class="p">)</span><span class="o">:</span><span class="w"> </span><span class="p">(</span><span class="kt">f32</span><span class="p">,</span><span class="w"> </span><span class="n">_</span><span class="p">)</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">h</span><span class="p">.</span><span class="n">pluck</span><span class="p">();</span><span class="w"></span>
</span><span class="line">
</span><span class="line"><span class="n">assert_eq</span><span class="o">!</span><span class="p">(</span><span class="n">target</span><span class="p">,</span><span class="w"> </span><span class="mi">42</span><span class="k">f32</span><span class="p">);</span><span class="w"></span>
</span><span class="line"><span class="n">assert_eq</span><span class="o">!</span><span class="p">(</span><span class="n">remainder</span><span class="p">,</span><span class="w"> </span><span class="n">hlist</span><span class="o">!</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;Joe&quot;</span><span class="p">,</span><span class="w"> </span><span class="kc">true</span><span class="p">]);</span><span class="w"></span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="implementation-intuition">Implementation intuition</h4>

<p>Our basic logic is fairly simple, given an <code>HList</code> and a <code>Target</code> type:</p>

<ol>
  <li>If the head of the Hlist matches the <code>Target</code> type, return the head of the Hlist and the tail of the Hlist as the remainder in a pair (2 element tuple)</li>
  <li>Otherwise,
    <ol>
      <li>Store the head in <code>current_head</code></li>
      <li>Call <code>pluck()</code> again on the tail of the current Hlist with the same <code>Target</code> type (i.e. recursively call 1. with the tail), and store the result in <code>(tail_target, tail_remainder)</code> pair.</li>
      <li>Return the target plucked from the tail, and prepend <code>current_head</code> to the remainder from the tail. Return both in a tuple like so: <code>(tail_target, HCons { head: current_head, tail: tail_remainder} )</code>.</li>
    </ol>
  </li>
</ol>

<h4 id="first-attempt">First attempt</h4>

<p>First, let’s assume we’ll be working with a trait; call it <code>Plucker</code>. For now, let’s also assume that it will be parameterised with 1 type, the target type, and will also have an associated type, <code>Remainder</code>. There isn’t really a hard and fast rule for when you should use type parameters vs associated types, but if you’re interested, you can take a look at <a href="http://stackoverflow.com/questions/32059370/when-is-it-appropriate-to-use-an-associated-type-versus-a-generic-type">this Stackoverflow question</a> because Matthieu offers some great advice.</p>

<p>Personally, I always try use an associated type when I need to refer to the type from somewhere else (espescially recursively; more on this later). However, going with a type parameter is useful when you need to have different implementations of a trait for the same type in different circumstances. We saw this with <code>Add</code>, where the right hand side was a type parameter, <code>RHS</code>, allowing you to declare different <code>Add</code> implementations for the same left-hand-side type and letting the compiler find the correct implementation to use at <code>+</code> call sites depending on the type of thing being added with.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="rust"><span class="line"><span></span><span class="c1">// Our trait</span>
</span><span class="line"><span class="k">trait</span><span class="w"> </span><span class="n">Plucker</span><span class="o">&lt;</span><span class="n">Target</span><span class="o">&gt;</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
</span><span class="line">
</span><span class="line"><span class="w">  </span><span class="k">type</span> <span class="nc">Remainder</span><span class="p">;</span><span class="w"></span>
</span><span class="line">
</span><span class="line"><span class="w">  </span><span class="c1">// Pluck should return the target type and the Remainder in a pair</span>
</span><span class="line"><span class="w">  </span><span class="k">fn</span> <span class="nf">pluck</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span><span class="w"> </span><span class="o">-&gt;</span><span class="w"> </span><span class="p">(</span><span class="n">Target</span><span class="p">,</span><span class="w"> </span><span class="n">Self</span><span class="o">::</span><span class="n">Remainder</span><span class="p">);</span><span class="w"></span>
</span><span class="line"><span class="p">}</span><span class="w"></span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The “exit-type” implementation is for when the current head of the <code>HList</code> contains the target type, so let’s jot that down that:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="rust"><span class="line"><span></span><span class="k">impl</span><span class="w"> </span><span class="o">&lt;</span><span class="n">Target</span><span class="p">,</span><span class="w"> </span><span class="n">Tail</span><span class="o">&gt;</span><span class="w"> </span><span class="n">Plucker</span><span class="o">&lt;</span><span class="n">Target</span><span class="o">&gt;</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="n">HCons</span><span class="o">&lt;</span><span class="n">Target</span><span class="p">,</span><span class="w"> </span><span class="n">Tail</span><span class="o">&gt;</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
</span><span class="line">
</span><span class="line"><span class="w">  </span><span class="c1">// Target is the head element, so the Remainder type is the tail!</span>
</span><span class="line"><span class="w">  </span><span class="k">type</span> <span class="nc">Remainder</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Tail</span><span class="p">;</span><span class="w"></span>
</span><span class="line">
</span><span class="line"><span class="w">  </span><span class="k">fn</span> <span class="nf">pluck</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span><span class="w"> </span><span class="o">-&gt;</span><span class="w"> </span><span class="p">(</span><span class="n">Target</span><span class="p">,</span><span class="w"> </span><span class="n">Self</span><span class="o">::</span><span class="n">Remainder</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
</span><span class="line"><span class="w">    </span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">head</span><span class="p">,</span><span class="w"> </span><span class="bp">self</span><span class="p">.</span><span class="n">tail</span><span class="p">)</span><span class="w"></span>
</span><span class="line"><span class="w">  </span><span class="p">}</span><span class="w"></span>
</span><span class="line"><span class="p">}</span><span class="w"></span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Now let’s implement the second piece; the non-trivial part where the target type is <em>not</em> in <code>Head</code>, but in the <code>Tail</code> of our HList. I’ll sometimes refer to this as the “work-to-be-done” type.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class="rust"><span class="line"><span></span><span class="k">impl</span><span class="w"> </span><span class="o">&lt;</span><span class="n">Target</span><span class="p">,</span><span class="w"> </span><span class="n">Head</span><span class="p">,</span><span class="w"> </span><span class="n">Tail</span><span class="o">&gt;</span><span class="w"> </span><span class="n">Plucker</span><span class="o">&lt;</span><span class="n">Target</span><span class="o">&gt;</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="n">HCons</span><span class="o">&lt;</span><span class="n">Head</span><span class="p">,</span><span class="w"> </span><span class="n">Tail</span><span class="o">&gt;</span><span class="w"></span>
</span><span class="line"><span class="w">  </span><span class="k">where</span><span class="w"> </span><span class="n">Tail</span><span class="o">:</span><span class="w"> </span><span class="n">Plucker</span><span class="o">&lt;</span><span class="n">Target</span><span class="o">&gt;</span><span class="w"></span>
</span><span class="line">
</span><span class="line"><span class="w">  </span><span class="c1">// Target is in the tail, so we add the current head type to the remainder</span>
</span><span class="line"><span class="w">  </span><span class="c1">// And use the Tail&#39;s Plucker&#39;s Remainder type as the tail :)</span>
</span><span class="line"><span class="w">  </span><span class="k">type</span> <span class="nc">Remainder</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">HCons</span><span class="o">&lt;</span><span class="n">Head</span><span class="p">,</span><span class="w"> </span><span class="o">&lt;</span><span class="n">Tail</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="n">Plucker</span><span class="o">&lt;</span><span class="n">Target</span><span class="o">&gt;&gt;::</span><span class="n">Remainder</span><span class="o">&gt;</span><span class="p">;</span><span class="w"></span>
</span><span class="line">
</span><span class="line"><span class="w">  </span><span class="k">fn</span> <span class="nf">pluck</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span><span class="w"> </span><span class="o">-&gt;</span><span class="w"> </span><span class="p">(</span><span class="n">Target</span><span class="p">,</span><span class="w"> </span><span class="n">Self</span><span class="o">::</span><span class="n">Remainder</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
</span><span class="line"><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="p">(</span><span class="n">tail_target</span><span class="p">,</span><span class="w"> </span><span class="n">tail_remainder</span><span class="p">)</span><span class="o">:</span><span class="w"> </span><span class="p">(</span><span class="n">Target</span><span class="p">,</span><span class="w"> </span><span class="o">&lt;</span><span class="n">Tail</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="n">Plucker</span><span class="o">&lt;</span><span class="n">Target</span><span class="o">&gt;&gt;::</span><span class="n">Remainder</span><span class="p">)</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="bp">self</span><span class="p">.</span><span class="n">tail</span><span class="p">.</span><span class="n">pluck</span><span class="p">();</span><span class="w"></span>
</span><span class="line"><span class="w">    </span><span class="p">(</span><span class="w"></span>
</span><span class="line"><span class="w">      </span><span class="n">tail_target</span><span class="p">,</span><span class="w"></span>
</span><span class="line"><span class="w">      </span><span class="n">HCons</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="n">head</span><span class="o">:</span><span class="w"> </span><span class="bp">self</span><span class="p">.</span><span class="n">head</span><span class="p">,</span><span class="w"> </span><span class="n">tail</span><span class="o">:</span><span class="w"> </span><span class="n">tail_remainder</span><span class="p">}</span><span class="w"></span>
</span><span class="line"><span class="w">    </span><span class="p">)</span><span class="w"></span>
</span><span class="line">
</span><span class="line"><span class="w">  </span><span class="p">}</span><span class="w"></span>
</span><span class="line"><span class="p">}</span><span class="w"></span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Looks good right? But if you send that to the compiler, you’ll be hit with this message:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span></span>error<span class="o">[</span>E0119<span class="o">]</span>: conflicting implementations of trait <span class="sb">`</span>Plucker&lt;_&gt;<span class="sb">`</span> <span class="k">for</span> <span class="nb">type</span> <span class="sb">`</span>frunk_core::hlist::HCons&lt;_, _&gt;<span class="sb">`</span>:
</span><span class="line">   --&gt; tests/example.rs:306:1
</span><span class="line">    <span class="p">|</span>
</span><span class="line"><span class="m">296</span> <span class="p">|</span>   impl &lt;Target, Tail&gt; Plucker&lt;Target&gt; <span class="k">for</span> HCons&lt;Target, Tail&gt; <span class="o">{</span>
</span><span class="line">    <span class="p">|</span>  _- starting here...
</span><span class="line"><span class="m">297</span> <span class="p">|</span> <span class="p">|</span>
</span><span class="line"><span class="m">298</span> <span class="p">|</span> <span class="p">|</span>     // Target is the head element, so the Remainder <span class="nb">type</span> is the tail!
</span><span class="line"><span class="m">299</span> <span class="p">|</span> <span class="p">|</span>     <span class="nb">type</span> <span class="nv">Remainder</span> <span class="o">=</span> Tail<span class="p">;</span>
</span><span class="line"><span class="m">300</span> <span class="p">|</span> <span class="p">|</span>
</span><span class="line"><span class="m">301</span> <span class="p">|</span> <span class="p">|</span>     fn pluck<span class="o">(</span>self<span class="o">)</span> -&gt; <span class="o">(</span>Target, Self::Remainder<span class="o">)</span> <span class="o">{</span>
</span><span class="line"><span class="m">302</span> <span class="p">|</span> <span class="p">|</span>         <span class="o">(</span>self.head, self.tail<span class="o">)</span>
</span><span class="line"><span class="m">303</span> <span class="p">|</span> <span class="p">|</span>     <span class="o">}</span>
</span><span class="line"><span class="m">304</span> <span class="p">|</span> <span class="p">|</span> <span class="o">}</span>
</span><span class="line">    <span class="p">|</span> <span class="p">|</span>_- ...ending here: first implementation here
</span><span class="line"><span class="m">305</span> <span class="p">|</span>
</span><span class="line"><span class="m">306</span> <span class="p">|</span>   impl &lt;Target, Head, Tail&gt; Plucker&lt;Target&gt; <span class="k">for</span> HCons&lt;Head, Tail&gt;
</span><span class="line">    <span class="p">|</span>   ^ conflicting implementation <span class="k">for</span> <span class="sb">`</span>frunk_core::hlist::HCons&lt;_, _&gt;<span class="sb">`</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>What the Rust compiler is helpfully is telling us, is that it can’t distinguish between our two implementations, and if we look closely at the types, that is indeed true:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="rust"><span class="line"><span></span><span class="c1">// exit (work done) type implementation</span>
</span><span class="line"><span class="k">impl</span><span class="w"> </span><span class="o">&lt;</span><span class="n">Target</span><span class="p">,</span><span class="w"> </span><span class="n">Tail</span><span class="o">&gt;</span><span class="w">  </span><span class="n">Plucker</span><span class="o">&lt;</span><span class="n">Target</span><span class="o">&gt;</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="n">HCons</span><span class="o">&lt;</span><span class="n">Target</span><span class="p">,</span><span class="w"> </span><span class="n">Tail</span><span class="o">&gt;</span><span class="w"></span>
</span><span class="line">
</span><span class="line"><span class="c1">// work-to-be-done implementation</span>
</span><span class="line"><span class="k">impl</span><span class="w"> </span><span class="o">&lt;</span><span class="n">Target</span><span class="p">,</span><span class="w"> </span><span class="n">Head</span><span class="p">,</span><span class="w"> </span><span class="n">Tail</span><span class="o">&gt;</span><span class="w"> </span><span class="n">Plucker</span><span class="o">&lt;</span><span class="n">Target</span><span class="o">&gt;</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="n">HCons</span><span class="o">&lt;</span><span class="n">Head</span><span class="p">,</span><span class="w"> </span><span class="n">Tail</span><span class="o">&gt;</span><span class="w"></span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The <code>Plucker&lt;Target&gt;</code> part is exactly the same, and sure, we’ve used <code>Target</code> instead of <code>Head</code> in the <code>for HCons&lt;..&gt;</code> part in the first case, but simply using different type parameters isn’t enough to distinguish between the two.</p>

<p>Furthermore, note that you can’t use the lack of constraints (or <code>where</code> clauses) to distinguish between implementations either. This is because the current lack of an implementation for a given type parameter doesn’t mean that it can’t be added later (see <a href="http://stackoverflow.com/a/39161143/1814775">this Stackoverflow questions</a> for more details).</p>

<p>Welp, back to the drawing board.</p>

<h4 id="second-attempt">Second attempt</h4>

<p>What we’ve learnt is that we need to have another type parameter in order to distinguish the exit-type and the work-to-be-done-type implementations, so let’s add one to <code>Plucker</code>. Intuitively, we know that we want to have a way to distinguish between “the target is here in the HList” (exit) and “the target is over there in the HList” (recursion), so let’s call our type parameter <code>Index</code>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="rust"><span class="line"><span></span><span class="c1">// the new and improved Plucker trait</span>
</span><span class="line"><span class="k">trait</span><span class="w"> </span><span class="n">Plucker</span><span class="o">&lt;</span><span class="n">Target</span><span class="p">,</span><span class="w"> </span><span class="n">Index</span><span class="o">&gt;</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
</span><span class="line"><span class="w">    </span><span class="k">type</span> <span class="nc">Remainder</span><span class="p">;</span><span class="w"></span>
</span><span class="line">
</span><span class="line"><span class="w">    </span><span class="k">fn</span> <span class="nf">pluck</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span><span class="w"> </span><span class="o">-&gt;</span><span class="w"> </span><span class="p">(</span><span class="n">Target</span><span class="p">,</span><span class="w"> </span><span class="n">Self</span><span class="o">::</span><span class="n">Remainder</span><span class="p">);</span><span class="w"></span>
</span><span class="line"><span class="p">}</span><span class="w"></span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Then, let’s add a type to identify the <code>index</code> for the exit-type implementation. We’ll use an empty <code>enum</code> because we just want to have a type, and we don’t want it to be available at runtime (ensuring zero runtime cost for our type).</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="rust"><span class="line"><span></span><span class="c1">// This will be the type we&#39;ll use to denote that the Target is in the Head</span>
</span><span class="line"><span class="k">enum</span> <span class="nc">Here</span><span class="w"> </span><span class="p">{}</span><span class="w"></span>
</span><span class="line">
</span><span class="line"><span class="k">impl</span><span class="w"> </span><span class="o">&lt;</span><span class="n">Target</span><span class="p">,</span><span class="w"> </span><span class="n">Tail</span><span class="o">&gt;</span><span class="w"> </span><span class="n">Plucker</span><span class="o">&lt;</span><span class="n">Target</span><span class="p">,</span><span class="w"> </span><span class="n">Here</span><span class="o">&gt;</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="n">HCons</span><span class="o">&lt;</span><span class="n">Target</span><span class="p">,</span><span class="w"> </span><span class="n">Tail</span><span class="o">&gt;</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
</span><span class="line">
</span><span class="line"><span class="w">  </span><span class="c1">// Target type is in the Head, so the Remainder type must be the tail!</span>
</span><span class="line"><span class="w">  </span><span class="k">type</span> <span class="nc">Remainder</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Tail</span><span class="p">;</span><span class="w"></span>
</span><span class="line">
</span><span class="line"><span class="w">  </span><span class="k">fn</span> <span class="nf">pluck</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span><span class="w"> </span><span class="o">-&gt;</span><span class="w"> </span><span class="p">(</span><span class="n">Target</span><span class="p">,</span><span class="w"> </span><span class="n">Self</span><span class="o">::</span><span class="n">Remainder</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
</span><span class="line"><span class="w">    </span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">head</span><span class="p">,</span><span class="w"> </span><span class="bp">self</span><span class="p">.</span><span class="n">tail</span><span class="p">)</span><span class="w"></span>
</span><span class="line"><span class="w">  </span><span class="p">}</span><span class="w"></span>
</span><span class="line"><span class="p">}</span><span class="w"></span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>What about the work-to-be-done-type? Let’s imagine a scenario where we want to pluck a <code>Target</code> of type <code>MagicType</code> (let’s assume it’s declared as <code>struct MagicType</code>, so a type with a single element in it), and we have the following <code>HList</code>s to <code>pluck()</code> from; what would the <code>Index</code> be?</p>

<ol>
  <li>
    <p><code>HNil</code></p>

    <p>Trick question, there is no <code>Index</code> because our target of <code>MagicType</code> isn’t here. The compiler should fail to find an instance/implementation of our trait.</p>
  </li>
  <li>
    <p><code>hlist[ MagicType ]</code> (this is syntactic sugar for <code>HCons&lt;MagicType, HNil&gt;</code>)</p>

    <p><code>Index</code> would clearly be our <code>Here</code> enum type</p>
  </li>
  <li>
    <p><code>hlist![ Foo, MagicType ]</code> (this is syntactic sugar for <code>HCons&lt;Foo, HCons&lt;MagicType, HNil&gt;&gt;</code>)</p>

    <p><code>Index</code> can’t be <code>Here</code>, but we know that in order for the compiler to be satisfied that it can reach our end-type in 1. <code>Here</code> needs to be <em>somewhere</em> inside the type, but we <em>can’t</em> just use it as is, otherwise we’ll run into the same “conflicting implementation” error as before. So, let’s introduce new type <code>There&lt;A&gt;</code>, that has one type parameter. In this case, the <code>Index</code> should resolve to <code>There&lt;Here&gt;</code> because the target type is in the head of the tail.</p>
  </li>
  <li>
    <p><code>hlist![ Foo, Foo, MagicType ]</code></p>

    <p>Following from 3. <code>Index</code> would have to be <code>There&lt;There&lt;Here&gt;&gt;</code></p>
  </li>
  <li>
    <p><code>hlist![ Foo, Foo, Foo, MagicType ]</code></p>

    <p>What else could <code>Index</code> be but <code>There&lt;There&lt;There&lt;Here&gt;&gt;&gt;</code></p>
  </li>
</ol>

<p>That Looks alright, so let’s give it a go. Since the new type has a type parameter but no real data to associate it with, we’ll need use the <code>PhantomData</code> trick (discussed in <a href="blog/2017/03/04/labelledgeneric-in-rust-what-why-how/#fieldname-type">the last post</a>).</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
</pre></td><td class="code"><pre><code class="rust"><span class="line"><span></span><span class="c1">// Type for representing a not-here Index</span>
</span><span class="line"><span class="k">struct</span> <span class="nc">There</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="p">(</span><span class="n">PhantomData</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="p">);</span><span class="w"></span>
</span><span class="line">
</span><span class="line"><span class="k">impl</span><span class="o">&lt;</span><span class="n">Head</span><span class="p">,</span><span class="w"> </span><span class="n">Tail</span><span class="p">,</span><span class="w"> </span><span class="n">Target</span><span class="p">,</span><span class="w"> </span><span class="n">TailIndex</span><span class="o">&gt;</span><span class="w"> </span><span class="n">Plucker</span><span class="o">&lt;</span><span class="n">Target</span><span class="p">,</span><span class="w"> </span><span class="n">There</span><span class="o">&lt;</span><span class="n">TailIndex</span><span class="o">&gt;&gt;</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="n">HCons</span><span class="o">&lt;</span><span class="n">Head</span><span class="p">,</span><span class="w"> </span><span class="n">Tail</span><span class="o">&gt;</span><span class="w"></span>
</span><span class="line"><span class="w">    </span><span class="c1">// This where clause can be interpreted as &quot;the target must be pluckable from the Tail&quot;</span>
</span><span class="line"><span class="w">    </span><span class="k">where</span><span class="w"> </span><span class="n">Tail</span><span class="o">:</span><span class="w"> </span><span class="n">Plucker</span><span class="o">&lt;</span><span class="n">Target</span><span class="p">,</span><span class="w"> </span><span class="n">TailIndex</span><span class="o">&gt;</span><span class="w"></span>
</span><span class="line"><span class="p">{</span><span class="w"></span>
</span><span class="line"><span class="w">    </span><span class="k">type</span> <span class="nc">Remainder</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">HCons</span><span class="o">&lt;</span><span class="n">Head</span><span class="p">,</span><span class="w"> </span><span class="o">&lt;</span><span class="n">Tail</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="n">Plucker</span><span class="o">&lt;</span><span class="n">Target</span><span class="p">,</span><span class="w"> </span><span class="n">TailIndex</span><span class="o">&gt;&gt;::</span><span class="n">Remainder</span><span class="o">&gt;</span><span class="p">;</span><span class="w"></span>
</span><span class="line">
</span><span class="line"><span class="w">    </span><span class="k">fn</span> <span class="nf">pluck</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span><span class="w"> </span><span class="o">-&gt;</span><span class="w"> </span><span class="p">(</span><span class="n">Target</span><span class="p">,</span><span class="w"> </span><span class="n">Self</span><span class="o">::</span><span class="n">Remainder</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
</span><span class="line"><span class="w">        </span><span class="kd">let</span><span class="w"> </span><span class="p">(</span><span class="n">target</span><span class="p">,</span><span class="w"> </span><span class="n">tail_remainder</span><span class="p">)</span><span class="o">:</span><span class="w"> </span><span class="p">(</span><span class="n">Target</span><span class="p">,</span><span class="w"> </span><span class="o">&lt;</span><span class="n">Tail</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="n">Plucker</span><span class="o">&lt;</span><span class="n">Target</span><span class="p">,</span><span class="w"> </span><span class="n">TailIndex</span><span class="o">&gt;&gt;::</span><span class="n">Remainder</span><span class="p">)</span><span class="w"> </span><span class="o">=</span><span class="w"></span>
</span><span class="line"><span class="w">            </span><span class="o">&lt;</span><span class="n">Tail</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="n">Plucker</span><span class="o">&lt;</span><span class="n">Target</span><span class="p">,</span><span class="w"> </span><span class="n">TailIndex</span><span class="o">&gt;&gt;::</span><span class="n">pluck</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">tail</span><span class="p">);</span><span class="w"></span>
</span><span class="line"><span class="w">        </span><span class="p">(</span><span class="n">target</span><span class="p">,</span><span class="w"></span>
</span><span class="line"><span class="w">         </span><span class="n">HCons</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
</span><span class="line"><span class="w">             </span><span class="n">head</span><span class="o">:</span><span class="w"> </span><span class="bp">self</span><span class="p">.</span><span class="n">head</span><span class="p">,</span><span class="w"></span>
</span><span class="line"><span class="w">             </span><span class="n">tail</span><span class="o">:</span><span class="w"> </span><span class="n">tail_remainder</span><span class="p">,</span><span class="w"></span>
</span><span class="line"><span class="w">         </span><span class="p">})</span><span class="w"></span>
</span><span class="line"><span class="w">    </span><span class="p">}</span><span class="w"></span>
</span><span class="line"><span class="p">}</span><span class="w"></span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>And that’s it, we’ve written implementations of <code>Plucker</code> for <code>HList</code>. The implementation for work-to-be-done type is type-recursive in its <code>Index</code> type as well as its <code>Remainder</code> associated type. The cool thing is that the compiler is in charge of figuring out what the <em>concrete</em> types should be at any given <code>pluck()</code> call-site. In fact, you can see <a href="https://beachape.com/frunk/frunk_core/hlist/trait.Plucker.html">from this example</a> in Frunk that the compiler will also happily infer the remainder for us too.</p>

<h3 id="type-level-walkthrough">Type-level walkthrough</h3>

<p>Let’s take a step back and work through what we’ve done.</p>

<p>We’ve declared an implementation of <code>Plucker</code> for the trivial exit-type (<code>Target</code> is in the head).</p>

<p>We’ve also declared an implementation for the work-to-be-done type (<code>Target</code> is in the tail). This implementation, however, is dependent on its recursive types of <code>Tail</code> and <code>TailIndex</code> (hint: look at the <code>where</code> clause).  Intuitively speaking, an implementation of this type only exists if the current HList’s <code>Tail</code> has either:</p>

<ol>
  <li>An implementation for the exit-type; the <code>Target</code> type is in the head</li>
  <li>Another work-to-be-done implementation of <code>Plucker</code>. This ultimately means that <em>eventually</em> there has to be a 1. in the tail <em>somewhere</em>.</li>
</ol>

<p>Let’s try to walk through a mental model of how <code>pluck()</code> gets associated to the proper implementation.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="rust"><span class="line"><span></span><span class="c1">// Given an HList (type explicitly declared for clarity)</span>
</span><span class="line"><span class="kd">let</span><span class="w"> </span><span class="n">h</span><span class="o">:</span><span class="w"> </span><span class="n">Hlist</span><span class="o">!</span><span class="p">[</span><span class="w"> </span><span class="o">&amp;</span><span class="kt">str</span><span class="p">,</span><span class="w"> </span><span class="kt">bool</span><span class="p">,</span><span class="w"> </span><span class="kt">f32</span><span class="p">,</span><span class="w"> </span><span class="kt">i32</span><span class="w"> </span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">hlist</span><span class="o">!</span><span class="p">[</span><span class="w"> </span><span class="s">&quot;Joe&quot;</span><span class="p">,</span><span class="w"> </span><span class="kc">false</span><span class="p">,</span><span class="w"> </span><span class="mi">42</span><span class="k">f32</span><span class="p">,</span><span class="w"> </span><span class="mi">9</span><span class="w"> </span><span class="p">];</span><span class="w"></span>
</span><span class="line">
</span><span class="line"><span class="c1">// Suppose we want to get the float (f32) value out</span>
</span><span class="line"><span class="c1">// We&#39;re ignoring the remainder and its type (Rust will figure it out),</span>
</span><span class="line"><span class="c1">// because it isn&#39;t relevant for now.</span>
</span><span class="line"><span class="kd">let</span><span class="w"> </span><span class="p">(</span><span class="n">v</span><span class="p">,</span><span class="w"> </span><span class="n">_</span><span class="p">)</span><span class="o">:</span><span class="w"> </span><span class="p">(</span><span class="kt">f32</span><span class="p">,</span><span class="n">_</span><span class="p">)</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">h</span><span class="p">.</span><span class="n">pluck</span><span class="p">();</span><span class="w"></span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>We’re ignoring the remainder and its type (Rust will figure it out if we use the underscore binding <code>_</code>), because it isn’t relevant for what we’re about to do.</p>

<p>In the following steps, we’ll substitute concrete types into our implementations where possible; similar to how functions get bound to values during the <a href="http://www.cs.cornell.edu/courses/cs3110/2013sp/lectures/lec06-subst-model/lec06.html">substitution model of evaluation</a> (normally used for evaluating runtime values). We’ll do this in steps, so it’s possible that in the earlier stages, we don’t quite know the concrete type yet, but we’ll go down the “stack”, and come back up and fill those types in, too, once we know them.</p>

<ol>
  <li>
    <p><code>pluck()</code> on <code>Hlist![ &amp;str, bool, f32, i32 ]</code></p>

    <p>Since our <code>Target</code> type (<code>f32</code>) is not in the head, it doesn’t match with the <code>Here</code> case, so we will try to use the work-to-be-done case (<code>Index</code> is <code>There&lt;TailIndex&gt;</code>) and fill in as many types as we can for now. Let’s replace some type parameters with their concrete types where possible.</p>

    <p>Concrete types:</p>

    <ul>
      <li><code>Head</code> → <code>&amp;str</code></li>
      <li><code>Tail</code> → <code>Hlist![bool, f32, i32 ]</code> (remember, this is syntactic sugar for <code>HCons&lt;bool, HCons&lt;f32, HCons&lt;i32, HNil&gt;</code>)</li>
      <li><code>Target</code> → <code>f32</code> (this doesn’t change)</li>
      <li><code>Remainder</code> → Don’t know yet, but we already know that the current <code>Head</code> will be in it, since it isn’t the <code>target</code> type. And we know the tail of <code>Remainder</code> will be the remainder from <code>pluck()</code>ing <code>f32</code> from the tail, so we can reference it as <code>HCons&lt; &amp;str, &lt; Hlist![bool, f32, i32] as Plucker&lt;f32, There&lt;Here&gt;&gt; &gt;::Remainder &gt;</code> for now.</li>
      <li><code>TailIndex</code> → Don’t know yet, but we’ll find out. Let’s call reference it as <code>TailIndex1</code> for now.</li>
    </ul>
  </li>
  <li>
    <p><code>pluck()</code> on <code>Hlist![bool, f32, i32]</code> (<code>Tail</code> from 1.)</p>

    <p>Again, <code>f32</code> is not in the head of our type, so we know we aren’t going to be working with the exit-type typeclass implementation (e.g., <code>Index</code> is not <code>Here</code> yet.)</p>

    <p>Concrete types:</p>

    <ul>
      <li><code>Head</code> → <code>bool</code></li>
      <li><code>Tail</code> → <code>Hlist![ f32, i32 ]</code></li>
      <li><code>Target</code> → <code>f32</code> (again, this doesn’t change)</li>
      <li><code>Remainder</code> → Still don’t know yet, but we do know that <code>bool</code> will be in it since it isn’t our target. Similar to the previous step, we’ll tentatively call it <code>HCons&lt; bool, &lt; Hlist![ f32, i32] as Plucker&lt;f32, Here&gt; &gt;::Remainder &gt;</code></li>
      <li><code>TailIndex</code> → Don’t know yet, but let’s rename it <code>TailIndex2</code> for now and fill it in later.</li>
    </ul>
  </li>
  <li>
    <p><code>pluck()</code> on <code>Hlist![ f32, i32 ]</code> (<code>Tail</code> from 2.)</p>

    <p>The head has type <code>f32</code> and the target type is <code>f32</code>, so we’ve arrived at the exit-type implementation.</p>

    <p>Concrete types:</p>

    <ul>
      <li><code>Head</code> → <code>f32</code></li>
      <li><code>Tail</code> → <code>Hlist![ i32 ]</code></li>
      <li><code>Target</code> → <code>f32</code> !</li>
      <li><code>Remainder</code> → Since we’ve found our target, we know that <code>Remainder</code> must be the tail, and thus <code>Hlist![ i32 ]</code>, or its equivalent <code>HCons&lt; i32, HNil &gt;</code></li>
      <li><code>Index</code> → <code>Here</code> !</li>
    </ul>
  </li>
</ol>

<p>Now, that we’ve finally resolved a concrete type for <code>Index</code>, we can go backwards up the type-level stack and fill in our unknowns:</p>

<ul>
  <li>Step 2:
    <ul>
      <li><code>TailIndex2</code> → <code>Here</code>, which means that <code>Index</code> is <code>There&lt;Here&gt;&gt;</code></li>
      <li><code>Remainder</code> → <code>HList![ boo, i32 ]</code></li>
    </ul>
  </li>
  <li>Step 1:
    <ul>
      <li><code>TailIndex1</code> → <code>There&lt;Here&gt;</code>, which means that <code>Index</code> is <code>There&lt;There&lt;Here&gt;&gt;&gt;</code></li>
      <li><code>Remainder</code> → <code>HList![ &amp;str, boo, i32 ]</code></li>
    </ul>
  </li>
</ul>

<p>The compiler is thus able to find a trait implementation to <code>pluck()</code> a <code>f32</code> out of an <code>Hlist![ &amp;str, bool, f32, i32 ]</code> that looks like this (with all the type parameters bound to a concrete type):</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class="rust"><span class="line"><span></span><span class="c1">// Remember Hlist![ ... ] is just a type-macro to make it easier to write nested Hcons</span>
</span><span class="line"><span class="k">impl</span><span class="w"> </span><span class="n">Plucker</span><span class="o">&lt;</span><span class="w"> </span><span class="kt">f32</span><span class="p">,</span><span class="w"> </span><span class="n">There</span><span class="o">&lt;</span><span class="n">There</span><span class="o">&lt;</span><span class="n">Here</span><span class="o">&gt;&gt;</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="n">Hlist</span><span class="o">!</span><span class="p">[</span><span class="w"> </span><span class="o">&amp;</span><span class="kt">str</span><span class="p">,</span><span class="w"> </span><span class="kt">bool</span><span class="p">,</span><span class="w"> </span><span class="kt">f32</span><span class="p">,</span><span class="w"> </span><span class="kt">i32</span><span class="w"> </span><span class="p">]</span><span class="w"></span>
</span><span class="line"><span class="w">   </span><span class="k">where</span><span class="w"> </span><span class="n">Hlist</span><span class="o">!</span><span class="p">[</span><span class="w"> </span><span class="kt">bool</span><span class="p">,</span><span class="w"> </span><span class="kt">f32</span><span class="p">,</span><span class="w"> </span><span class="kt">i32</span><span class="w"> </span><span class="p">]</span><span class="o">:</span><span class="w"> </span><span class="n">Plucker</span><span class="o">&lt;</span><span class="w"> </span><span class="kt">f32</span><span class="p">,</span><span class="w"> </span><span class="n">There</span><span class="o">&lt;</span><span class="n">Here</span><span class="o">&gt;</span><span class="w"> </span><span class="o">&gt;</span><span class="w"></span>
</span><span class="line"><span class="p">{</span><span class="w"></span>
</span><span class="line"><span class="w">  </span><span class="k">type</span> <span class="nc">Remainder</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">HList</span><span class="o">!</span><span class="p">[</span><span class="w"> </span><span class="o">&amp;</span><span class="kt">str</span><span class="p">,</span><span class="w"> </span><span class="n">boo</span><span class="p">,</span><span class="w"> </span><span class="kt">i32</span><span class="w"> </span><span class="p">];</span><span class="w"></span>
</span><span class="line">
</span><span class="line"><span class="w">  </span><span class="k">fn</span> <span class="nf">pluck</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span><span class="w"> </span><span class="o">-&gt;</span><span class="w"> </span><span class="p">(</span><span class="kt">f32</span><span class="p">,</span><span class="w"> </span><span class="n">Self</span><span class="o">::</span><span class="n">Remainder</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
</span><span class="line"><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="p">(</span><span class="n">target</span><span class="p">,</span><span class="w"> </span><span class="n">tail_remainder</span><span class="p">)</span><span class="o">:</span><span class="w"> </span><span class="p">(</span><span class="kt">f32</span><span class="p">,</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="n">Hlist</span><span class="o">!</span><span class="p">[</span><span class="kt">bool</span><span class="p">,</span><span class="w"> </span><span class="kt">f32</span><span class="p">,</span><span class="w"> </span><span class="kt">i32</span><span class="p">]</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="n">Plucker</span><span class="o">&lt;</span><span class="kt">f32</span><span class="p">,</span><span class="w"> </span><span class="n">There</span><span class="o">&lt;</span><span class="n">Here</span><span class="o">&gt;&gt;</span><span class="w"> </span><span class="o">&gt;::</span><span class="n">Remainder</span><span class="p">)</span><span class="w"> </span><span class="o">=</span><span class="w"></span>
</span><span class="line"><span class="w">      </span><span class="o">&lt;</span><span class="w"> </span><span class="n">Hlist</span><span class="o">!</span><span class="p">[</span><span class="w"> </span><span class="kt">bool</span><span class="p">,</span><span class="w"> </span><span class="kt">f32</span><span class="p">,</span><span class="w"> </span><span class="kt">i32</span><span class="w"> </span><span class="p">]</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="n">Plucker</span><span class="o">&lt;</span><span class="kt">f32</span><span class="p">,</span><span class="w"> </span><span class="n">There</span><span class="o">&lt;</span><span class="n">Here</span><span class="o">&gt;&gt;</span><span class="w"> </span><span class="o">&gt;::</span><span class="n">pluck</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">tail</span><span class="p">);</span><span class="w"></span>
</span><span class="line"><span class="w">    </span><span class="p">(</span><span class="n">target</span><span class="p">,</span><span class="w"></span>
</span><span class="line"><span class="w">     </span><span class="n">HCons</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
</span><span class="line"><span class="w">         </span><span class="n">head</span><span class="o">:</span><span class="w"> </span><span class="bp">self</span><span class="p">.</span><span class="n">head</span><span class="p">,</span><span class="w"></span>
</span><span class="line"><span class="w">         </span><span class="n">tail</span><span class="o">:</span><span class="w"> </span><span class="n">tail_remainder</span><span class="p">,</span><span class="w"></span>
</span><span class="line"><span class="w">     </span><span class="p">})</span><span class="w"></span>
</span><span class="line"><span class="w">  </span><span class="p">}</span><span class="w"></span>
</span><span class="line"><span class="p">}</span><span class="w"></span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Whew! That took a while, but I hope it helps illustrate how you can use a mental model similar to the substitution model of evaluation, but with types, in order to prove the existence of implementations for a given type.</p>

<p>By the way, by default, the compiler has a limit on how many levels of recursion/expansion this search for a typeclass instance goes. In my testing, I found this to be 64 levels and verified it to be so by looking at <a href="https://github.com/rust-lang/rust/blob/be304afc8c2b1a364bd406888b5378897ed82a9f/src/libsyntax/ext/expand.rs#L1122">Rust’s source code</a>. If you hit the limit, the compiler blow up, but will helpfully offer you a solution:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="rust"><span class="line"><span></span><span class="n">error</span><span class="p">[</span><span class="n">E0275</span><span class="p">]</span><span class="o">:</span><span class="w"> </span><span class="n">overflow</span><span class="w"> </span><span class="n">evaluating</span><span class="w"> </span><span class="n">the</span><span class="w"> </span><span class="n">requirement</span><span class="w"> </span><span class="err">`</span><span class="n">frunk_core</span><span class="o">::</span><span class="n">hlist</span><span class="o">::</span><span class="n">HNil</span><span class="o">:</span><span class="w"> </span><span class="n">frunk_core</span><span class="o">::</span><span class="n">hlist</span><span class="o">::</span><span class="n">Plucker</span><span class="o">&lt;</span><span class="kt">bool</span><span class="p">,</span><span class="w"> </span><span class="n">_</span><span class="o">&gt;</span><span class="err">`</span><span class="w"></span>
</span><span class="line"><span class="w">   </span><span class="o">--&gt;</span><span class="w"> </span><span class="n">tests</span><span class="o">/</span><span class="n">derivation_tests</span><span class="p">.</span><span class="n">rs</span><span class="o">:</span><span class="mi">296</span><span class="o">:</span><span class="mi">35</span><span class="w"></span>
</span><span class="line"><span class="w">    </span><span class="o">|</span><span class="w"></span>
</span><span class="line"><span class="mi">296</span><span class="w"> </span><span class="o">|</span><span class="w">     </span><span class="kd">let</span><span class="w"> </span><span class="p">(</span><span class="n">e</span><span class="p">,</span><span class="w"> </span><span class="n">_</span><span class="p">)</span><span class="o">:</span><span class="w"> </span><span class="p">(</span><span class="kt">bool</span><span class="p">,</span><span class="w"> </span><span class="n">_</span><span class="p">)</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">hello</span><span class="p">.</span><span class="n">pluck</span><span class="p">();</span><span class="w"></span>
</span><span class="line"><span class="w">    </span><span class="o">|</span><span class="w">                                   </span><span class="o">^^^^^</span><span class="w"></span>
</span><span class="line"><span class="w">    </span><span class="o">|</span><span class="w"></span>
</span><span class="line"><span class="w">    </span><span class="o">=</span><span class="w"> </span><span class="n">note</span><span class="o">:</span><span class="w"> </span><span class="n">consider</span><span class="w"> </span><span class="n">adding</span><span class="w"> </span><span class="n">a</span><span class="w"> </span><span class="err">`</span><span class="cp">#![recursion_limit=</span><span class="s">&quot;128&quot;</span><span class="cp">]</span><span class="err">`</span><span class="w"> </span><span class="n">attribute</span><span class="w"> </span><span class="n">to</span><span class="w"> </span><span class="n">your</span><span class="w"> </span><span class="k">crate</span><span class="w"></span>
</span><span class="line"><span class="w">    </span><span class="o">=</span><span class="w"> </span><span class="n">note</span><span class="o">:</span><span class="w"> </span><span class="n">required</span><span class="w"> </span><span class="n">because</span><span class="w"> </span><span class="n">of</span><span class="w"> </span><span class="n">the</span><span class="w"> </span><span class="n">requirements</span><span class="w"> </span><span class="n">on</span><span class="w"> </span><span class="n">the</span><span class="w"> </span><span class="k">impl</span><span class="w"> </span><span class="n">of</span><span class="w"> </span><span class="err">`</span><span class="n">frunk_core</span><span class="o">::</span><span class="n">hlist</span><span class="o">::</span><span class="n">Plucker</span><span class="o">&lt;</span><span class="kt">bool</span><span class="p">,</span><span class="w"> </span><span class="n">frunk_core</span><span class="o">::</span><span class="n">hlist</span><span class="o">::</span><span class="n">There</span><span class="o">&lt;</span><span class="n">_</span><span class="o">&gt;&gt;</span><span class="err">`</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="err">`</span><span class="n">frunk_core</span><span class="o">::</span><span class="n">hlist</span><span class="o">::</span><span class="n">HCons</span><span class="o">&lt;</span><span class="kt">bool</span><span class="p">,</span><span class="w"> </span><span class="n">frunk_core</span><span class="o">::</span><span class="n">hlist</span><span class="o">::</span><span class="n">HNil</span><span class="o">&gt;</span><span class="err">`</span><span class="w"></span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>So, simply add <code>#![recursion_limit="128"]</code> to your crate. If you hit the limit again, the compiler will tell you to double the limit again. Ad infinitum.</p>

<h2 id="sculpting-hlists">Sculpting HLists</h2>

<p>Great ! Now that we’ve finished with <code>Plucker</code>, let’s go one level deeper: making use of <code>Plucker</code> to do something even more interesting; sculpting <code>HList</code>s !</p>

<p>Here is the basic idea of what we want to be able to do:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class="rust"><span class="line"><span></span><span class="c1">// Given an HList of type Hlist![ i32, &amp;str, f32, bool ]</span>
</span><span class="line"><span class="kd">let</span><span class="w"> </span><span class="n">h</span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">hlist</span><span class="o">!</span><span class="p">[</span><span class="mi">9000</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;joe&quot;</span><span class="p">,</span><span class="w"> </span><span class="mi">41</span><span class="k">f32</span><span class="p">,</span><span class="w"> </span><span class="kc">true</span><span class="p">];</span><span class="w"></span>
</span><span class="line">
</span><span class="line"><span class="c1">// We&#39;d like to be able to &quot;sculpt&quot; it into another, differently shaped HList.</span>
</span><span class="line"><span class="c1">//</span>
</span><span class="line"><span class="c1">// Of course, the types in the new HList must be a subset of the original HList,</span>
</span><span class="line"><span class="c1">// and if not, compilation should fail.</span>
</span><span class="line"><span class="c1">//</span>
</span><span class="line"><span class="c1">// Similar to pluck(), we&#39;d also want the remainder of the original HList _not_</span>
</span><span class="line"><span class="c1">// used in the final result.</span>
</span><span class="line"><span class="kd">let</span><span class="w"> </span><span class="p">(</span><span class="n">reshaped</span><span class="p">,</span><span class="w"> </span><span class="n">remainder</span><span class="p">)</span><span class="o">:</span><span class="w"> </span><span class="p">(</span><span class="n">Hlist</span><span class="o">!</span><span class="p">[</span><span class="w"> </span><span class="kt">f32</span><span class="p">,</span><span class="w"> </span><span class="kt">i32</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="kt">str</span><span class="w"> </span><span class="p">],</span><span class="w"> </span><span class="n">_</span><span class="p">)</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">h</span><span class="p">.</span><span class="n">sculpt</span><span class="p">();</span><span class="w"></span>
</span><span class="line"><span class="n">assert_eq</span><span class="o">!</span><span class="p">(</span><span class="n">reshaped</span><span class="p">,</span><span class="w"> </span><span class="n">hlist</span><span class="o">!</span><span class="p">[</span><span class="mi">41</span><span class="k">f32</span><span class="p">,</span><span class="w"> </span><span class="mi">9000</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;joe&quot;</span><span class="p">]);</span><span class="w"></span>
</span><span class="line"><span class="n">assert_eq</span><span class="o">!</span><span class="p">(</span><span class="n">remainder</span><span class="p">,</span><span class="w"> </span><span class="n">hlist</span><span class="o">!</span><span class="p">[</span><span class="kc">true</span><span class="p">]);</span><span class="w"></span>
</span><span class="line">
</span><span class="line"><span class="c1">// the following should fail to compile, because there is no char in the original Hlist</span>
</span><span class="line"><span class="kd">let</span><span class="w"> </span><span class="p">(</span><span class="n">reshaped</span><span class="p">,</span><span class="w"> </span><span class="n">_</span><span class="p">)</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="n">Hlist</span><span class="o">!</span><span class="p">[</span><span class="n">char</span><span class="p">],</span><span class="w"> </span><span class="n">_</span><span class="p">)</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">h</span><span class="p">.</span><span class="n">sculpt</span><span class="p">();</span><span class="w"></span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="implementation-intuition-1">Implementation intuition</h3>

<p>Let’s call our trait <code>Sculptor</code>. We should be able to re-use our <code>Plucker</code> trait, which which means we’ll work with <code>Target</code>s and <code>Index</code>s, <em>but</em> there’s more than one of each!</p>

<p>Intuitively, this is the kind of logic that we want:</p>

<p>Given <code>TargetHList</code> (target HList) and <code>SourceHList</code> (source HList), and assuming the types in the former is a subset (not necessarily in order though) of the latter:</p>

<ol>
  <li>Pluck value with the head type of <code>TargetHList</code> from <code>SourceHList</code>:
    <ul>
      <li>Store the result in a <code>(plucked, remainder)</code> tuple</li>
    </ul>
  </li>
  <li>Call <code>sculpt</code> on <code>remainder</code>, passing the tail type of the current <code>TargetHList</code> as the new    <code>TargetHList</code> type.
    <ul>
      <li>Store the result in a <code>(sculpted_tail, sculpted_remainder)</code> tuple</li>
    </ul>
  </li>
  <li>Return <code>(HCons { head: plucked, tail: sculpted_tail }, sculpted_remainder)</code></li>
</ol>

<p>Note that in 1. we are making use of <code>pluck()</code>, and there is a recursive call to <code>sculpt()</code> in 2. Since there is a recursive call to <code>sculpt()</code>, it means that we need an exit-type as well. Intuitively, we’ll pencil one in:</p>

<blockquote>
  <p>When the target HList is empty (HNil), return a tuple <code>(HNil, SourceHList)</code></p>
</blockquote>

<h3 id="first-attempt-1">First attempt</h3>

<p>Given our logic, let’s assume we want 4 type parameters in our trait. Our trait is a bit more complicated than our <code>Pluck</code> trait, but not by much. We make use of the same associated-type trick to hold the type of <code>Remainder</code> to be returned as the 2nd element in our type that will be filled-in when we write instances of the trait.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="rust"><span class="line"><span></span><span class="k">trait</span><span class="w"> </span><span class="n">Sculptor</span><span class="o">&lt;</span><span class="n">Target</span><span class="p">,</span><span class="w"> </span><span class="n">TargetTail</span><span class="p">,</span><span class="w"> </span><span class="n">HeadIndex</span><span class="p">,</span><span class="w"> </span><span class="n">TailIndices</span><span class="o">&gt;</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
</span><span class="line">
</span><span class="line"><span class="w">  </span><span class="k">type</span> <span class="nc">Remainder</span><span class="p">;</span><span class="w"></span>
</span><span class="line">
</span><span class="line"><span class="w">  </span><span class="k">fn</span> <span class="nf">sculpt</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span><span class="w"> </span><span class="o">-&gt;</span><span class="w"> </span><span class="p">(</span><span class="n">HCons</span><span class="o">&lt;</span><span class="n">Target</span><span class="p">,</span><span class="w"> </span><span class="n">TargetTail</span><span class="o">&gt;</span><span class="p">,</span><span class="w"> </span><span class="n">Self</span><span class="o">::</span><span class="n">Remainder</span><span class="p">);</span><span class="w"></span>
</span><span class="line"><span class="p">}</span><span class="w"></span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The instance of <code>Sculptor</code> for the exit-type should be simple, right?:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="rust"><span class="line"><span></span><span class="c1">// Our exit condition is when Target is HNil, so we don&#39;t care about the tail of the target</span>
</span><span class="line"><span class="c1">// nor do we really care about the type of SourceHList</span>
</span><span class="line"><span class="k">impl</span><span class="w"> </span><span class="o">&lt;</span><span class="n">TargetTail</span><span class="p">,</span><span class="w"> </span><span class="n">HeadIndex</span><span class="p">,</span><span class="w"> </span><span class="n">TailIndices</span><span class="p">,</span><span class="w"> </span><span class="n">SourceHList</span><span class="o">&gt;</span><span class="w"> </span><span class="n">Sculptor</span><span class="o">&lt;</span><span class="n">HNil</span><span class="p">,</span><span class="w"> </span><span class="n">TargetTail</span><span class="p">,</span><span class="w"> </span><span class="n">HeadIndex</span><span class="p">,</span><span class="w"> </span><span class="n">TailIndices</span><span class="o">&gt;</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="n">SourceHList</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
</span><span class="line">
</span><span class="line"><span class="w">    </span><span class="k">type</span> <span class="nc">Remainder</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Source</span><span class="p">;</span><span class="w"></span>
</span><span class="line">
</span><span class="line"><span class="w">    </span><span class="c1">// ?!?!? HNil as the head type of an HCons doesn&#39;t make sense</span>
</span><span class="line"><span class="w">    </span><span class="k">fn</span> <span class="nf">sculpt</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span><span class="w"> </span><span class="o">-&gt;</span><span class="w"> </span><span class="p">(</span><span class="n">HCons</span><span class="o">&lt;</span><span class="n">HNil</span><span class="p">,</span><span class="w"> </span><span class="n">TargetTail</span><span class="o">&gt;</span><span class="p">,</span><span class="w"> </span><span class="n">Self</span><span class="o">::</span><span class="n">Remainder</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
</span><span class="line"><span class="w">        </span><span class="c1">// nevermind</span>
</span><span class="line"><span class="w">    </span><span class="p">}</span><span class="w"></span>
</span><span class="line">
</span><span class="line"><span class="p">}</span><span class="w"></span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Ooops; that didn’t work; our type signature for the trait can’t be fulfilled when implementing our instance! We simply have too many type parameters in our trait, even for the exit-type implementation (try implementing for the recursion case…it’ll become more apparent)</p>

<p>Back to the drawing board.</p>

<h3 id="second-attempt-1">Second attempt</h3>

<p>Let’s collapse our target-related type parameters into a single <code>Target</code> type parameter and our indices-related type parameters into a single <code>Indices</code> type parameter in our <code>Sculptor</code> trait declaration, and rely on the implementations to dictate (specialise) what types they should be (similar to how the <code>Plucker</code> trait had no mention of <code>There</code> or <code>Here</code>).</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="rust"><span class="line"><span></span><span class="k">trait</span><span class="w"> </span><span class="n">Sculptor</span><span class="o">&lt;</span><span class="n">Target</span><span class="p">,</span><span class="w"> </span><span class="n">Indices</span><span class="o">&gt;</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
</span><span class="line">
</span><span class="line"><span class="w">    </span><span class="k">type</span> <span class="nc">Remainder</span><span class="p">;</span><span class="w"></span>
</span><span class="line">
</span><span class="line"><span class="w">    </span><span class="k">fn</span> <span class="nf">sculpt</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span><span class="w"> </span><span class="o">-&gt;</span><span class="w"> </span><span class="p">(</span><span class="n">Target</span><span class="p">,</span><span class="w"> </span><span class="n">Self</span><span class="o">::</span><span class="n">Remainder</span><span class="p">);</span><span class="w"></span>
</span><span class="line"><span class="p">}</span><span class="w"></span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The exit-type implementation will still be when we have <code>HNil</code> as the target. Thinking it through further, in the case that we don’t have a <code>HNil</code> as the target, it’s obvious that <code>Source</code> can then be literally anything, so we’ll rename its type parameter <code>Source</code>. Since our intention for <code>Sculptor</code> is for <code>Indices</code> to be an HList of <code>Here</code> or <code>There&lt;A&gt;</code> (one for each type in our <code>Target</code> HList), the exit <code>Indices</code> must therefore be a valid Hlist. Since we don’t need an index to find an empty target, let’s make <code>Indices</code> <code>HNil</code> for simplicity.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="rust"><span class="line"><span></span><span class="k">impl</span><span class="o">&lt;</span><span class="n">Source</span><span class="o">&gt;</span><span class="w"> </span><span class="n">Sculptor</span><span class="o">&lt;</span><span class="n">HNil</span><span class="p">,</span><span class="w"> </span><span class="n">HNil</span><span class="o">&gt;</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="n">Source</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
</span><span class="line"><span class="w">    </span><span class="c1">// Since Our Target is HNil, we just return the Source</span>
</span><span class="line"><span class="w">    </span><span class="k">type</span> <span class="nc">Remainder</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Source</span><span class="p">;</span><span class="w"></span>
</span><span class="line">
</span><span class="line"><span class="w">    </span><span class="k">fn</span> <span class="nf">sculpt</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span><span class="w"> </span><span class="o">-&gt;</span><span class="w"> </span><span class="p">(</span><span class="n">HNil</span><span class="p">,</span><span class="w"> </span><span class="n">Self</span><span class="o">::</span><span class="n">Remainder</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
</span><span class="line"><span class="w">        </span><span class="p">(</span><span class="n">HNil</span><span class="p">,</span><span class="w"> </span><span class="bp">self</span><span class="p">)</span><span class="w"></span>
</span><span class="line"><span class="w">    </span><span class="p">}</span><span class="w"></span>
</span><span class="line"><span class="p">}</span><span class="w"></span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>To figure out the type parameters needed for our work-to-be-done type, let’s work through the logic we laid out earlier.</p>

<p>At minimum, we know we’re writing an instance of <code>Sculptor</code> for a Source of type HList, and our Target type is also an HList, so we’ll use <code>SHead</code> and <code>STail</code> to describe the “Source” HList (so <code>HCons&lt;SHead, STail&gt;</code>), and <code>THead</code> and <code>TTail</code> to denote the “Target” HList (similarly, <code>HCons&lt;THead, TTail&gt;</code>).</p>

<blockquote>
  <ol>
    <li>Pluck value with the head type of <code>TargetHList</code> from <code>SourceHList</code>:
      <ul>
        <li>Store the result in a <code>(plucked, remainder)</code> tuple</li>
      </ul>
    </li>
  </ol>
</blockquote>

<p>Since we need to <code>pluck()</code> a <code>THead</code> from our Source HList, we’ll need a type parameter for the first index, so let’s name it <code>IndexHead</code>. In addition, in order to <code>pluck()</code>, we need a <code>Plucker</code> too, so this constraint is needed somewhere in our implementation declaration:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="rust"><span class="line"><span></span><span class="w"> </span><span class="n">HCons</span><span class="o">&lt;</span><span class="n">SHead</span><span class="p">,</span><span class="w"> </span><span class="n">STail</span><span class="o">&gt;:</span><span class="w"> </span><span class="n">Plucker</span><span class="o">&lt;</span><span class="n">THead</span><span class="p">,</span><span class="w"> </span><span class="n">IndexHead</span><span class="o">&gt;</span><span class="w"></span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<blockquote>
  <ol>
    <li>Call <code>sculpt()</code> on <code>remainder</code>, passing the tail type of the current <code>TargetHList</code> as the new <code>TargetHList</code> type.
      <ul>
        <li>Store the result in a <code>(sculpted_tail, sculpted_remainder)</code> tuple</li>
      </ul>
    </li>
  </ol>
</blockquote>

<p>Since we want to sculpt the remainder of calling <code>pluck()</code> in step 1. into type <code>TTail</code> (tail of <code>TargetHList</code>), we’ll need to have an HList of indices for that purpose too, so let’s call it <code>IndexTail</code>. Note that we don’t need a separate type parameter for the remainder from 1 because we can take advantage of the associated type on <code>Plucker</code>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="rust"><span class="line"><span></span><span class="c1">// In English, this is read as:</span>
</span><span class="line"><span class="c1">// &quot;The remainder of plucking the Target head type (THead) out of the source HList</span>
</span><span class="line"><span class="c1">// must have a Sculptor implementation that lets us turn it into the tail type of</span>
</span><span class="line"><span class="c1">// the Target HList (TTail) using the tail of the current Indices (IndexTail)&quot;</span>
</span><span class="line"><span class="o">&lt;</span><span class="n">HCons</span><span class="o">&lt;</span><span class="n">SHead</span><span class="p">,</span><span class="w"> </span><span class="n">STail</span><span class="o">&gt;</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="n">Plucker</span><span class="o">&lt;</span><span class="n">THead</span><span class="p">,</span><span class="w"> </span><span class="n">IndexHead</span><span class="o">&gt;&gt;::</span><span class="n">Remainder</span><span class="o">:</span><span class="w"> </span><span class="n">Sculptor</span><span class="o">&lt;</span><span class="n">TTail</span><span class="p">,</span><span class="w"> </span><span class="n">IndexTail</span><span class="o">&gt;</span><span class="w"></span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<blockquote>
  <ol>
    <li>Return <code>(HCons { head: plucked, tail: sculpted_tail }, sculpted_remainder)</code></li>
  </ol>
</blockquote>

<p>What will the <code>Remainder</code> type be? It should be the remainder of sculpting the remainder from plucking the head type (<code>THead</code>) out of the current source HList into <code>TTail</code> (yeah…)</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="rust"><span class="line"><span></span><span class="k">type</span> <span class="nc">Remainder</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">&lt;&lt;</span><span class="n">HCons</span><span class="o">&lt;</span><span class="n">SHead</span><span class="p">,</span><span class="w"> </span><span class="n">STail</span><span class="o">&gt;</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="n">Plucker</span><span class="o">&lt;</span><span class="n">THead</span><span class="p">,</span><span class="w"> </span><span class="n">IndexHead</span><span class="o">&gt;&gt;::</span><span class="n">Remainder</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="n">Sculptor</span><span class="o">&lt;</span><span class="n">TTail</span><span class="p">,</span><span class="w"> </span><span class="n">IndexTail</span><span class="o">&gt;&gt;::</span><span class="n">Remainder</span><span class="p">;</span><span class="w"></span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Putting all these types together with the logic, we have</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
</pre></td><td class="code"><pre><code class="rust"><span class="line"><span></span><span class="k">impl</span><span class="w"> </span><span class="o">&lt;</span><span class="n">THead</span><span class="p">,</span><span class="w"> </span><span class="n">TTail</span><span class="p">,</span><span class="w"> </span><span class="n">SHead</span><span class="p">,</span><span class="w"> </span><span class="n">STail</span><span class="p">,</span><span class="w"> </span><span class="n">IndexHead</span><span class="p">,</span><span class="w"> </span><span class="n">IndexTail</span><span class="o">&gt;</span><span class="w"> </span><span class="n">Sculptor</span><span class="o">&lt;</span><span class="n">HCons</span><span class="o">&lt;</span><span class="n">THead</span><span class="p">,</span><span class="w"> </span><span class="n">TTail</span><span class="o">&gt;</span><span class="p">,</span><span class="w"> </span><span class="n">HCons</span><span class="o">&lt;</span><span class="n">IndexHead</span><span class="p">,</span><span class="w"> </span><span class="n">IndexTail</span><span class="o">&gt;&gt;</span><span class="w"></span>
</span><span class="line"><span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="n">HCons</span><span class="o">&lt;</span><span class="n">SHead</span><span class="p">,</span><span class="w"> </span><span class="n">STail</span><span class="o">&gt;</span><span class="w"></span>
</span><span class="line"><span class="w">    </span><span class="k">where</span><span class="w"></span>
</span><span class="line"><span class="w">        </span><span class="n">HCons</span><span class="o">&lt;</span><span class="n">SHead</span><span class="p">,</span><span class="w"> </span><span class="n">STail</span><span class="o">&gt;:</span><span class="w"> </span><span class="n">Plucker</span><span class="o">&lt;</span><span class="n">THead</span><span class="p">,</span><span class="w"> </span><span class="n">IndexHead</span><span class="o">&gt;</span><span class="p">,</span><span class="w"></span>
</span><span class="line"><span class="w">        </span><span class="o">&lt;</span><span class="n">HCons</span><span class="o">&lt;</span><span class="n">SHead</span><span class="p">,</span><span class="w"> </span><span class="n">STail</span><span class="o">&gt;</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="n">Plucker</span><span class="o">&lt;</span><span class="n">THead</span><span class="p">,</span><span class="w"> </span><span class="n">IndexHead</span><span class="o">&gt;&gt;::</span><span class="n">Remainder</span><span class="o">:</span><span class="w"> </span><span class="n">Sculptor</span><span class="o">&lt;</span><span class="n">TTail</span><span class="p">,</span><span class="w"> </span><span class="n">IndexTail</span><span class="o">&gt;</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
</span><span class="line">
</span><span class="line"><span class="w">    </span><span class="k">type</span> <span class="nc">Remainder</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">&lt;&lt;</span><span class="n">HCons</span><span class="o">&lt;</span><span class="n">SHead</span><span class="p">,</span><span class="w"> </span><span class="n">STail</span><span class="o">&gt;</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="n">Plucker</span><span class="o">&lt;</span><span class="n">THead</span><span class="p">,</span><span class="w"> </span><span class="n">IndexHead</span><span class="o">&gt;&gt;::</span><span class="n">Remainder</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="n">Sculptor</span><span class="o">&lt;</span><span class="n">TTail</span><span class="p">,</span><span class="w"> </span><span class="n">IndexTail</span><span class="o">&gt;&gt;::</span><span class="n">Remainder</span><span class="p">;</span><span class="w"></span>
</span><span class="line">
</span><span class="line"><span class="w">    </span><span class="k">fn</span> <span class="nf">sculpt</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span><span class="w"> </span><span class="o">-&gt;</span><span class="w"> </span><span class="p">(</span><span class="n">HCons</span><span class="o">&lt;</span><span class="n">THead</span><span class="p">,</span><span class="w"> </span><span class="n">TTail</span><span class="o">&gt;</span><span class="p">,</span><span class="w"> </span><span class="n">Self</span><span class="o">::</span><span class="n">Remainder</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
</span><span class="line"><span class="w">        </span><span class="kd">let</span><span class="w"> </span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="w"> </span><span class="n">r</span><span class="p">)</span><span class="o">:</span><span class="w"> </span><span class="p">(</span><span class="n">THead</span><span class="p">,</span><span class="w"> </span><span class="o">&lt;</span><span class="n">HCons</span><span class="o">&lt;</span><span class="n">SHead</span><span class="p">,</span><span class="w"> </span><span class="n">STail</span><span class="o">&gt;</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="n">Plucker</span><span class="o">&lt;</span><span class="n">THead</span><span class="p">,</span><span class="w"> </span><span class="n">IndexHead</span><span class="o">&gt;&gt;::</span><span class="n">Remainder</span><span class="p">)</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="bp">self</span><span class="p">.</span><span class="n">pluck</span><span class="p">();</span><span class="w"></span>
</span><span class="line"><span class="w">        </span><span class="kd">let</span><span class="w"> </span><span class="p">(</span><span class="n">tail</span><span class="p">,</span><span class="w"> </span><span class="n">tail_remainder</span><span class="p">)</span><span class="o">:</span><span class="w"> </span><span class="p">(</span><span class="n">TTail</span><span class="p">,</span><span class="w"> </span><span class="n">Self</span><span class="o">::</span><span class="n">Remainder</span><span class="p">)</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">r</span><span class="p">.</span><span class="n">sculpt</span><span class="p">();</span><span class="w"></span>
</span><span class="line"><span class="w">        </span><span class="p">(</span><span class="w"></span>
</span><span class="line"><span class="w">            </span><span class="n">HCons</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
</span><span class="line"><span class="w">                </span><span class="n">head</span><span class="o">:</span><span class="w"> </span><span class="n">p</span><span class="p">,</span><span class="w"></span>
</span><span class="line"><span class="w">                </span><span class="n">tail</span><span class="o">:</span><span class="w"> </span><span class="n">tail</span><span class="w"></span>
</span><span class="line"><span class="w">            </span><span class="p">},</span><span class="w"></span>
</span><span class="line"><span class="w">            </span><span class="n">tail_remainder</span><span class="w"></span>
</span><span class="line"><span class="w">        </span><span class="p">)</span><span class="w"></span>
</span><span class="line"><span class="w">    </span><span class="p">}</span><span class="w"></span>
</span><span class="line">
</span><span class="line"><span class="p">}</span><span class="w"></span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>As you can see, our implementations of <code>Sculptor</code> is type-recursive in an interesting way, and there are quite a few dependencies that need to be worked out between all the type parameters and the <code>Plucker</code> trait <em>as well as</em> the <code>Sculptor</code> trait itself (it appears in the <code>where</code> after all). Fortunately, the Rust compiler will do that for us (and if need be, tell you to raise the <code>#![recursion_limit]</code> in your crate).</p>

<p>If you’re not convinced this works, please by all means check out the <a href="https://beachape.com/frunk/frunk_core/hlist/index.html"><code>hlist</code> module</a> in Frunk, in particular the <a href="https://beachape.com/frunk/frunk_core/hlist/trait.Sculptor.html">Sculptor trait</a>.</p>

<h2 id="conclusion">Conclusion</h2>

<p>One last thing: the <code>Plucker</code> and <code>Sculptor</code> things aren’t just cute exercises; <code>Plucker</code> has already paid dividends when modeling <code>Sculptor</code>, and <code>Sculptor</code>, well, it’s instrumental in letting us do cool stuff like convert between structs with different <a href="https://beachape.com/blog/2017/03/04/labelledgeneric-in-rust-what-why-how/">LabelledGeneric implementations</a> (to an extent, anyways), and other, even cooler generic functions. We’ll talk more about this in <a href="https://beachape.com/blog/2017/04/12/boilerplate-free-struct-transforms-in-rust/">another post</a>.</p>

<p>If you do a search, you’ll find a number of articles on the Interwebs that introduce Rust’s trait system, but not many that go deep into how to use it when you need to do non-trivial type-level recursion in your trait implementations (though how often this need arises is … another topic altogether). I also find that people generally don’t talk about what they did <em>wrong</em>, so I wanted to share my failed approaches as well.</p>

<p>The goal of this post is to hopefully help others who are curious, or have a need to do something similar, as well as to leave notes for myself in case I ever need to revisit this in the future. The mental models for breaking down the problem, defining types, and building up to an implementation might not work for everyone, but they’ve helped me.</p>

<p>Personally, I think it’s awesome that a close-to-the-metal systems programming language like Rust has a powerful enough compiler and type-system to allow for these kinds of techniques. As you can see, we’ve managed to build powerful, reusable abstractions without doing anything unsafe, and we’ve exposed an API that requires just the bare minimum of type annotations; Rust infers the rest :) In any case, I hope this post was useful, and as usual, please chime in with questions and suggestions.</p>

<h3 id="credit">Credit</h3>
<ol>
  <li>The <code>Here</code> and <code>There&lt;A&gt;</code> design was largely gleaned from <a href="https://github.com/Sgeo/hlist/blob/master/src/lib.rs#L30">this code</a>. I stand on the shoulders of giants :)</li>
</ol>

<p>** It goes without saying that these operations need to be type-safe. That is, they are verified by the compiler without using any unsafe tricks that could blow up at runtime.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LabelledGeneric in Rust: What, Why, How?]]></title>
    <link href="https://beachape.com/blog/2017/03/04/labelledgeneric-in-rust-what-why-how/"/>
    <updated>2017-03-04T12:23:00+09:00</updated>
    <id>https://beachape.com/blog/2017/03/04/labelledgeneric-in-rust-what-why-how</id>
    <content type="html"><![CDATA[<p>What is <code>LabelledGeneric</code>? How does one encode type-level Strings in Rust? What is a labelled HList?</p>

<p>Hold on, let’s take a step back.</p>

<p>In a previous post about <a href="https://beachape.com/blog/2017/02/04/rust-generic-not-generics/">implementing <code>Generic</code> in Rust</a>, I briefly mentioned the fact that <code>Generic</code> could cause silent failures at runtime if you have 2 structs that are identically shaped type-wise, but have certain fields swapped.</p>

<p>While we can work around this using wrapper types, that solution leaves something to be desired, because, well, more boilerplate adds noise and requires more maintenance.</p>

<p>Ideally, we want to have something like this, where the following works:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
</pre></td><td class="code"><pre><code class="rust"><span class="line"><span></span><span class="cp">#[derive(LabelledGeneric)]</span><span class="w"></span>
</span><span class="line"><span class="k">struct</span> <span class="nc">NewUser</span><span class="o">&lt;</span><span class="na">&#39;a</span><span class="o">&gt;</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
</span><span class="line"><span class="w">    </span><span class="n">first_name</span><span class="o">:</span><span class="w"> </span><span class="o">&amp;</span><span class="na">&#39;a</span><span class="w"> </span><span class="kt">str</span><span class="p">,</span><span class="w"></span>
</span><span class="line"><span class="w">    </span><span class="n">last_name</span><span class="o">:</span><span class="w"> </span><span class="o">&amp;</span><span class="na">&#39;a</span><span class="w"> </span><span class="kt">str</span><span class="p">,</span><span class="w"></span>
</span><span class="line"><span class="w">    </span><span class="n">age</span><span class="o">:</span><span class="w"> </span><span class="kt">usize</span><span class="p">,</span><span class="w"></span>
</span><span class="line"><span class="p">}</span><span class="w"></span>
</span><span class="line">
</span><span class="line"><span class="cp">#[derive(LabelledGeneric)]</span><span class="w"></span>
</span><span class="line"><span class="k">struct</span> <span class="nc">SavedUser</span><span class="o">&lt;</span><span class="na">&#39;a</span><span class="o">&gt;</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
</span><span class="line"><span class="w">    </span><span class="n">first_name</span><span class="o">:</span><span class="w"> </span><span class="o">&amp;</span><span class="na">&#39;a</span><span class="w"> </span><span class="kt">str</span><span class="p">,</span><span class="w"></span>
</span><span class="line"><span class="w">    </span><span class="n">last_name</span><span class="o">:</span><span class="w"> </span><span class="o">&amp;</span><span class="na">&#39;a</span><span class="w"> </span><span class="kt">str</span><span class="p">,</span><span class="w"></span>
</span><span class="line"><span class="w">    </span><span class="n">age</span><span class="o">:</span><span class="w"> </span><span class="kt">usize</span><span class="p">,</span><span class="w"></span>
</span><span class="line"><span class="p">}</span><span class="w"></span>
</span><span class="line">
</span><span class="line"><span class="kd">let</span><span class="w"> </span><span class="n">n_user</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">NewUser</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
</span><span class="line"><span class="w">                    </span><span class="n">first_name</span><span class="o">:</span><span class="w"> </span><span class="s">&quot;Moe&quot;</span><span class="p">,</span><span class="w"></span>
</span><span class="line"><span class="w">                    </span><span class="n">last_name</span><span class="o">:</span><span class="w"> </span><span class="s">&quot;Ali&quot;</span><span class="p">,</span><span class="w"></span>
</span><span class="line"><span class="w">                    </span><span class="n">age</span><span class="o">:</span><span class="w"> </span><span class="mi">30</span><span class="w"></span>
</span><span class="line"><span class="w">                </span><span class="p">};</span><span class="w"></span>
</span><span class="line">
</span><span class="line"><span class="c1">// Convert from NewUser to SavedUser</span>
</span><span class="line"><span class="kd">let</span><span class="w"> </span><span class="n">s_user</span><span class="o">:</span><span class="w"> </span><span class="n">SavedUser</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">labelled_convert_from</span><span class="p">(</span><span class="n">n_user</span><span class="p">);</span><span class="w"></span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>but the following fails at compile-time because the fields are mis-matched (<code>first_name</code> and <code>last_name</code> have been swapped):</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="rust"><span class="line"><span></span><span class="c1">// Uh-oh! Fields are jumbled :(</span>
</span><span class="line"><span class="cp">#[derive(LabelledGeneric)]</span><span class="w"></span>
</span><span class="line"><span class="k">struct</span> <span class="nc">JumbledUser</span><span class="o">&lt;</span><span class="na">&#39;a</span><span class="o">&gt;</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
</span><span class="line"><span class="w">    </span><span class="n">last_name</span><span class="o">:</span><span class="w"> </span><span class="o">&amp;</span><span class="na">&#39;a</span><span class="w"> </span><span class="kt">str</span><span class="p">,</span><span class="w"></span>
</span><span class="line"><span class="w">    </span><span class="n">first_name</span><span class="o">:</span><span class="w"> </span><span class="o">&amp;</span><span class="na">&#39;a</span><span class="w"> </span><span class="kt">str</span><span class="p">,</span><span class="w"></span>
</span><span class="line"><span class="w">    </span><span class="n">age</span><span class="o">:</span><span class="w"> </span><span class="kt">usize</span><span class="w"></span>
</span><span class="line"><span class="p">}</span><span class="w"></span>
</span><span class="line">
</span><span class="line"><span class="c1">// This should fail at compile-time because last_name and first_name are swapped</span>
</span><span class="line"><span class="c1">// even if they have the same type</span>
</span><span class="line"><span class="kd">let</span><span class="w"> </span><span class="n">d_user</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">&lt;</span><span class="n">JumbledUser</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="n">LabelledGeneric</span><span class="o">&gt;::</span><span class="n">convert_from</span><span class="p">(</span><span class="n">s_user</span><span class="p">);</span><span class="w"></span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The solution to this sort of problem has been in <a href="https://github.com/milessabin/shapeless">Shapeless</a> for some time; by using <code>HList</code>s where each cell contains not just a value, but instead hold <em>named</em> fields, where each value is labelled <em>at the type level</em>.</p>

<p>Let’s take a look at how Frunk implements <code>Field</code> values and <code>LabelledGeneric</code> in Rust :)</p>

<!-- more -->

<h2 class="no_toc" id="add-frunk-to-your-project">Add Frunk to your project</h2>

<p><a href="https://github.com/lloydmeta/frunk">Frunk</a> is published to <a href="https://beachape.com//crates.io/crates/frunk">Crates.io</a>, so to begin, add the crate to your list of dependencies:</p>

<p><a href="https://crates.io/crates/frunk"><img src="https://img.shields.io/crates/v/frunk.svg" alt="Crates.io" /></a></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="rust"><span class="line"><span></span><span class="p">[</span><span class="n">dependencies</span><span class="p">]</span><span class="w"></span>
</span><span class="line"><span class="n">frunk</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s">&quot;${latest_version}&quot;</span><span class="w"></span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 class="no_toc" id="outline">Outline</h2>
<ul id="markdown-toc">
  <li><a href="#why-motivation">Why? (Motivation)</a>    <ul>
      <li><a href="#silent-runtime-errors-with-generic">Silent runtime errors with <code>Generic</code></a></li>
      <li><a href="#labelledgeneric-to-the-rescue"><code>LabelledGeneric</code> to the rescue</a></li>
      <li><a href="#field-"><code>Field</code> ??</a></li>
    </ul>
  </li>
  <li><a href="#how-it-works">How it works</a>    <ul>
      <li><a href="#fieldname-type"><code>Field&lt;Name, Type&gt;</code></a>        <ul>
          <li><a href="#type-level-characters-and-strings">Type-level characters and strings</a></li>
        </ul>
      </li>
      <li><a href="#anonymous-records">(Anonymous) Records!</a></li>
      <li><a href="#field-and-labelledgeneric"><code>Field</code> and <code>LabelledGeneric</code></a></li>
      <li><a href="#how-the-labelledgeneric-derivation-is-generated">How the <code>LabelledGeneric</code> derivation is generated</a></li>
    </ul>
  </li>
  <li><a href="#conclusion">Conclusion</a></li>
  <li><a href="#links">Links</a></li>
</ul>

<h2 id="why-motivation">Why? (Motivation)</h2>

<h3 id="silent-runtime-errors-with-generic">Silent runtime errors with <code>Generic</code></h3>

<p>To illustrate the problem, observe that the following 2 structs have the exact same “shape”</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="rust"><span class="line"><span></span><span class="cp">#[derive(Generic)]</span><span class="w"></span>
</span><span class="line"><span class="k">struct</span> <span class="nc">NewUser</span><span class="o">&lt;</span><span class="na">&#39;a</span><span class="o">&gt;</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
</span><span class="line"><span class="w">    </span><span class="n">first_name</span><span class="o">:</span><span class="w"> </span><span class="o">&amp;</span><span class="na">&#39;a</span><span class="w"> </span><span class="kt">str</span><span class="p">,</span><span class="w"></span>
</span><span class="line"><span class="w">    </span><span class="n">last_name</span><span class="o">:</span><span class="w"> </span><span class="o">&amp;</span><span class="na">&#39;a</span><span class="w"> </span><span class="kt">str</span><span class="p">,</span><span class="w"></span>
</span><span class="line"><span class="w">    </span><span class="n">age</span><span class="o">:</span><span class="w"> </span><span class="kt">usize</span><span class="p">,</span><span class="w"></span>
</span><span class="line"><span class="p">}</span><span class="w"></span>
</span><span class="line">
</span><span class="line"><span class="cp">#[derive(Generic)]</span><span class="w"></span>
</span><span class="line"><span class="k">struct</span> <span class="nc">JumbledUser</span><span class="o">&lt;</span><span class="na">&#39;a</span><span class="o">&gt;</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
</span><span class="line"><span class="w">    </span><span class="n">last_name</span><span class="o">:</span><span class="w"> </span><span class="o">&amp;</span><span class="na">&#39;a</span><span class="w"> </span><span class="kt">str</span><span class="p">,</span><span class="w"></span>
</span><span class="line"><span class="w">    </span><span class="n">first_name</span><span class="o">:</span><span class="w"> </span><span class="o">&amp;</span><span class="na">&#39;a</span><span class="w"> </span><span class="kt">str</span><span class="p">,</span><span class="w"></span>
</span><span class="line"><span class="w">    </span><span class="n">age</span><span class="o">:</span><span class="w"> </span><span class="kt">usize</span><span class="w"></span>
</span><span class="line"><span class="p">}</span><span class="w"></span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>That is, the <code>Generic</code> representation of their fields as <code>Generic</code> is simply <code>HList![&amp;'a str, &amp;'a str, usize]</code>. As a result, when we do the following:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="rust"><span class="line"><span></span><span class="kd">let</span><span class="w"> </span><span class="n">n_user</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">NewUser</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
</span><span class="line"><span class="w">                    </span><span class="n">first_name</span><span class="o">:</span><span class="w"> </span><span class="s">&quot;Moe&quot;</span><span class="p">,</span><span class="w"></span>
</span><span class="line"><span class="w">                    </span><span class="n">last_name</span><span class="o">:</span><span class="w"> </span><span class="s">&quot;Ali&quot;</span><span class="p">,</span><span class="w"></span>
</span><span class="line"><span class="w">                    </span><span class="n">age</span><span class="o">:</span><span class="w"> </span><span class="mi">30</span><span class="w"></span>
</span><span class="line"><span class="w">                </span><span class="p">};</span><span class="w"></span>
</span><span class="line">
</span><span class="line"><span class="c1">// Convert from NewUser to JumbledUser</span>
</span><span class="line"><span class="kd">let</span><span class="w"> </span><span class="n">s_user</span><span class="o">:</span><span class="w"> </span><span class="n">JumbledUser</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">convert_from</span><span class="p">(</span><span class="n">n_user</span><span class="p">);</span><span class="w"></span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Oh no! <code>s_user</code> has <code>first_name</code> and <code>last_name</code> flipped :(</p>

<p>As explained near the end of the post <a href="https://beachape.com/blog/2017/02/04/rust-generic-not-generics/">introducing Generic</a>, you can catch this sort of mistake by introducing wrapper types like <code>FirstName&lt;'a&gt;(&amp;' str)</code> for each field, but that introduces more boilerplate.  This sucks, because <code>Generic</code> is supposed to help <em>avoid</em> boilerplate!</p>

<p>Can we have our cake and eat it too ?</p>

<h3 id="labelledgeneric-to-the-rescue"><code>LabelledGeneric</code> to the rescue</h3>

<p><code>LabelledGeneric</code> was introduced in v0.1.12 of Frunk to solve this exact problem. This is how you use it.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
</pre></td><td class="code"><pre><code class="rust"><span class="line"><span></span><span class="cp">#[derive(LabelledGeneric)]</span><span class="w"></span>
</span><span class="line"><span class="k">struct</span> <span class="nc">NewUser</span><span class="o">&lt;</span><span class="na">&#39;a</span><span class="o">&gt;</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
</span><span class="line"><span class="w">    </span><span class="n">first_name</span><span class="o">:</span><span class="w"> </span><span class="o">&amp;</span><span class="na">&#39;a</span><span class="w"> </span><span class="kt">str</span><span class="p">,</span><span class="w"></span>
</span><span class="line"><span class="w">    </span><span class="n">last_name</span><span class="o">:</span><span class="w"> </span><span class="o">&amp;</span><span class="na">&#39;a</span><span class="w"> </span><span class="kt">str</span><span class="p">,</span><span class="w"></span>
</span><span class="line"><span class="w">    </span><span class="n">age</span><span class="o">:</span><span class="w"> </span><span class="kt">usize</span><span class="p">,</span><span class="w"></span>
</span><span class="line"><span class="p">}</span><span class="w"></span>
</span><span class="line">
</span><span class="line"><span class="cp">#[derive(LabelledGeneric)]</span><span class="w"></span>
</span><span class="line"><span class="k">struct</span> <span class="nc">SavedUser</span><span class="o">&lt;</span><span class="na">&#39;a</span><span class="o">&gt;</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
</span><span class="line"><span class="w">    </span><span class="n">first_name</span><span class="o">:</span><span class="w"> </span><span class="o">&amp;</span><span class="na">&#39;a</span><span class="w"> </span><span class="kt">str</span><span class="p">,</span><span class="w"></span>
</span><span class="line"><span class="w">    </span><span class="n">last_name</span><span class="o">:</span><span class="w"> </span><span class="o">&amp;</span><span class="na">&#39;a</span><span class="w"> </span><span class="kt">str</span><span class="p">,</span><span class="w"></span>
</span><span class="line"><span class="w">    </span><span class="n">age</span><span class="o">:</span><span class="w"> </span><span class="kt">usize</span><span class="p">,</span><span class="w"></span>
</span><span class="line"><span class="p">}</span><span class="w"></span>
</span><span class="line">
</span><span class="line"><span class="kd">let</span><span class="w"> </span><span class="n">n_user</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">NewUser</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
</span><span class="line"><span class="w">                    </span><span class="n">first_name</span><span class="o">:</span><span class="w"> </span><span class="s">&quot;Moe&quot;</span><span class="p">,</span><span class="w"></span>
</span><span class="line"><span class="w">                    </span><span class="n">last_name</span><span class="o">:</span><span class="w"> </span><span class="s">&quot;Ali&quot;</span><span class="p">,</span><span class="w"></span>
</span><span class="line"><span class="w">                    </span><span class="n">age</span><span class="o">:</span><span class="w"> </span><span class="mi">30</span><span class="w"></span>
</span><span class="line"><span class="w">                </span><span class="p">};</span><span class="w"></span>
</span><span class="line">
</span><span class="line"><span class="c1">// Convert from NewUser to SavedUser</span>
</span><span class="line"><span class="kd">let</span><span class="w"> </span><span class="n">s_user</span><span class="o">:</span><span class="w"> </span><span class="n">SavedUser</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">labelled_convert_from</span><span class="p">(</span><span class="n">n_user</span><span class="p">);</span><span class="w"></span>
</span><span class="line">
</span><span class="line"><span class="cp">#[derive(Generic)]</span><span class="w"></span>
</span><span class="line"><span class="k">struct</span> <span class="nc">JumbledUser</span><span class="o">&lt;</span><span class="na">&#39;a</span><span class="o">&gt;</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
</span><span class="line"><span class="w">    </span><span class="n">last_name</span><span class="o">:</span><span class="w"> </span><span class="o">&amp;</span><span class="na">&#39;a</span><span class="w"> </span><span class="kt">str</span><span class="p">,</span><span class="w"></span>
</span><span class="line"><span class="w">    </span><span class="n">first_name</span><span class="o">:</span><span class="w"> </span><span class="o">&amp;</span><span class="na">&#39;a</span><span class="w"> </span><span class="kt">str</span><span class="p">,</span><span class="w"></span>
</span><span class="line"><span class="w">    </span><span class="n">age</span><span class="o">:</span><span class="w"> </span><span class="kt">usize</span><span class="w"></span>
</span><span class="line"><span class="p">}</span><span class="w"></span>
</span><span class="line"><span class="c1">// ⬇︎ This will fail at compile time</span>
</span><span class="line"><span class="kd">let</span><span class="w"> </span><span class="n">j_user</span><span class="o">:</span><span class="w"> </span><span class="n">JumbledUser</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">labelled_convert_from</span><span class="p">(</span><span class="n">n_user</span><span class="p">);</span><span class="w"></span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>There isn’t a whole lot different to using <code>LabelledGeneric</code> vs using <code>Generic</code>:</p>

<ol>
  <li>Instead of deriving <code>Generic</code>, derive <code>LabelledGeneric</code></li>
  <li>Instead of calling <code>convert_from</code>, call <code>labelled_convert_from</code></li>
</ol>

<p>These 2 changes buy you a lot more type-safety at compile time, with zero boilerplate. By the way, if you’d like the compiler to automatically “align”, the generic representations so that you <em>could</em> instantiate a <code>JumbledUser</code> from a <code>NewUser</code>, then stay tuned for a <a href="https://beachape.com/blog/2017/04/12/boilerplate-free-struct-transforms-in-rust/">later post</a> ;)</p>

<p>The tl;dr version of how this works is that deriving by <code>LabelledGeneric</code>, we make the struct an instance of the <code>LabelledGeneric</code> typeclass.  This typeclass is almost identical to the <code>Generic</code> typeclass, but the <code>derive</code> does something a bit different with the generic representation of the struct: it isn’t just an <code>HList</code> wrapping naked values.</p>

<p>Instead, the generic representation will be an <code>HList</code> where each cell will contain <em>field name</em> information, at the type-level, and conceptually has the following types:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class="rust"><span class="line"><span></span><span class="c1">// LabelledGeneric Representation for NewUser</span>
</span><span class="line"><span class="k">type</span> <span class="nc">NewUserRepr</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">HList</span><span class="o">!</span><span class="p">[</span><span class="w"></span>
</span><span class="line"><span class="w">  </span><span class="n">Field</span><span class="o">&lt;</span><span class="n">first_name</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="na">&#39;a</span><span class="w"> </span><span class="kt">str</span><span class="o">&gt;</span><span class="p">,</span><span class="w"></span>
</span><span class="line"><span class="w">  </span><span class="n">Field</span><span class="o">&lt;</span><span class="n">last_name</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="na">&#39;a</span><span class="w"> </span><span class="kt">str</span><span class="o">&gt;</span><span class="p">,</span><span class="w"></span>
</span><span class="line"><span class="w">  </span><span class="n">Field</span><span class="o">&lt;</span><span class="n">age</span><span class="p">,</span><span class="w"> </span><span class="kt">usize</span><span class="o">&gt;</span><span class="p">];</span><span class="w"></span>
</span><span class="line">
</span><span class="line"><span class="c1">// LabelledGeneric Representation for SavedUser</span>
</span><span class="line"><span class="k">type</span> <span class="nc">SavedUserRepr</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">HList</span><span class="o">!</span><span class="p">[</span><span class="w"></span>
</span><span class="line"><span class="w">  </span><span class="n">Field</span><span class="o">&lt;</span><span class="n">first_name</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="na">&#39;a</span><span class="w"> </span><span class="kt">str</span><span class="o">&gt;</span><span class="p">,</span><span class="w"></span>
</span><span class="line"><span class="w">  </span><span class="n">Field</span><span class="o">&lt;</span><span class="n">last_name</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="na">&#39;a</span><span class="w"> </span><span class="kt">str</span><span class="o">&gt;</span><span class="p">,</span><span class="w"></span>
</span><span class="line"><span class="w">  </span><span class="n">Field</span><span class="o">&lt;</span><span class="n">age</span><span class="p">,</span><span class="w"> </span><span class="kt">usize</span><span class="o">&gt;</span><span class="p">];</span><span class="w"></span>
</span><span class="line">
</span><span class="line"><span class="c1">// LabelledGeneric Representation for JumbledUser</span>
</span><span class="line"><span class="k">type</span> <span class="nc">JumbledUserRepr</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">HList</span><span class="o">!</span><span class="p">[</span><span class="w"></span>
</span><span class="line"><span class="w">  </span><span class="n">Field</span><span class="o">&lt;</span><span class="n">last_name</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="na">&#39;a</span><span class="w"> </span><span class="kt">str</span><span class="o">&gt;</span><span class="p">,</span><span class="w"></span>
</span><span class="line"><span class="w">  </span><span class="n">Field</span><span class="o">&lt;</span><span class="n">first_name</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="na">&#39;a</span><span class="w"> </span><span class="kt">str</span><span class="o">&gt;</span><span class="p">,</span><span class="w"></span>
</span><span class="line"><span class="w">  </span><span class="n">Field</span><span class="o">&lt;</span><span class="n">age</span><span class="p">,</span><span class="w"> </span><span class="kt">usize</span><span class="o">&gt;</span><span class="p">];</span><span class="w"></span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>This difference in type-level representation is how the compiler knows that one can’t simply convert a <code>NewUser</code> or <code>SavedUser</code> into a <code>JumbledUser</code> via <code>labelled_convert_from</code>.</p>

<h3 id="field-"><code>Field</code> ??</h3>

<p>What is <code>Field</code> ? It’s simply a container struct that is parameterised by 2 types, and has the following signature:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="rust"><span class="line"><span></span><span class="k">pub</span><span class="w"> </span><span class="k">struct</span> <span class="nc">Field</span><span class="o">&lt;</span><span class="n">Name</span><span class="p">,</span><span class="w"> </span><span class="n">Type</span><span class="o">&gt;</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="p">...</span><span class="w"> </span><span class="p">}</span><span class="w"></span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The first type parameter is <code>Name</code> and its purpose is to contain a type-level String, and the second type parameter is <code>Type</code>, which reflects the type of value contained inside the struct.</p>

<p>It may help to think of <code>Field</code> as an ad-hoc wrapper type.</p>

<h2 id="how-it-works">How it works</h2>

<h3 id="fieldname-type"><code>Field&lt;Name, Type&gt;</code></h3>

<p>The full definition of <code>Field</code> is currently as follows:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="rust"><span class="line"><span></span><span class="k">pub</span><span class="w"> </span><span class="k">struct</span> <span class="nc">Field</span><span class="o">&lt;</span><span class="n">Name</span><span class="p">,</span><span class="w"> </span><span class="n">Type</span><span class="o">&gt;</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
</span><span class="line"><span class="w">    </span><span class="n">name</span><span class="o">:</span><span class="w"> </span><span class="n">PhantomData</span><span class="o">&lt;</span><span class="n">Name</span><span class="o">&gt;</span><span class="p">,</span><span class="w"></span>
</span><span class="line"><span class="w">    </span><span class="k">pub</span><span class="w"> </span><span class="n">value</span><span class="o">:</span><span class="w"> </span><span class="n">Type</span><span class="p">,</span><span class="w"></span>
</span><span class="line"><span class="p">}</span><span class="w"></span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><code>PhantomData</code> is used to allow us to bind a concrete type to the <code>Name</code> type parameter in an instance of <code>Field</code> without actually having it take up any space (for more details on Phantom data, refer to the <a href="https://doc.rust-lang.org/std/marker/struct.PhantomData.html">official docs</a>).</p>

<p>To construct a <code>Field</code>, Frunk exposes a macro called <code>field!</code> so that you don’t need to touch <code>PhantomData</code> yourself.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="rust"><span class="line"><span></span><span class="c1">// Usage: we let the compiler figure out the value type for us</span>
</span><span class="line"><span class="kd">let</span><span class="w"> </span><span class="n">age</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">field</span><span class="o">!</span><span class="p">((</span><span class="n">a</span><span class="p">,</span><span class="w"> </span><span class="n">g</span><span class="p">,</span><span class="w"> </span><span class="n">e</span><span class="p">),</span><span class="w"> </span><span class="mi">3</span><span class="p">);</span><span class="w"></span>
</span><span class="line">
</span><span class="line"><span class="n">assert_eq</span><span class="o">!</span><span class="p">(</span><span class="n">age</span><span class="p">.</span><span class="n">name</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;age&quot;</span><span class="p">);</span><span class="w"></span>
</span><span class="line"><span class="n">assert_eq</span><span class="o">!</span><span class="p">(</span><span class="n">age</span><span class="p">.</span><span class="n">value</span><span class="p">,</span><span class="w"> </span><span class="mi">3</span><span class="p">);</span><span class="w"></span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>For more information about the <code>field!</code> macro, please refer to its <a href="https://beachape.com/frunk/frunk_core/macro.field.html">Rustdoc page</a>.  Astute readers will notice the odd <code>(a,g,e)</code> type used for naming. What is that about ???</p>

<h4 id="type-level-characters-and-strings">Type-level characters and strings</h4>

<p>In order represent characters at the type level, Frunk currently uses <code>enum</code>s that have zero members. This is because empty enums have distinct types, and yet cannot be instantiated at runtime and thus are guaranteed to incur zero cost.</p>

<p>Conceptually, we declare one enum for every character we want to represent:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="rust"><span class="line"><span></span><span class="k">pub</span><span class="w"> </span><span class="k">enum</span> <span class="nc">a</span><span class="w"> </span><span class="p">{}</span><span class="w"></span>
</span><span class="line"><span class="k">pub</span><span class="w"> </span><span class="k">enum</span> <span class="nc">b</span><span class="w"> </span><span class="p">{}</span><span class="w"></span>
</span><span class="line"><span class="k">pub</span><span class="w"> </span><span class="k">enum</span> <span class="nc">c</span><span class="w"> </span><span class="p">{}</span><span class="w"></span>
</span><span class="line"><span class="c1">// ...</span>
</span><span class="line"><span class="k">pub</span><span class="w"> </span><span class="k">enum</span> <span class="nc">A</span><span class="w"> </span><span class="p">{}</span><span class="w"></span>
</span><span class="line"><span class="c1">// ... etc</span>
</span><span class="line"><span class="c1">// Numbers can&#39;t be identifiers, so we preface them with an underscore</span>
</span><span class="line"><span class="k">pub</span><span class="w"> </span><span class="k">enum</span> <span class="nc">_1</span><span class="w"> </span><span class="p">{}</span><span class="w"></span>
</span><span class="line"><span class="k">pub</span><span class="w"> </span><span class="k">enum</span> <span class="nc">_2</span><span class="w"> </span><span class="p">{}</span><span class="w"></span>
</span><span class="line">
</span><span class="line"><span class="c1">// In reality, the above is generated by a macro.</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>This means that characters outside English alphanumeric range will need to be specially encoded (the <code>LabelledGeneric</code> derivation uses unicode, but more on this later), but for the most part, this should suffice for the use case of encoding field names as types.</p>

<p>As you may have guessed, type-level strings are then simply represented as tuple types, hence <code>(a,g,e)</code>. For the sake of reducing noise, in the rest of this post, we will refer to these name-types without commas and parentheses.</p>

<p><strong>Note</strong>: This type-level encoding of strings may change in the future.</p>

<h3 id="anonymous-records">(Anonymous) Records!</h3>

<p>Combining the <code>Field</code> and <code>HList</code> constructs gets us something else: Records. I believe once upon a time, Rust supported anonymous structs; well, you can get most of that functionality back with Frunk!</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="rust"><span class="line"><span></span><span class="kd">let</span><span class="w"> </span><span class="n">record</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">hlist</span><span class="o">!</span><span class="p">[</span><span class="w"></span>
</span><span class="line"><span class="w">    </span><span class="n">field</span><span class="o">!</span><span class="p">(</span><span class="n">name</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;Joe&quot;</span><span class="p">),</span><span class="w"></span>
</span><span class="line"><span class="w">    </span><span class="n">field</span><span class="o">!</span><span class="p">(</span><span class="n">age</span><span class="p">,</span><span class="w"> </span><span class="mi">30</span><span class="p">)</span><span class="w"></span>
</span><span class="line"><span class="p">];</span><span class="w"></span>
</span><span class="line">
</span><span class="line"><span class="c1">// We&#39;ll talk about pluck() in a later post, but just an FYI, it returns the</span>
</span><span class="line"><span class="c1">// target value with the type you specified as well as the remainder</span>
</span><span class="line"><span class="c1">// of the HList in a pair. It is checked at compile time to make sure it never</span>
</span><span class="line"><span class="c1">// fails at runtime.</span>
</span><span class="line"><span class="kd">let</span><span class="w"> </span><span class="p">(</span><span class="n">name</span><span class="p">,</span><span class="w"> </span><span class="n">_</span><span class="p">)</span><span class="o">:</span><span class="w"> </span><span class="p">(</span><span class="n">Field</span><span class="o">&lt;</span><span class="n">name</span><span class="p">,</span><span class="w"> </span><span class="n">_</span><span class="o">&gt;</span><span class="p">,</span><span class="w"> </span><span class="n">_</span><span class="p">)</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">record</span><span class="p">.</span><span class="n">pluck</span><span class="p">();</span><span class="w"></span>
</span><span class="line"><span class="n">assert_eq</span><span class="o">!</span><span class="p">(</span><span class="n">name</span><span class="p">.</span><span class="n">value</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;Joe&quot;</span><span class="p">)</span><span class="w"></span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>This kind of thing is sometimes called an “anonymous Record” in Scala (see <a href="https://github.com/scala-records/scala-records">scala-records</a>, or <a href="https://github.com/milessabin/shapeless/blob/master/examples/src/main/scala/shapeless/examples/records.scala">Shapeless</a>).</p>

<p>In the future, the anonymous Records API in Frunk might be improved. As it stands, it exists mostly for the purpose of <code>LabelledGeneric</code> and is a bit noisy to use.</p>

<h3 id="field-and-labelledgeneric"><code>Field</code> and <code>LabelledGeneric</code></h3>

<p>So, what is the relationship between <code>Field</code> and  the <code>LabelledGeneric</code> typeclass?</p>

<p>Quite simply, the associated <code>Repr</code> type of an instance of <code>LabelledGeneric</code> should have the type of an anonymous record (labelled <code>HList</code>).</p>

<p>So, given the following</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="rust"><span class="line"><span></span><span class="k">struct</span> <span class="nc">Person</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
</span><span class="line"><span class="w">  </span><span class="n">name</span><span class="o">:</span><span class="w"> </span><span class="nb">String</span><span class="p">,</span><span class="w"></span>
</span><span class="line"><span class="w">  </span><span class="n">age</span><span class="o">:</span><span class="w"> </span><span class="kt">usize</span><span class="w"></span>
</span><span class="line"><span class="p">}</span><span class="w"></span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>This is one possible implementation of <code>LabelledGeneric</code> for <code>Person</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
</pre></td><td class="code"><pre><code class="rust"><span class="line"><span></span><span class="k">impl</span><span class="w"> </span><span class="n">LabelledGeneric</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="n">Person</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
</span><span class="line">
</span><span class="line"><span class="w">  </span><span class="k">type</span> <span class="nc">Repr</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">HList</span><span class="o">!</span><span class="p">[</span><span class="w"> </span><span class="n">Field</span><span class="o">&lt;</span><span class="n">name</span><span class="p">,</span><span class="w"> </span><span class="nb">String</span><span class="o">&gt;</span><span class="p">,</span><span class="w"> </span><span class="n">Field</span><span class="o">&lt;</span><span class="n">age</span><span class="p">,</span><span class="w"> </span><span class="kt">usize</span><span class="o">&gt;</span><span class="w"> </span><span class="p">];</span><span class="w"></span>
</span><span class="line">
</span><span class="line"><span class="w">  </span><span class="k">fn</span> <span class="nf">into</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span><span class="w"> </span><span class="o">-&gt;</span><span class="w"> </span><span class="n">Self</span><span class="o">::</span><span class="n">Repr</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
</span><span class="line"><span class="w">    </span><span class="n">hlist</span><span class="o">!</span><span class="p">[</span><span class="w"></span>
</span><span class="line"><span class="w">      </span><span class="n">field</span><span class="o">!</span><span class="p">(</span><span class="n">name</span><span class="p">,</span><span class="w"> </span><span class="bp">self</span><span class="p">.</span><span class="n">name</span><span class="p">),</span><span class="w"></span>
</span><span class="line"><span class="w">      </span><span class="n">field</span><span class="o">!</span><span class="p">(</span><span class="n">age</span><span class="p">,</span><span class="w"> </span><span class="bp">self</span><span class="p">.</span><span class="n">age</span><span class="p">)</span><span class="w"></span>
</span><span class="line"><span class="w">    </span><span class="p">]</span><span class="w"></span>
</span><span class="line"><span class="w">  </span><span class="p">}</span><span class="w"></span>
</span><span class="line">
</span><span class="line"><span class="w">  </span><span class="k">fn</span> <span class="nf">from</span><span class="p">(</span><span class="n">r</span><span class="o">:</span><span class="w"> </span><span class="n">Self</span><span class="o">::</span><span class="n">Repr</span><span class="p">)</span><span class="w"> </span><span class="o">-&gt;</span><span class="w"> </span><span class="n">Self</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
</span><span class="line"><span class="w">    </span><span class="kd">let</span><span class="w"> </span><span class="n">hlist_pat</span><span class="o">!</span><span class="p">[</span><span class="w"> </span><span class="n">name</span><span class="p">,</span><span class="w"> </span><span class="n">age</span><span class="w"> </span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">r</span><span class="p">;</span><span class="w"></span>
</span><span class="line"><span class="w">    </span><span class="n">Person</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
</span><span class="line"><span class="w">      </span><span class="n">name</span><span class="o">:</span><span class="w"> </span><span class="n">name</span><span class="p">.</span><span class="n">value</span><span class="p">,</span><span class="w"></span>
</span><span class="line"><span class="w">      </span><span class="n">age</span><span class="o">:</span><span class="w"> </span><span class="n">age</span><span class="p">.</span><span class="n">value</span><span class="w"></span>
</span><span class="line"><span class="w">    </span><span class="p">}</span><span class="w"></span>
</span><span class="line"><span class="w">  </span><span class="p">}</span><span class="w"></span>
</span><span class="line">
</span><span class="line"><span class="p">}</span><span class="w"></span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>But writing that yourself is tedious <strong>and</strong> error-prone, so Frunk provides a derivation for you.</p>

<h3 id="how-the-labelledgeneric-derivation-is-generated">How the <code>LabelledGeneric</code> derivation is generated</h3>

<p>As illustrated earlier, you can do the following to create an instance of <code>LabelledGeneric</code> for your struct:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="rust"><span class="line"><span></span><span class="cp">#[derive(LabelledGeneric)]</span><span class="w"></span>
</span><span class="line"><span class="k">struct</span> <span class="nc">Person</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
</span><span class="line"><span class="w">  </span><span class="n">name</span><span class="o">:</span><span class="w"> </span><span class="nb">String</span><span class="p">,</span><span class="w"></span>
</span><span class="line"><span class="w">  </span><span class="n">age</span><span class="o">:</span><span class="w"> </span><span class="kt">usize</span><span class="w"></span>
</span><span class="line"><span class="p">}</span><span class="w"></span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>It generates something conceptually similar to what we <a href="#labelled-and-labelledgeneric">had above</a>, so we won’t repeat that here.</p>

<p>That said, there is something special about the way that characters outside the range of the standard English alphabet and digits are handled. For each of those characters, we get the Unicode hexcode and use those digits, sandwiched by <code>_uc</code> and <code>uc_</code> delimiters, as the type-level representation.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="rust"><span class="line"><span></span><span class="c1">// This isn&#39;t possible (yet) in Rust, but let&#39;s pretend it is</span>
</span><span class="line"><span class="k">struct</span> <span class="nc">Fancy</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
</span><span class="line"><span class="w">  </span><span class="err">❤</span><span class="o">:</span><span class="w"> </span><span class="kt">usize</span><span class="w"></span>
</span><span class="line"><span class="p">}</span><span class="w"></span>
</span><span class="line">
</span><span class="line"><span class="c1">// Since ❤ has a Unicode hexcode of \u{2764}\u{fe0f}, the</span>
</span><span class="line"><span class="c1">// labelled generic representation for the above would be</span>
</span><span class="line"><span class="k">type</span> <span class="nc">Repr</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">HList</span><span class="o">!</span><span class="p">[</span><span class="w"> </span><span class="n">Field</span><span class="o">&lt;</span><span class="n">_ucu2764ufe0fuc_</span><span class="p">,</span><span class="w"> </span><span class="kt">usize</span><span class="o">&gt;</span><span class="w"> </span><span class="p">]</span><span class="w"></span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>This allows us to effectively represent virtually any legal identifier at the type level, even when the ASCII-only restriction for identifiers is lifted from stable Rust. For more details, take a look at how characters are matched to identifiers <a href="https://github.com/lloydmeta/frunk/blob/8c75c23b1986e533ada83ba89b3b0de584db0f23/derives/src/derive_labelled_generic.rs#L105-L124">here</a>.</p>

<h2 id="conclusion">Conclusion</h2>
<p>In closing, I’d like to stress that all the abstractions and techniques described in this post are type-safe (no casting happening) and thus get fully verified by Rust’s compiler and its strong type system.</p>

<p>As far as I am aware, this is the first implementation of labelled HLists (aka anonymous Records) and <code>LabelledGeneric</code> in Rust, and I hope this post did a good job of explaining what problems they solve, what they are, how they work, and why you might want to use them. As usual, please give them a go and chime in with questions, comments, ideas, or PRs!</p>

<p>Also, as alluded to in <a href="#labelledgeneric-to-the-rescue">the section</a> introducing <code>LabelledGeneric</code>, there is a way to automatically match up out-of-order fields. We’ll go through this in another post.</p>

<h2 id="links">Links</h2>

<ol>
  <li><a href="https://github.com/lloydmeta/frunk">Frunk on Github</a></li>
  <li><a href="https://crates.io/crates/frunk">Frunk on Crates.io</a></li>
</ol>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rust Generic (Not Generics)]]></title>
    <link href="https://beachape.com/blog/2017/02/04/rust-generic-not-generics/"/>
    <updated>2017-02-04T02:14:00+09:00</updated>
    <id>https://beachape.com/blog/2017/02/04/rust-generic-not-generics</id>
    <content type="html"><![CDATA[<p>Have you ever wanted to convert <code>Hlist</code>s into Structs or to reuse logic across different types that are structurally identical or very similar (e.g. same data across different domains)? <code>Generic</code> can help you do that with minimal boilerplate.</p>

<p><img class="center" src="https://beachape.com/images/generic_example.png" width="350" height="350" title="'From Hlist to Struct, no boilerplate'" /></p>

<p><code>Generic</code> is a way of representing a type in … a generic way. By coding around <code>Generic</code>, you can write functions that abstract over types and arity, but still have the ability to recover your original type afterwards. This can be a fairly powerful thing.</p>

<!-- more -->

<p>Thanks to the new Macros 1.1 infrastructure added in Rust 1.15, Frunk comes out of the box with a custom <code>Generic</code> derivation so that boilerplate is kept to a minimum. Without further ado, let’s dive in to see what Generic can do for us.</p>

<h2 id="add-frunk-to-your-project">Add Frunk to your project</h2>

<p><a href="https://github.com/lloydmeta/frunk">Frunk</a> is published to <a href="https://beachape.com//crates.io/crates/frunk">Crates.io</a>, so to begin, add the crate to your list of dependencies:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="rust"><span class="line"><span></span><span class="p">[</span><span class="n">dependencies</span><span class="p">]</span><span class="w"></span>
</span><span class="line"><span class="n">frunk</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s">&quot;0.1.9&quot;</span><span class="w"></span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="examples">Examples</h2>

<h3 id="hlist--struct">HList ⇄ Struct</h3>

<p>Have an <code>HList</code> lying around and want to turn it into a Struct with the same shape (maybe you’re using <a href="https://beachape.com/blog/2016/10/24/accumulating-results-in-rust-with-validated/">Validated</a>)?</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
</pre></td><td class="code"><pre><code class="rust"><span class="line"><span></span><span class="k">extern</span><span class="w"> </span><span class="k">crate</span><span class="w"> </span><span class="n">frunk</span><span class="p">;</span><span class="w"></span>
</span><span class="line"><span class="cp">#[macro_use]</span><span class="w"> </span><span class="c1">// for the hlist macro</span>
</span><span class="line"><span class="k">extern</span><span class="w"> </span><span class="k">crate</span><span class="w"> </span><span class="n">frunk_core</span><span class="p">;</span><span class="w"></span>
</span><span class="line"><span class="k">use</span><span class="w"> </span><span class="n">frunk</span><span class="o">::*</span><span class="p">;</span><span class="w"> </span><span class="c1">// for the Generic trait and HList</span>
</span><span class="line">
</span><span class="line"><span class="cp">#[derive(Generic, Debug, PartialEq)]</span><span class="w"></span>
</span><span class="line"><span class="k">struct</span> <span class="nc">Person</span><span class="o">&lt;</span><span class="na">&#39;a</span><span class="o">&gt;</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
</span><span class="line"><span class="w">    </span><span class="n">first_name</span><span class="o">:</span><span class="w"> </span><span class="o">&amp;</span><span class="na">&#39;a</span><span class="w"> </span><span class="kt">str</span><span class="p">,</span><span class="w"></span>
</span><span class="line"><span class="w">    </span><span class="n">last_name</span><span class="o">:</span><span class="w"> </span><span class="o">&amp;</span><span class="na">&#39;a</span><span class="w"> </span><span class="kt">str</span><span class="p">,</span><span class="w"></span>
</span><span class="line"><span class="w">    </span><span class="n">age</span><span class="o">:</span><span class="w"> </span><span class="kt">usize</span><span class="p">,</span><span class="w"></span>
</span><span class="line"><span class="p">}</span><span class="w"></span>
</span><span class="line">
</span><span class="line"><span class="kd">let</span><span class="w"> </span><span class="n">h</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">hlist</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;Joe&quot;</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;Blow&quot;</span><span class="p">,</span><span class="w"> </span><span class="mi">30</span><span class="p">);</span><span class="w"></span>
</span><span class="line"><span class="kd">let</span><span class="w"> </span><span class="n">p</span><span class="o">:</span><span class="w"> </span><span class="n">Person</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">from_generic</span><span class="p">(</span><span class="n">h</span><span class="p">);</span><span class="w"></span>
</span><span class="line"><span class="n">assert_eq</span><span class="o">!</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="w"></span>
</span><span class="line"><span class="w">           </span><span class="n">Person</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
</span><span class="line"><span class="w">               </span><span class="n">first_name</span><span class="o">:</span><span class="w"> </span><span class="s">&quot;Joe&quot;</span><span class="p">,</span><span class="w"></span>
</span><span class="line"><span class="w">               </span><span class="n">last_name</span><span class="o">:</span><span class="w"> </span><span class="s">&quot;Blow&quot;</span><span class="p">,</span><span class="w"></span>
</span><span class="line"><span class="w">               </span><span class="n">age</span><span class="o">:</span><span class="w"> </span><span class="mi">30</span><span class="p">,</span><span class="w"></span>
</span><span class="line"><span class="w">           </span><span class="p">});</span><span class="w"></span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>This also works the other way too; just pass a struct to <code>into_generic</code> and get its generic representation.</p>

<p>One usecase for something like this is if you have a bunch of fields that you want to validate “simultaneously”, and you want to transform the end result into a single Struct; this is often the case when you want to turn external input (e.g. coming into your API, a web form, or fields read from a database), and in a previous post I introduced <a href="https://beachape.com/blog/2016/10/24/accumulating-results-in-rust-with-validated/">Validated</a> as a way of doing that.</p>

<p>With the introduction of <code>Generic</code>, that last step of transforming an <code>HList</code> into your struct gets much simpler:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="rust"><span class="line"><span></span><span class="kd">let</span><span class="w"> </span><span class="n">validated</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">get_first_name</span><span class="p">().</span><span class="n">into_validated</span><span class="p">()</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">get_last_name</span><span class="p">()</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">get_age</span><span class="p">();</span><span class="w"></span>
</span><span class="line"><span class="kd">let</span><span class="w"> </span><span class="n">person</span><span class="o">:</span><span class="w"> </span><span class="nb">Result</span><span class="o">&lt;</span><span class="n">Person</span><span class="p">,</span><span class="w"> </span><span class="n">_</span><span class="o">&gt;</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">validated</span><span class="w"></span>
</span><span class="line"><span class="w">  </span><span class="p">.</span><span class="n">into_result</span><span class="p">()</span><span class="w"></span>
</span><span class="line"><span class="w">  </span><span class="p">.</span><span class="n">map</span><span class="p">(</span><span class="o">|</span><span class="n">h</span><span class="o">|</span><span class="w"> </span><span class="n">from_generic</span><span class="p">(</span><span class="n">h</span><span class="p">));</span><span class="w"> </span><span class="c1">// &lt;-- much simpler !</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="converting-between-structs">Converting between Structs</h3>

<p>Sometimes you might have 2 or more types that are structurally the same (e.g. different domains but the same data) and you’d like to convert between them. An example of this might be when you have a model for deserialising from an external API and another one for internal application business logic, and yet another for persistence.</p>

<p>Generic comes with a handy <code>convert_from</code> method that helps here:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
</pre></td><td class="code"><pre><code class="rust"><span class="line"><span></span><span class="c1">// Assume we have all the imports needed</span>
</span><span class="line">
</span><span class="line"><span class="cp">#[derive(Generic)]</span><span class="w"></span>
</span><span class="line"><span class="k">struct</span> <span class="nc">ApiPerson</span><span class="o">&lt;</span><span class="na">&#39;a</span><span class="o">&gt;</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
</span><span class="line"><span class="w">    </span><span class="n">FirstName</span><span class="o">:</span><span class="w"> </span><span class="o">&amp;</span><span class="na">&#39;a</span><span class="w"> </span><span class="kt">str</span><span class="p">,</span><span class="w"></span>
</span><span class="line"><span class="w">    </span><span class="n">LastName</span><span class="o">:</span><span class="w"> </span><span class="o">&amp;</span><span class="na">&#39;a</span><span class="w"> </span><span class="kt">str</span><span class="p">,</span><span class="w"></span>
</span><span class="line"><span class="w">    </span><span class="n">Age</span><span class="o">:</span><span class="w"> </span><span class="kt">usize</span><span class="p">,</span><span class="w"></span>
</span><span class="line"><span class="p">}</span><span class="w"></span>
</span><span class="line">
</span><span class="line"><span class="cp">#[derive(Generic)]</span><span class="w"></span>
</span><span class="line"><span class="k">struct</span> <span class="nc">DomainPerson</span><span class="o">&lt;</span><span class="na">&#39;a</span><span class="o">&gt;</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
</span><span class="line"><span class="w">    </span><span class="n">first_name</span><span class="o">:</span><span class="w"> </span><span class="o">&amp;</span><span class="na">&#39;a</span><span class="w"> </span><span class="kt">str</span><span class="p">,</span><span class="w"></span>
</span><span class="line"><span class="w">    </span><span class="n">last_name</span><span class="o">:</span><span class="w"> </span><span class="o">&amp;</span><span class="na">&#39;a</span><span class="w"> </span><span class="kt">str</span><span class="p">,</span><span class="w"></span>
</span><span class="line"><span class="w">    </span><span class="n">age</span><span class="o">:</span><span class="w"> </span><span class="kt">usize</span><span class="p">,</span><span class="w"></span>
</span><span class="line"><span class="p">}</span><span class="w"></span>
</span><span class="line">
</span><span class="line"><span class="kd">let</span><span class="w"> </span><span class="n">a_person</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">ApiPersion</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
</span><span class="line"><span class="w">                   </span><span class="n">first_name</span><span class="o">:</span><span class="w"> </span><span class="s">&quot;Joe&quot;</span><span class="p">,</span><span class="w"></span>
</span><span class="line"><span class="w">                   </span><span class="n">last_name</span><span class="o">:</span><span class="w"> </span><span class="s">&quot;Blow&quot;</span><span class="p">,</span><span class="w"></span>
</span><span class="line"><span class="w">                   </span><span class="n">age</span><span class="o">:</span><span class="w"> </span><span class="mi">30</span><span class="p">,</span><span class="w"></span>
</span><span class="line"><span class="p">};</span><span class="w"></span>
</span><span class="line"><span class="kd">let</span><span class="w"> </span><span class="n">d_person</span><span class="o">:</span><span class="w"> </span><span class="n">DomainPersion</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">convert_from</span><span class="p">(</span><span class="n">a_person</span><span class="p">);</span><span class="w"> </span><span class="c1">// done</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Another example of where this might be useful is if you want to use different types to represent the same data at different stages (see <a href="http://stackoverflow.com/questions/31949455/transform-one-case-class-into-another-when-the-argument-list-is-the-same">this post on StackOverflow</a>).</p>

<h2 id="how-it-works-what-is-going-on--is-it-safe-">How it works (what is going on ? is it safe ?)</h2>

<p>At a glance, <code>Generic</code> might look magical and dangerous, but really it is no more mysterious than the <code>From</code> trait in the standard lib; the only difference (for now) is that every <code>Generic</code> instance is bidirectional (can turn an <code>A</code> into a <code>Repr</code> and a <code>Repr</code> into an <code>A</code>). If you don’t believe me, just look at the type signatures.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
</pre></td><td class="code"><pre><code class="rust"><span class="line"><span></span><span class="k">pub</span><span class="w"> </span><span class="k">trait</span><span class="w"> </span><span class="n">Generic</span><span class="o">&lt;</span><span class="n">Repr</span><span class="o">&gt;</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
</span><span class="line">
</span><span class="line"><span class="w">    </span><span class="sd">/// Go from something to Repr</span>
</span><span class="line"><span class="w">    </span><span class="k">fn</span> <span class="nf">into</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span><span class="w"> </span><span class="o">-&gt;</span><span class="w"> </span><span class="n">Repr</span><span class="p">;</span><span class="w"></span>
</span><span class="line">
</span><span class="line"><span class="w">    </span><span class="sd">/// Go from Repr to something</span>
</span><span class="line"><span class="w">    </span><span class="k">fn</span> <span class="nf">from</span><span class="p">(</span><span class="n">r</span><span class="o">:</span><span class="w"> </span><span class="n">Repr</span><span class="p">)</span><span class="w"> </span><span class="o">-&gt;</span><span class="w"> </span><span class="n">Self</span><span class="p">;</span><span class="w"></span>
</span><span class="line"><span class="p">}</span><span class="w"></span>
</span><span class="line">
</span><span class="line"><span class="sd">/// Given a generic Representation of an A, returns A</span>
</span><span class="line"><span class="k">pub</span><span class="w"> </span><span class="k">fn</span> <span class="nf">from_generic</span><span class="o">&lt;</span><span class="n">A</span><span class="p">,</span><span class="w"> </span><span class="n">Repr</span><span class="o">&gt;</span><span class="p">(</span><span class="n">gen</span><span class="o">:</span><span class="w"> </span><span class="n">Repr</span><span class="p">)</span><span class="w"> </span><span class="o">-&gt;</span><span class="w"> </span><span class="n">A</span><span class="w"> </span><span class="k">where</span><span class="w"> </span><span class="n">A</span><span class="o">:</span><span class="w"> </span><span class="n">Generic</span><span class="o">&lt;</span><span class="n">Repr</span><span class="o">&gt;</span><span class="w"></span>
</span><span class="line">
</span><span class="line"><span class="sd">/// Given an A, returns its generic Representation</span>
</span><span class="line"><span class="k">pub</span><span class="w"> </span><span class="k">fn</span> <span class="nf">into_generic</span><span class="o">&lt;</span><span class="n">A</span><span class="p">,</span><span class="w"> </span><span class="n">Repr</span><span class="o">&gt;</span><span class="p">(</span><span class="n">a</span><span class="o">:</span><span class="w"> </span><span class="n">A</span><span class="p">)</span><span class="w"> </span><span class="o">-&gt;</span><span class="w"> </span><span class="n">Repr</span><span class="w"> </span><span class="k">where</span><span class="w"> </span><span class="n">A</span><span class="o">:</span><span class="w"> </span><span class="n">Generic</span><span class="o">&lt;</span><span class="n">Repr</span><span class="o">&gt;</span><span class="w"></span>
</span><span class="line">
</span><span class="line"><span class="sd">/// Converts one type into another assuming they have the same generic Representation</span>
</span><span class="line"><span class="k">pub</span><span class="w"> </span><span class="k">fn</span> <span class="nf">convert_from</span><span class="o">&lt;</span><span class="n">A</span><span class="p">,</span><span class="w"> </span><span class="n">B</span><span class="p">,</span><span class="w"> </span><span class="n">Repr</span><span class="o">&gt;</span><span class="p">(</span><span class="n">a</span><span class="o">:</span><span class="w"> </span><span class="n">A</span><span class="p">)</span><span class="w"> </span><span class="o">-&gt;</span><span class="w"> </span><span class="n">B</span><span class="w"></span>
</span><span class="line"><span class="w">  </span><span class="k">where</span><span class="w"></span>
</span><span class="line"><span class="w">    </span><span class="n">A</span><span class="o">:</span><span class="w"> </span><span class="n">Generic</span><span class="o">&lt;</span><span class="n">Repr</span><span class="o">&gt;</span><span class="p">,</span><span class="w"></span>
</span><span class="line"><span class="w">    </span><span class="n">B</span><span class="o">:</span><span class="w"> </span><span class="n">Generic</span><span class="o">&lt;</span><span class="n">Repr</span><span class="o">&gt;</span><span class="w"></span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Most of the magic resides in how the custom derive of Generic, made possible by the 1.15 release of Rust, is implemented. If you want to find out more, take a look at the <code>derives</code> directory of Frunk <a href="https://github.com/lloydmeta/frunk/tree/master/derives/src">on Github</a>. In regards to the end-result though, the following:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="rust"><span class="line"><span></span><span class="cp">#[derive(Generic)]</span><span class="w"></span>
</span><span class="line"><span class="k">struct</span> <span class="nc">Person</span><span class="o">&lt;</span><span class="na">&#39;a</span><span class="o">&gt;</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
</span><span class="line"><span class="w">    </span><span class="n">first_name</span><span class="o">:</span><span class="w"> </span><span class="o">&amp;</span><span class="na">&#39;a</span><span class="w"> </span><span class="kt">str</span><span class="p">,</span><span class="w"></span>
</span><span class="line"><span class="w">    </span><span class="n">last_name</span><span class="o">:</span><span class="w"> </span><span class="o">&amp;</span><span class="na">&#39;a</span><span class="w"> </span><span class="kt">str</span><span class="p">,</span><span class="w"></span>
</span><span class="line"><span class="w">    </span><span class="n">age</span><span class="o">:</span><span class="w"> </span><span class="kt">usize</span><span class="p">,</span><span class="w"></span>
</span><span class="line"><span class="p">}</span><span class="w"></span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Gets expanded at compile-time to something resembling:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="rust"><span class="line"><span></span><span class="k">impl</span><span class="o">&lt;</span><span class="na">&#39;a</span><span class="o">&gt;</span><span class="w"> </span><span class="n">Generic</span><span class="o">&lt;</span><span class="n">Hlist</span><span class="o">!</span><span class="p">(</span><span class="o">&amp;</span><span class="na">&#39;a</span><span class="w"> </span><span class="kt">str</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="na">&#39;a</span><span class="w"> </span><span class="kt">str</span><span class="p">,</span><span class="w"> </span><span class="kt">usize</span><span class="p">)</span><span class="o">&gt;</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="n">Person</span><span class="o">&lt;</span><span class="na">&#39;a</span><span class="o">&gt;</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
</span><span class="line">
</span><span class="line"><span class="w">    </span><span class="k">fn</span> <span class="nf">into</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span><span class="w"> </span><span class="o">-&gt;</span><span class="w"> </span><span class="n">Hlist</span><span class="o">!</span><span class="p">(</span><span class="o">&amp;</span><span class="na">&#39;a</span><span class="w"> </span><span class="kt">str</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="na">&#39;a</span><span class="w"> </span><span class="kt">str</span><span class="p">,</span><span class="w"> </span><span class="kt">usize</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
</span><span class="line"><span class="w">        </span><span class="kd">let</span><span class="w"> </span><span class="n">Person</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="n">first_name</span><span class="p">,</span><span class="w"> </span><span class="n">last_name</span><span class="p">,</span><span class="w"> </span><span class="n">age</span><span class="w"> </span><span class="p">}</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="bp">self</span><span class="p">;</span><span class="w"></span>
</span><span class="line"><span class="w">        </span><span class="n">hlist</span><span class="o">!</span><span class="w"> </span><span class="p">[</span><span class="w"> </span><span class="n">first_name</span><span class="p">,</span><span class="w"> </span><span class="n">last_name</span><span class="p">,</span><span class="w"> </span><span class="n">age</span><span class="w"> </span><span class="p">]</span><span class="w"></span>
</span><span class="line"><span class="w">    </span><span class="p">}</span><span class="w"></span>
</span><span class="line">
</span><span class="line"><span class="w">    </span><span class="k">fn</span> <span class="nf">from</span><span class="p">(</span><span class="n">r</span><span class="o">:</span><span class="w"> </span><span class="n">Hlist</span><span class="o">!</span><span class="p">(</span><span class="o">&amp;</span><span class="na">&#39;a</span><span class="w"> </span><span class="kt">str</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="na">&#39;a</span><span class="w"> </span><span class="kt">str</span><span class="p">,</span><span class="w"> </span><span class="kt">usize</span><span class="p">))</span><span class="w"> </span><span class="o">-&gt;</span><span class="w"> </span><span class="n">Self</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
</span><span class="line"><span class="w">        </span><span class="kd">let</span><span class="w"> </span><span class="n">hlist_pat</span><span class="o">!</span><span class="w"> </span><span class="p">[</span><span class="w"> </span><span class="n">first_name</span><span class="p">,</span><span class="w"> </span><span class="n">last_name</span><span class="p">,</span><span class="w"> </span><span class="n">age</span><span class="w"> </span><span class="p">]</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">r</span><span class="p">;</span><span class="w"></span>
</span><span class="line"><span class="w">        </span><span class="n">Person</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="n">first_name</span><span class="o">:</span><span class="w"> </span><span class="n">first_name</span><span class="p">,</span><span class="w"> </span><span class="n">last_name</span><span class="o">:</span><span class="w"> </span><span class="n">last_name</span><span class="p">,</span><span class="w"> </span><span class="n">age</span><span class="o">:</span><span class="w"> </span><span class="n">age</span><span class="w"> </span><span class="p">}</span><span class="w"></span>
</span><span class="line"><span class="w">    </span><span class="p">}</span><span class="w"></span>
</span><span class="line"><span class="p">}</span><span class="w"></span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>To be clear, the actual expanded coded is much gnarlier because we use fully qualified names for the sake of hygiene and I’ve sugared some things up with their macro-powered equivalents to cut down on noise (namely the HList type signature, pattern matching, and construction).</p>

<p>Someone on Twitter raised the point that if you had mixed up the ordering of the fields in your struct declaration (e.g. last name and first name are swapped between structs), then <code>Generic</code> would cause silent errors at runtime because the Structs’ shape would be the same, and that implementing <code>From</code> was more typesafe. With all due respect to that individual, the same could happen even if you hand-wrote your <code>From</code> implementation and got your field assignments crossed. In the worst case; you’ve now got fields that are not ordered correctly, your <code>From</code> is wrong, and you’ve got more boilerplate to maintain.</p>

<p>Really, the only way to truly prevent this kind of fat-fingering error is to have wrapper types (like <code>struct FirstName(String)</code>, etc) for all your fields, in which case <code>Generic</code> conversion would be foolproof (if you got your field declaration orders wrong, you’d get a compile-time error). Ultimately, how typesafe you want to be is a choice you will need to make while weighing the risk of fat-fingering against the burden of maintaining more code.</p>

<p>I hope you’re now convinced that there is no dirty casting / unsafe stuff going on, so you can rest easy knowing your code is still as type-safe as it would have been if you had gone with something like <code>From</code> instead.</p>

<h2 id="conclusion">Conclusion</h2>

<p>There are probably many other ways that <code>Generic</code> can be used to make code nicer (more reusable, DRYer, less noisy), so go ahead and see what you can cook up. As always, please don’t hesitate to get in touch via comments, on Github or on Gitter with suggestions, issues, questions, or PRs.</p>

<h2 id="links">Links</h2>

<ol>
  <li><a href="https://github.com/lloydmeta/frunk">Frunk on Github</a></li>
  <li><a href="https://crates.io/crates/frunk">Frunk on Crates.io</a></li>
</ol>

<h2 id="credit">Credit</h2>

<ol>
  <li><a href="https://github.com/milessabin/shapeless">Shapeless</a></li>
</ol>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rust Performance Testing on Travis CI]]></title>
    <link href="https://beachape.com/blog/2016/11/02/rust-performance-testing-on-travis-ci/"/>
    <updated>2016-11-02T15:39:00+09:00</updated>
    <id>https://beachape.com/blog/2016/11/02/rust-performance-testing-on-travis-ci</id>
    <content type="html"><![CDATA[<p><a href="https://www.rust-lang.org/en-US/">Rust</a>  describes itself as:</p>

<blockquote>
  <p><em>a systems programming language that runs blazingly fast, prevents segfaults, and guarantees thread safety.</em>
### Featuring
* zero-cost abstractions
* minimal runtime
*efficient C bindings</p>
</blockquote>

<p>So, it’s likely that developers who choose to program in Rust are focused on performance.  You can make sure your code is efficient by writing benchmarks, but in order to prevent performance regressions, you’ll need to run benchmarks on your Pull Requests or patches and somehow compare before and after. Doing this can be tedious, especially as the changeset evolves over the course of code review or miscellaneous refactoring.</p>

<p><img class="center" src="https://beachape.com/images/super-high-performance.jpg" width="450" title="'Super. High. Performance.'" /></p>

<p>Let’s see how we can get automated benchmark comparisons across commits on <a href="https://travis-ci.org">Travis CI</a>.</p>

<!-- more -->

<h3 id="putting-benchmarks-in-your-project">Putting benchmarks in your project</h3>

<p>First off, you’ll need to have benchmarks in your codebase. There are a few ways to do this:</p>

<ul>
  <li>The standard way <a href="https://doc.rust-lang.org/stable/book/benchmark-tests.html">documented in the Rust Book</a></li>
  <li>Making a <code>benches</code> directory in your project root, putting your benchmarks there, and running <code>cargo bench</code> (this is how I’ve done it in <a href="https://github.com/lloydmeta/frunk/tree/master/benches">Frunk</a>)</li>
</ul>

<h3 id="running-benchmarks-on-travis">Running benchmarks on Travis</h3>

<p>Next, in order to run benchmarks on Travis, we’ll need to make sure that your <code>.travis.yml</code> file has <code>nightly</code> listed as one of the Rust versions that your project is built with:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="yaml"><span class="line"><span></span><span class="l l-Scalar l-Scalar-Plain">rust</span><span class="p p-Indicator">:</span>
</span><span class="line">  <span class="p p-Indicator">-</span> <span class="l l-Scalar l-Scalar-Plain">stable</span>
</span><span class="line">  <span class="p p-Indicator">-</span> <span class="l l-Scalar l-Scalar-Plain">nightly</span> <span class="c1"># so we can run benchmarks (required as of writing)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Then, in <code>after_success</code>, we’ll want the following in order to have benchmarks run when we are on a build that uses Rust <code>nightly</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="yaml"><span class="line"><span></span><span class="l l-Scalar l-Scalar-Plain">after_success</span><span class="p p-Indicator">:</span>
</span><span class="line">  <span class="p p-Indicator">-</span> <span class="l l-Scalar l-Scalar-Plain">if [ &quot;$TRAVIS_RUST_VERSION&quot; == &quot;nightly&quot; ]; then</span>
</span><span class="line">        <span class="l l-Scalar l-Scalar-Plain">cargo bench;</span>
</span><span class="line">    <span class="l l-Scalar l-Scalar-Plain">fi</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Some readers might be wondering why I’m not using <a href="https://github.com/huonw/travis-cargo"><code>travis-cargo</code></a> here. The reason is because <code>travis-cargo</code> doesn’t support arbitrary cargo libraries/commands, which is needed in the next section ;)</p>

<h3 id="getting-benchmark-comparisons-in-pull-requests">Getting benchmark comparisons in Pull Requests</h3>

<p>So we have benchmarks running automatically on Travis, but what about the before-after comparisons that we talked about earlier? This is where the <a href="https://github.com/BurntSushi/cargo-benchcmp"><code>cargo-benchcmp</code></a> library comes into play. <code>benchcmp</code> is:</p>

<blockquote>
  <p>A small utility for comparing micro-benchmarks produced by cargo bench. The utility takes as input two sets of micro-benchmarks (one “old” and the other “new”) and shows as output a comparison between each benchmark.</p>
</blockquote>

<p>What we’ll want to do next is add a condition to only run these benchmarks when we’re building a Pull Request (henceforth PR), install the <code>benchcmp</code> tool, and use it:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Travis after_success bash script code (travis-after-success.sh)</span> <a href="https://beachape.com/downloads/code/bash/travis-after-success.sh">download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
</pre></td><td class="code"><pre><code class="sh"><span class="line"><span></span><span class="ch">#!/usr/bin/env bash</span>
</span><span class="line">
</span><span class="line"><span class="k">if</span> <span class="o">[</span> <span class="s2">&quot;</span><span class="si">${</span><span class="nv">TRAVIS_PULL_REQUEST_BRANCH</span><span class="k">:-</span><span class="nv">$TRAVIS_BRANCH</span><span class="si">}</span><span class="s2">&quot;</span> !<span class="o">=</span> <span class="s2">&quot;master&quot;</span> <span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="o">[</span> <span class="s2">&quot;</span><span class="nv">$TRAVIS_RUST_VERSION</span><span class="s2">&quot;</span> <span class="o">==</span> <span class="s2">&quot;nightly&quot;</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span><span class="line">    <span class="nv">REMOTE_URL</span><span class="o">=</span><span class="s2">&quot;</span><span class="k">$(</span>git config --get remote.origin.url<span class="k">)</span><span class="s2">&quot;</span><span class="p">;</span>
</span><span class="line">    <span class="c1"># Clone the repository fresh..for some reason checking out master fails</span>
</span><span class="line">    <span class="c1"># from a normal PR build&#39;s provided directory</span>
</span><span class="line">    <span class="nb">cd</span> <span class="si">${</span><span class="nv">TRAVIS_BUILD_DIR</span><span class="si">}</span>/.. <span class="o">&amp;&amp;</span> <span class="se">\</span>
</span><span class="line">    git clone <span class="si">${</span><span class="nv">REMOTE_URL</span><span class="si">}</span> <span class="s2">&quot;</span><span class="si">${</span><span class="nv">TRAVIS_REPO_SLUG</span><span class="si">}</span><span class="s2">-bench&quot;</span> <span class="o">&amp;&amp;</span> <span class="se">\</span>
</span><span class="line">    <span class="nb">cd</span>  <span class="s2">&quot;</span><span class="si">${</span><span class="nv">TRAVIS_REPO_SLUG</span><span class="si">}</span><span class="s2">-bench&quot;</span> <span class="o">&amp;&amp;</span> <span class="se">\</span>
</span><span class="line">    <span class="c1"># Bench master</span>
</span><span class="line">    git checkout master <span class="o">&amp;&amp;</span> <span class="se">\</span>
</span><span class="line">    cargo bench &gt; benches-control <span class="o">&amp;&amp;</span> <span class="se">\</span>
</span><span class="line">    <span class="c1"># Bench variable</span>
</span><span class="line">    git checkout <span class="si">${</span><span class="nv">TRAVIS_COMMIT</span><span class="si">}</span> <span class="o">&amp;&amp;</span> <span class="se">\</span>
</span><span class="line">    cargo bench &gt; benches-variable <span class="o">&amp;&amp;</span> <span class="se">\</span>
</span><span class="line">    cargo install cargo-benchcmp --force <span class="o">&amp;&amp;</span> <span class="se">\</span>
</span><span class="line">    cargo benchcmp benches-control benches-variable<span class="p">;</span>
</span><span class="line"><span class="k">fi</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The first conditional is simply to check that the current branch being built is not master. It’s a bit verbose because <code>$TRAVIS_BRANCH</code> <a href="https://graysonkoonce.com/getting-the-current-branch-name-during-a-pull-request-in-travis-ci/">does not always provide the current branch name</a>. So instead, we use <code>${TRAVIS_PULL_REQUEST_BRANCH:-$TRAVIS_BRANCH}</code>, which consists of <code>$TRAVIS_PULL_REQUEST_BRANCH</code> because it gives us the current branch if the build was triggered by a PR, and a default of <code>$TRAVIS_BRANCH</code>, which gives us the branch name of non-PR builds.</p>

<p>The second conditional checks that the current Travis build is using <code>nightly</code>, which is a requirement for running benchmarks (as of writing).</p>

<p>Inside the if statements body, we first <code>cd</code> out of our provided directory and clone our project anew. I’m not entirely sure why, but in my testing, I was unable to checkout another branch (e.g. master) otherwise.  Next, we run <code>cargo bench</code> on the master branch, sending the output to <code>benches-control</code>.  Afterwards, we checkout the commit for the current build by using <code>TRAVIS_COMMIT</code>, and run <code>cargo bench</code> again, sending the output to <code>benches-variable</code>.</p>

<p>Lastly, we install and run <code>cargo benchcmp</code>, passing the path of the control and variable benchmark result files as arguments, letting <a href="https://github.com/BurntSushi/cargo-benchcmp"><code>cargo-benchcmp</code></a> do its job.</p>

<p>Oh, we shouldn’t forget to add our script to the <code>after_success</code> block in our Travis file.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="yaml"><span class="line"><span></span><span class="l l-Scalar l-Scalar-Plain">after_success</span><span class="p p-Indicator">:</span>
</span><span class="line">  <span class="p p-Indicator">-</span> <span class="l l-Scalar l-Scalar-Plain">./travis-after-success.sh</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Here is some sample output from my Rust functional programming library, <a href="https://github.com/lloydmeta/frunk/">Frunk</a>.</p>

<p><img class="center" src="https://beachape.com/images/rust-travis-perf-testing.png" title="'PR benchmark comparisons on my project, Frunk.'" /></p>

<p>The benchmark comparisons show up in <a href="https://travis-ci.org/lloydmeta/frunk/jobs/172486500#L398">the build log</a>.</p>

<h3 id="conclusion">Conclusion</h3>

<p>That’s it. Now, you can go to the Travis build log of your PRs and see how performance has been affected. Please give it a try, and send any questions or feedback. Oh, if you’re interested in a library that does this for you or if you want to turn this into some kind of a service, do let me know ;-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Accumulating Results in Rust With Validated]]></title>
    <link href="https://beachape.com/blog/2016/10/24/accumulating-results-in-rust-with-validated/"/>
    <updated>2016-10-24T15:00:00+09:00</updated>
    <id>https://beachape.com/blog/2016/10/24/accumulating-results-in-rust-with-validated</id>
    <content type="html"><![CDATA[<p>Rust comes out of the box with a <code>Result&lt;T, E&gt;</code> type in its standard library. For those not familiar with it, it is a union-like enum type where <code>T</code> is a type parameter denoting the kind object held in a <code>Result</code> in the success case (<code>Result::Ok&lt;T&gt;</code>), and <code>E</code> is a type paramter denoting the kind of error object held in the failure case (<code>Result::Err&lt;E&gt;</code>).  In Scala, this is represented in the standard library as <code>Either[+A, +B]</code>, where the the success and error type params are swapped (traditionally, the one on the left stands for error and the one on the right is…well, right).</p>

<p>By default, <code>Result</code> comes with really good support for what I call “early return on error”. That is, you can use <code>map</code>, <code>and_then</code> (flatMap in some other languages) to transform them, and if there’s an error at an intermediate step, the chain returns early with a <code>Result::Err&lt;E&gt;</code> :</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="rust"><span class="line"><span></span><span class="k">fn</span> <span class="nf">double_arg</span><span class="p">(</span><span class="k">mut</span><span class="w"> </span><span class="n">argv</span><span class="o">:</span><span class="w"> </span><span class="n">env</span><span class="o">::</span><span class="n">Args</span><span class="p">)</span><span class="w"> </span><span class="o">-&gt;</span><span class="w"> </span><span class="nb">Result</span><span class="o">&lt;</span><span class="kt">i32</span><span class="p">,</span><span class="w"> </span><span class="nb">String</span><span class="o">&gt;</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
</span><span class="line"><span class="w">    </span><span class="n">argv</span><span class="p">.</span><span class="n">nth</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="w"></span>
</span><span class="line"><span class="w">        </span><span class="p">.</span><span class="n">ok_or</span><span class="p">(</span><span class="s">&quot;Please give at least one argument&quot;</span><span class="p">.</span><span class="n">to_owned</span><span class="p">())</span><span class="w"></span>
</span><span class="line"><span class="w">        </span><span class="p">.</span><span class="n">and_then</span><span class="p">(</span><span class="o">|</span><span class="n">arg</span><span class="o">|</span><span class="w"> </span><span class="n">arg</span><span class="p">.</span><span class="n">parse</span><span class="o">::&lt;</span><span class="kt">i32</span><span class="o">&gt;</span><span class="p">().</span><span class="n">map_err</span><span class="p">(</span><span class="o">|</span><span class="n">err</span><span class="o">|</span><span class="w"> </span><span class="n">err</span><span class="p">.</span><span class="n">to_string</span><span class="p">()))</span><span class="w"></span>
</span><span class="line"><span class="w">        </span><span class="p">.</span><span class="n">map</span><span class="p">(</span><span class="o">|</span><span class="n">n</span><span class="o">|</span><span class="w"> </span><span class="mi">2</span><span class="w"> </span><span class="o">*</span><span class="w"> </span><span class="n">n</span><span class="p">)</span><span class="w"></span>
</span><span class="line"><span class="p">}</span><span class="w"></span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>But .. what happens when you have multiple <code>Result</code>s that are independent of each other, and you want to accumulate not only their collective success case, but also <em>all</em> their collective errors in the failure case?</p>

<p><img class="center" src="https://beachape.com/images/oh-shit-cat.jpg" title="'wait, we have to accumulate errors? oh ... shiz'" /></p>

<p>Let’s have a look at <a href="https://beachape.com/frunk/frunk/validated">Validated</a> in <a href="https://crates.io/crates/frunk">Frunk</a> (which is itself inspired by <a href="http://typelevel.org/cats/datatypes/validated.html"><code>Validated</code> in Cats</a>)</p>

<!-- more -->

<p><a href="https://github.com/lloydmeta/frunk">Frunk</a> is published to <a href="https://beachape.com//crates.io/crates/frunk">Crates.io</a>, so to begin, add the crate to your list of dependencies:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="rust"><span class="line"><span></span><span class="p">[</span><span class="n">dependencies</span><span class="p">]</span><span class="w"></span>
</span><span class="line"><span class="n">frunk</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s">&quot;0.1.9&quot;</span><span class="w"></span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>By the way, to take a dive into the deep end, jump <a href="https://beachape.com/frunk/frunk/validated/index.html" target="_blank">straight to Validated’s Rustdocs</a>.</p>

<h3 id="imports">Imports</h3>

<p>Next, let’s add a few imports.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="rust"><span class="line"><span></span><span class="k">use</span><span class="w"> </span><span class="n">frunk</span><span class="o">::</span><span class="n">hlist</span><span class="o">::*</span><span class="p">;</span><span class="w"> </span><span class="c1">// brings the .to_tuple2() method in scope so we can destructure our HList easily</span>
</span><span class="line"><span class="k">use</span><span class="w"> </span><span class="n">frunk</span><span class="o">::</span><span class="n">validated</span><span class="o">::*</span><span class="p">;</span><span class="w"></span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="scenario">Scenario</h3>

<p>Suppose we have a <code>Person</code> struct defined as follows:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="rust"><span class="line"><span></span><span class="cp">#[derive(PartialEq, Eq, Debug)]</span><span class="w"></span>
</span><span class="line"><span class="k">struct</span> <span class="nc">Person</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
</span><span class="line"><span class="w">    </span><span class="n">age</span><span class="o">:</span><span class="w"> </span><span class="kt">i32</span><span class="p">,</span><span class="w"></span>
</span><span class="line"><span class="w">    </span><span class="n">name</span><span class="o">:</span><span class="w"> </span><span class="nb">String</span><span class="p">,</span><span class="w"></span>
</span><span class="line"><span class="w">    </span><span class="n">email</span><span class="o">:</span><span class="w"> </span><span class="nb">String</span><span class="p">,</span><span class="w"></span>
</span><span class="line"><span class="p">}</span><span class="w"></span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>And, we have 3 methods that produce age, name and email for us, but all could potentially fail with a <code>Nope</code> error.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
</pre></td><td class="code"><pre><code class="rust"><span class="line"><span></span><span class="sd">/// For demonstrations purposes only</span>
</span><span class="line"><span class="cp">#[derive(PartialEq, Eq, Debug)]</span><span class="w"></span>
</span><span class="line"><span class="k">pub</span><span class="w"> </span><span class="k">enum</span> <span class="nc">YahNah</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
</span><span class="line"><span class="w">    </span><span class="n">Yah</span><span class="p">,</span><span class="w"></span>
</span><span class="line"><span class="w">    </span><span class="n">Nah</span><span class="p">,</span><span class="w"></span>
</span><span class="line"><span class="p">}</span><span class="w"></span>
</span><span class="line">
</span><span class="line"><span class="sd">/// Our Errors</span>
</span><span class="line"><span class="cp">#[derive(PartialEq, Eq, Debug)]</span><span class="w"></span>
</span><span class="line"><span class="k">pub</span><span class="w"> </span><span class="k">enum</span> <span class="nc">Nope</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
</span><span class="line"><span class="w">    </span><span class="n">NameNope</span><span class="p">,</span><span class="w"></span>
</span><span class="line"><span class="w">    </span><span class="n">AgeNope</span><span class="p">,</span><span class="w"></span>
</span><span class="line"><span class="w">    </span><span class="n">EmailNope</span><span class="p">,</span><span class="w"></span>
</span><span class="line"><span class="p">}</span><span class="w"></span>
</span><span class="line">
</span><span class="line"><span class="k">fn</span> <span class="nf">get_name</span><span class="p">(</span><span class="n">yah_nah</span><span class="o">:</span><span class="w"> </span><span class="n">YahNah</span><span class="p">)</span><span class="w"> </span><span class="o">-&gt;</span><span class="w"> </span><span class="nb">Result</span><span class="o">&lt;</span><span class="nb">String</span><span class="p">,</span><span class="w"> </span><span class="n">Nope</span><span class="o">&gt;</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
</span><span class="line"><span class="w">    </span><span class="k">match</span><span class="w"> </span><span class="n">yah_nah</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
</span><span class="line"><span class="w">        </span><span class="n">YahNah</span><span class="o">::</span><span class="n">Yah</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="nb">Result</span><span class="o">::</span><span class="nb">Ok</span><span class="p">(</span><span class="s">&quot;James&quot;</span><span class="p">.</span><span class="n">to_owned</span><span class="p">()),</span><span class="w"></span>
</span><span class="line"><span class="w">        </span><span class="n">_</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="nb">Result</span><span class="o">::</span><span class="nb">Err</span><span class="p">(</span><span class="n">Nope</span><span class="o">::</span><span class="n">NameNope</span><span class="p">),</span><span class="w"></span>
</span><span class="line"><span class="w">    </span><span class="p">}</span><span class="w"></span>
</span><span class="line"><span class="p">}</span><span class="w"></span>
</span><span class="line">
</span><span class="line"><span class="k">fn</span> <span class="nf">get_age</span><span class="p">(</span><span class="n">yah_nah</span><span class="o">:</span><span class="w"> </span><span class="n">YahNah</span><span class="p">)</span><span class="w"> </span><span class="o">-&gt;</span><span class="w"> </span><span class="nb">Result</span><span class="o">&lt;</span><span class="kt">i32</span><span class="p">,</span><span class="w"> </span><span class="n">Nope</span><span class="o">&gt;</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
</span><span class="line"><span class="w">    </span><span class="k">match</span><span class="w"> </span><span class="n">yah_nah</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
</span><span class="line"><span class="w">        </span><span class="n">YahNah</span><span class="o">::</span><span class="n">Yah</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="nb">Result</span><span class="o">::</span><span class="nb">Ok</span><span class="p">(</span><span class="mi">32</span><span class="p">),</span><span class="w"></span>
</span><span class="line"><span class="w">        </span><span class="n">_</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="nb">Result</span><span class="o">::</span><span class="nb">Err</span><span class="p">(</span><span class="n">Nope</span><span class="o">::</span><span class="n">AgeNope</span><span class="p">),</span><span class="w"></span>
</span><span class="line"><span class="w">    </span><span class="p">}</span><span class="w"></span>
</span><span class="line"><span class="p">}</span><span class="w"></span>
</span><span class="line">
</span><span class="line"><span class="k">fn</span> <span class="nf">get_email</span><span class="p">(</span><span class="n">yah_nah</span><span class="o">:</span><span class="w"> </span><span class="n">YahNah</span><span class="p">)</span><span class="w"> </span><span class="o">-&gt;</span><span class="w"> </span><span class="nb">Result</span><span class="o">&lt;</span><span class="nb">String</span><span class="p">,</span><span class="w"> </span><span class="n">Nope</span><span class="o">&gt;</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
</span><span class="line"><span class="w">    </span><span class="k">match</span><span class="w"> </span><span class="n">yah_nah</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
</span><span class="line"><span class="w">        </span><span class="n">YahNah</span><span class="o">::</span><span class="n">Yah</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="nb">Result</span><span class="o">::</span><span class="nb">Ok</span><span class="p">(</span><span class="s">&quot;hello@world.com&quot;</span><span class="p">.</span><span class="n">to_owned</span><span class="p">()),</span><span class="w"></span>
</span><span class="line"><span class="w">        </span><span class="n">_</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="nb">Result</span><span class="o">::</span><span class="nb">Err</span><span class="p">(</span><span class="n">Nope</span><span class="o">::</span><span class="n">EmailNope</span><span class="p">),</span><span class="w"></span>
</span><span class="line"><span class="w">    </span><span class="p">}</span><span class="w"></span>
</span><span class="line"><span class="p">}</span><span class="w"></span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>In real life, these methods would probably be taking an HTML form as an argument and doing some kind of parsing/validation or making calls to a service somewhere, but for simplicity, in our example, each of them takes a single argument that will let us toggle between the success and error cases.</p>

<h3 id="using-validated">Using Validated</h3>

<p>Having set all that up, actually using <code>Validated</code> to accumulate our <code>Results</code> is actually very simple:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
</pre></td><td class="code"><pre><code class="rust"><span class="line"><span></span><span class="kd">let</span><span class="w"> </span><span class="n">v</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">get_name</span><span class="p">(</span><span class="n">YahNah</span><span class="o">::</span><span class="n">Yah</span><span class="p">).</span><span class="n">into_validated</span><span class="p">()</span><span class="w"> </span><span class="o">+</span><span class="w"></span>
</span><span class="line"><span class="w">           </span><span class="n">get_age</span><span class="p">(</span><span class="n">YahNah</span><span class="o">::</span><span class="n">Yah</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w"></span>
</span><span class="line"><span class="w">           </span><span class="n">get_email</span><span class="p">(</span><span class="n">YahNah</span><span class="o">::</span><span class="n">Yah</span><span class="p">);</span><span class="w"></span>
</span><span class="line">
</span><span class="line"><span class="c1">// Turn it into a result and then map, passing a lambda that takes the HList contained inside</span>
</span><span class="line"><span class="kd">let</span><span class="w"> </span><span class="n">person</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">v</span><span class="p">.</span><span class="n">into_result</span><span class="p">()</span><span class="w"></span>
</span><span class="line"><span class="w">              </span><span class="p">.</span><span class="n">map</span><span class="p">(</span><span class="o">|</span><span class="n">hlist</span><span class="o">|</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
</span><span class="line"><span class="w">                  </span><span class="kd">let</span><span class="w"> </span><span class="n">hlist_pat</span><span class="o">!</span><span class="p">(</span><span class="n">name</span><span class="p">,</span><span class="w"> </span><span class="n">age</span><span class="p">,</span><span class="w"> </span><span class="n">email</span><span class="p">)</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">hlist</span><span class="p">;</span><span class="w"></span>
</span><span class="line"><span class="w">                  </span><span class="n">Person</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
</span><span class="line"><span class="w">                      </span><span class="n">name</span><span class="o">:</span><span class="w"> </span><span class="n">name</span><span class="p">,</span><span class="w"></span>
</span><span class="line"><span class="w">                      </span><span class="n">age</span><span class="o">:</span><span class="w"> </span><span class="n">age</span><span class="p">,</span><span class="w"></span>
</span><span class="line"><span class="w">                      </span><span class="n">email</span><span class="o">:</span><span class="w"> </span><span class="n">email</span><span class="p">,</span><span class="w"></span>
</span><span class="line"><span class="w">                  </span><span class="p">}</span><span class="w"></span>
</span><span class="line"><span class="w">              </span><span class="p">});</span><span class="w"></span>
</span><span class="line">
</span><span class="line"><span class="n">assert_eq</span><span class="o">!</span><span class="p">(</span><span class="n">person</span><span class="p">.</span><span class="n">unwrap</span><span class="p">(),</span><span class="w"></span>
</span><span class="line"><span class="w">                   </span><span class="n">Person</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
</span><span class="line"><span class="w">                       </span><span class="n">name</span><span class="o">:</span><span class="w"> </span><span class="s">&quot;James&quot;</span><span class="p">.</span><span class="n">to_owned</span><span class="p">(),</span><span class="w"></span>
</span><span class="line"><span class="w">                       </span><span class="n">age</span><span class="o">:</span><span class="w"> </span><span class="mi">32</span><span class="p">,</span><span class="w"></span>
</span><span class="line"><span class="w">                       </span><span class="n">email</span><span class="o">:</span><span class="w"> </span><span class="s">&quot;hello@world.com&quot;</span><span class="p">.</span><span class="n">to_owned</span><span class="p">(),</span><span class="w"></span>
</span><span class="line"><span class="w">                   </span><span class="p">});</span><span class="w"></span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>As you can see, all we need to do is call <code>into_validated()</code> on a given <code>Result</code> to kick off the validation context, and use <code>+</code> to add subsequent <code>Result</code>s into it. At the end, you call <code>into_result()</code> on the <code>Validated</code> to turn it back into a <code>Result</code> and map on the <code>HList</code> that is contained inside.  Inside the lambda, we destructure the <code>HList</code> using the <code>hlist_pat!</code> macro, and then instantiate our <code>Person</code>.</p>

<p>Oh, in case it isn’t obvious, the <code>hlist</code> passed to the lambda when we map is <strong>statically typed</strong> in the order that your <code>Result</code>s were added into the <code>Validated</code> context, so your code is completely type safe. If you want to learn more about HLists in Frunk, check out <a href="https://beachape.com/blog/2016/10/23/rust-hlists-heterogenously-typed-list/">this blog post</a>.</p>

<p>Having said that, perhaps in the success case, not much has really changed in comparison to using naked <code>Result</code>s. That is, you could have gotten here simply by chaining with <code>map</code> and/or <code>and_then</code>. But take a look at what happens when one or more of these fail:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="rust"><span class="line"><span></span><span class="kd">let</span><span class="w"> </span><span class="n">v</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">get_name</span><span class="p">(</span><span class="n">YahNah</span><span class="o">::</span><span class="n">Nah</span><span class="p">).</span><span class="n">into_validated</span><span class="p">()</span><span class="w"> </span><span class="o">+</span><span class="w">  </span><span class="c1">// get_name will fail</span>
</span><span class="line"><span class="w">           </span><span class="n">get_age</span><span class="p">(</span><span class="n">YahNah</span><span class="o">::</span><span class="n">Yah</span><span class="p">)</span><span class="w"> </span><span class="o">+</span><span class="w">  </span><span class="c1">// get_age will succeed</span>
</span><span class="line"><span class="w">           </span><span class="n">get_email</span><span class="p">(</span><span class="n">YahNah</span><span class="o">::</span><span class="n">Nah</span><span class="p">);</span><span class="w"> </span><span class="c1">// get_email will fail</span>
</span><span class="line">
</span><span class="line"><span class="kd">let</span><span class="w"> </span><span class="n">person</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">v</span><span class="p">.</span><span class="n">into_result</span><span class="p">()</span><span class="w"></span>
</span><span class="line"><span class="w">              </span><span class="p">.</span><span class="n">map</span><span class="p">(</span><span class="o">|</span><span class="n">_</span><span class="o">|</span><span class="w"> </span><span class="n">unimplemented</span><span class="o">!</span><span class="p">());</span><span class="w"> </span><span class="c1">// won&#39;t get here anyways</span>
</span><span class="line">
</span><span class="line"><span class="n">assert_eq</span><span class="o">!</span><span class="p">(</span><span class="n">person</span><span class="p">.</span><span class="n">unwrap_err</span><span class="p">(),</span><span class="w"></span>
</span><span class="line"><span class="w">           </span><span class="n">vec</span><span class="o">!</span><span class="p">[</span><span class="n">Nope</span><span class="o">::</span><span class="n">NameNope</span><span class="p">,</span><span class="w"> </span><span class="n">Nope</span><span class="o">::</span><span class="n">EmailNope</span><span class="p">]);</span><span class="w"></span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>As you can see, the failure case is more interesting because <code>Validated</code> gives us the ability to accumulate <em>all</em> errors cleanly. For operations like parsing user input or checking parameters passed into our API, this non-early-abort behaviour is highly desirable compared with telling the user what went wrong One. Thing. At. At. Time.</p>

<p>Oh, <code>Validated</code>s can also be appended to each other:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="rust"><span class="line"><span></span><span class="kd">let</span><span class="w"> </span><span class="n">r1</span><span class="o">:</span><span class="w"> </span><span class="nb">Result</span><span class="o">&lt;</span><span class="nb">String</span><span class="p">,</span><span class="w"> </span><span class="nb">String</span><span class="o">&gt;</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nb">Result</span><span class="o">::</span><span class="nb">Ok</span><span class="p">(</span><span class="nb">String</span><span class="o">::</span><span class="n">from</span><span class="p">(</span><span class="s">&quot;hello&quot;</span><span class="p">));</span><span class="w"></span>
</span><span class="line"><span class="kd">let</span><span class="w"> </span><span class="n">r2</span><span class="o">:</span><span class="w"> </span><span class="nb">Result</span><span class="o">&lt;</span><span class="kt">i32</span><span class="p">,</span><span class="w"> </span><span class="nb">String</span><span class="o">&gt;</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nb">Result</span><span class="o">::</span><span class="nb">Ok</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span><span class="w"></span>
</span><span class="line"><span class="kd">let</span><span class="w"> </span><span class="n">r3</span><span class="o">:</span><span class="w"> </span><span class="nb">Result</span><span class="o">&lt;</span><span class="kt">i32</span><span class="p">,</span><span class="w"> </span><span class="nb">String</span><span class="o">&gt;</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nb">Result</span><span class="o">::</span><span class="nb">Ok</span><span class="p">(</span><span class="mi">3</span><span class="p">);</span><span class="w"></span>
</span><span class="line"><span class="kd">let</span><span class="w"> </span><span class="n">v1</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">r1</span><span class="p">.</span><span class="n">into_validated</span><span class="p">();</span><span class="w"></span>
</span><span class="line"><span class="kd">let</span><span class="w"> </span><span class="n">v2</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">r2</span><span class="p">.</span><span class="n">into_validated</span><span class="p">();</span><span class="w"></span>
</span><span class="line"><span class="kd">let</span><span class="w"> </span><span class="n">v3</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">r3</span><span class="p">.</span><span class="n">into_validated</span><span class="p">();</span><span class="w"></span>
</span><span class="line"><span class="kd">let</span><span class="w"> </span><span class="n">comb</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">v1</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">v2</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">v3</span><span class="p">;</span><span class="w"></span>
</span><span class="line"><span class="n">assert_eq</span><span class="o">!</span><span class="p">(</span><span class="n">comb</span><span class="p">,</span><span class="w"> </span><span class="n">Validated</span><span class="o">::</span><span class="nb">Ok</span><span class="p">(</span><span class="n">hlist</span><span class="o">!</span><span class="p">(</span><span class="nb">String</span><span class="o">::</span><span class="n">from</span><span class="p">(</span><span class="s">&quot;hello&quot;</span><span class="p">),</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="mi">3</span><span class="p">)))</span><span class="w"></span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="conclusion">Conclusion</h2>

<p>Please take <code>Validated</code> out for a spin and send suggestions, comments, PRs !  I’ve found this abstraction to be helpful in the Scala world so I’m eager to hear impressions from Rustaceans.</p>

<h2 id="links">Links</h2>

<ol>
  <li><a href="https://github.com/lloydmeta/frunk">Frunk on Github</a></li>
  <li><a href="https://crates.io/crates/frunk">Frunk on Crates.io</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rust HLists (Heterogenous List)]]></title>
    <link href="https://beachape.com/blog/2016/10/23/rust-hlists-heterogenously-typed-list/"/>
    <updated>2016-10-23T13:05:00+09:00</updated>
    <id>https://beachape.com/blog/2016/10/23/rust-hlists-heterogenously-typed-list</id>
    <content type="html"><![CDATA[<p>A heterogeneous list (henceforth “HList”) is a useful abstraction that is implemented in many statically-typed functional programming languages. Unlike normal list-like structures (e.g. <code>Vec</code>, <code>Slice</code>, <code>Array</code>), a heterogenous list is able to hold elements of different types (hence heterogenous) and expose those types in its own type signature.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="rust"><span class="line"><span></span><span class="kd">let</span><span class="w"> </span><span class="n">h</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">hlist</span><span class="o">!</span><span class="p">[</span><span class="s">&quot;Joe&quot;</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;Blow&quot;</span><span class="p">,</span><span class="w"> </span><span class="mi">30</span><span class="p">,</span><span class="w"> </span><span class="kc">true</span><span class="p">];</span><span class="w"></span>
</span><span class="line"><span class="c1">// h has a static type of: HCons&lt;&amp;str, HCons&lt;&amp;str, HCons&lt;{integer}, HCons&lt;bool, HNil&gt;&gt;&gt;&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Now, you might be thinking “Isn’t that just a tuple?”. The answer is: in a way. Indeed, in terms of data structure, a given implementation of HList is usually really nothing more than deeply nested pairs (tuple of 2 elements) that each hold an element of arbitrary type in its 1st element and knows that its 2nd element is itself an HList-like thing. While it may seem convoluted, HList buys us the ability to abstract over arity, which turns out to be extremely useful, as you can see from <a href="http://stackoverflow.com/questions/11825129/are-hlists-nothing-more-than-a-convoluted-way-of-writing-tuples">this Stackoverflow answer</a> by Miles Sabin, the creater of the <a href="https://github.com/milessabin/shapeless">Shapeless</a> library, which provides an HList implementation in Scala.</p>

<p>Given that description and justification for the existence of HLists, let’s take a look at how to use <a href="https://github.com/lloydmeta/frunk">Frunk</a>’s implementation of HList in Rust.</p>

<!-- more -->

<p><a href="https://github.com/lloydmeta/frunk">Frunk</a> is published to <a href="https://beachape.com//crates.io/crates/frunk">Crates.io</a>, so to begin, add the crate to your list of dependencies:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="rust"><span class="line"><span></span><span class="p">[</span><span class="n">dependencies</span><span class="p">]</span><span class="w"></span>
</span><span class="line"><span class="n">frunk</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s">&quot;0.1.9&quot;</span><span class="w"></span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>By the way, to take a dive into the deep end, jump <a href="https://beachape.com/frunk/frunk/hlist/index.html" target="_blank">straight to HList’s Rustdocs</a>.</p>

<h3 id="imports">Imports</h3>

<p>Next, let’s add a few imports. In particular, note that we have a <code>#[macro_use]</code> directive in order to enable the <code>hlist!</code> macro, which makes declaring <code>HList</code>s nicer by saving you the trouble of writing deeply nested <code>HCon</code>s.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="rust"><span class="line"><span></span><span class="cp">#[macro_use]</span><span class="w"> </span><span class="k">extern</span><span class="w"> </span><span class="k">crate</span><span class="w"> </span><span class="n">frunk</span><span class="p">;</span><span class="w"></span>
</span><span class="line"><span class="k">use</span><span class="w"> </span><span class="n">frunk</span><span class="o">::</span><span class="n">hlist</span><span class="o">::*</span><span class="p">;</span><span class="w"></span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="creating-an-hlist">Creating an HList</h3>

<p>Making an HList is easy if you use the <code>hlist!</code> macro:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="rust"><span class="line"><span></span><span class="kd">let</span><span class="w"> </span><span class="n">h</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">hlist</span><span class="o">!</span><span class="p">[</span><span class="s">&quot;Joe&quot;</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;Blow&quot;</span><span class="p">,</span><span class="w"> </span><span class="mi">30</span><span class="p">,</span><span class="w"> </span><span class="kc">true</span><span class="p">];</span><span class="w"></span>
</span><span class="line">
</span><span class="line"><span class="c1">// You can choose to explicitly annotate the type of HList</span>
</span><span class="line"><span class="kd">let</span><span class="w"> </span><span class="n">h2</span><span class="o">:</span><span class="w"> </span><span class="n">HCons</span><span class="o">&lt;&amp;</span><span class="kt">str</span><span class="p">,</span><span class="w"> </span><span class="n">HCons</span><span class="o">&lt;&amp;</span><span class="kt">str</span><span class="p">,</span><span class="w"> </span><span class="n">HCons</span><span class="o">&lt;</span><span class="p">{</span><span class="n">integer</span><span class="p">},</span><span class="w"> </span><span class="n">HCons</span><span class="o">&lt;</span><span class="kt">bool</span><span class="p">,</span><span class="w"> </span><span class="n">HNil</span><span class="o">&gt;&gt;&gt;&gt;</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">hlist</span><span class="o">!</span><span class="p">[</span><span class="s">&quot;Joe&quot;</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;Blow&quot;</span><span class="p">,</span><span class="w"> </span><span class="mi">30</span><span class="p">,</span><span class="w"> </span><span class="kc">true</span><span class="p">];</span><span class="w"></span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="writing-the-type-of-an-hlist">Writing the type of an HList</h3>

<p>Since HLists are a bunch of nested <code>HCons</code>s, you may think that writing the type annotation for one would be a PITA. Well, it might have been if not for the type-level macros introduced in Rust 1.13.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="rust"><span class="line"><span></span><span class="kd">let</span><span class="w"> </span><span class="n">h</span><span class="o">:</span><span class="w"> </span><span class="n">Hlist</span><span class="o">!</span><span class="p">(</span><span class="o">&amp;</span><span class="kt">str</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="kt">str</span><span class="p">,</span><span class="w"> </span><span class="kt">i32</span><span class="p">,</span><span class="w"> </span><span class="kt">bool</span><span class="p">)</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">hlist</span><span class="o">!</span><span class="p">[</span><span class="s">&quot;Joe&quot;</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;Blow&quot;</span><span class="p">,</span><span class="w"> </span><span class="mi">30</span><span class="p">,</span><span class="w"> </span><span class="kc">true</span><span class="p">];</span><span class="w"></span>
</span><span class="line"><span class="c1">// We use the Hlist! type macro to make it easier to write</span>
</span><span class="line"><span class="c1">// a type signature for HLists, which is a series of nested HCons</span>
</span><span class="line"><span class="c1">// h has an expanded static type of: HCons&lt;&amp;str, HCons&lt;&amp;str, HCons&lt;i32, HCons&lt;bool, HNil&gt;&gt;&gt;&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="getting-the-head-of-an-hlist">Getting the head of an HList</h3>

<p>To retrieve the head element of an HList, use the <code>.head</code> accessor</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="rust"><span class="line"><span></span><span class="kd">let</span><span class="w"> </span><span class="n">h</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">hList</span><span class="o">!</span><span class="p">[</span><span class="w"> </span><span class="s">&quot;Joe&quot;</span><span class="w"> </span><span class="p">];</span><span class="w"></span>
</span><span class="line"><span class="kd">let</span><span class="w"> </span><span class="n">joe</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">h</span><span class="p">.</span><span class="n">head</span><span class="p">;</span><span class="w"></span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="getting-multiple-elements-from-an-hlist">Getting multiple elements from an HList</h3>

<p>To retrieve multiple elements, it’s highly recommended to use the <code>hlist_pat!</code> macro to deconstruct your <code>HList</code>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="rust"><span class="line"><span></span><span class="kd">let</span><span class="w"> </span><span class="n">h</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">hlist</span><span class="o">!</span><span class="p">[</span><span class="s">&quot;Joe&quot;</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;Blow&quot;</span><span class="p">,</span><span class="w"> </span><span class="mi">30</span><span class="p">,</span><span class="w"> </span><span class="kc">true</span><span class="p">];</span><span class="w"></span>
</span><span class="line"><span class="c1">// h has a static type of: HCons&lt;&amp;str, HCons&lt;&amp;str, HCons&lt;{integer}, HCons&lt;bool, HNil&gt;&gt;&gt;&gt;</span>
</span><span class="line">
</span><span class="line"><span class="kd">let</span><span class="w"> </span><span class="n">hlist_pat</span><span class="o">!</span><span class="p">(</span><span class="n">f_name</span><span class="p">,</span><span class="w"> </span><span class="n">l_name</span><span class="p">,</span><span class="w"> </span><span class="n">age</span><span class="p">,</span><span class="w"> </span><span class="n">is_admin</span><span class="p">)</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">h</span><span class="p">;</span><span class="w"></span>
</span><span class="line"><span class="n">assert_eq</span><span class="o">!</span><span class="p">(</span><span class="n">f_name</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;Joe&quot;</span><span class="p">);</span><span class="w"></span>
</span><span class="line"><span class="n">assert_eq</span><span class="o">!</span><span class="p">(</span><span class="n">l_name</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;Blow&quot;</span><span class="p">);</span><span class="w"></span>
</span><span class="line"><span class="n">assert_eq</span><span class="o">!</span><span class="p">(</span><span class="n">age</span><span class="p">,</span><span class="w"> </span><span class="mi">30</span><span class="p">);</span><span class="w"></span>
</span><span class="line"><span class="n">assert_eq</span><span class="o">!</span><span class="p">(</span><span class="n">is_admin</span><span class="p">,</span><span class="w"> </span><span class="kc">true</span><span class="p">);</span><span class="w"></span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="appending-hlists">Appending HLists</h3>

<p>The <code>Add&lt;RHS&gt;</code> trait is implemented for <code>HList</code> so that you can simply call <code>+</code> to append to an existing HList</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="rust"><span class="line"><span></span><span class="kd">let</span><span class="w"> </span><span class="n">joe</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">hlist</span><span class="o">!</span><span class="p">[</span><span class="s">&quot;Joe&quot;</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;Blow&quot;</span><span class="p">,</span><span class="w"> </span><span class="mi">30</span><span class="p">];</span><span class="w"></span>
</span><span class="line"><span class="kd">let</span><span class="w"> </span><span class="n">is_admin</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">hlist</span><span class="o">!</span><span class="p">[</span><span class="kc">true</span><span class="p">];</span><span class="w"></span>
</span><span class="line">
</span><span class="line"><span class="kd">let</span><span class="w"> </span><span class="n">joe_is_admin</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">joe</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">is_admin</span><span class="p">;</span><span class="w"></span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="length">Length</h3>

<p>To get the length of an HList, simply call its <code>length()</code> method</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="rust"><span class="line"><span></span><span class="kd">let</span><span class="w"> </span><span class="n">joe</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">hlist</span><span class="o">!</span><span class="p">[</span><span class="s">&quot;Joe&quot;</span><span class="p">,</span><span class="w"> </span><span class="s">&quot;Blow&quot;</span><span class="p">,</span><span class="w"> </span><span class="mi">30</span><span class="p">];</span><span class="w"></span>
</span><span class="line"><span class="n">assert_eq</span><span class="o">!</span><span class="p">(</span><span class="n">joe</span><span class="p">.</span><span class="n">length</span><span class="p">(),</span><span class="w"> </span><span class="mi">3</span><span class="p">);</span><span class="w"></span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="have-fun-">Have fun !</h2>

<p>It will be interesting to see what you can cook up with HList. As mentioned before, abstracting over arity allows you to do some really cool stuff, for example <a href="https://crates.io/crates/frunk">Frunk</a> already uses HList to define a <a href="https://beachape.com/frunk/frunk/validated/"><code>Validated</code> abstraction</a> to help accumulate errors over many different <code>Result&lt;T, E&gt;</code> (we’ll go through this in <a href="https://beachape.com/blog/2016/10/24/accumulating-results-in-rust-with-validated/">another post</a>):</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="rust"><span class="line"><span></span><span class="k">pub</span><span class="w"> </span><span class="k">enum</span> <span class="nc">Validated</span><span class="o">&lt;</span><span class="n">T</span><span class="p">,</span><span class="w"> </span><span class="n">E</span><span class="o">&gt;</span><span class="w"></span>
</span><span class="line"><span class="w">    </span><span class="k">where</span><span class="w"> </span><span class="n">T</span><span class="o">:</span><span class="w"> </span><span class="n">HList</span><span class="w"></span>
</span><span class="line"><span class="p">{</span><span class="w"></span>
</span><span class="line"><span class="w">    </span><span class="nb">Ok</span><span class="p">(</span><span class="n">T</span><span class="p">),</span><span class="w"></span>
</span><span class="line"><span class="w">    </span><span class="nb">Err</span><span class="p">(</span><span class="nb">Vec</span><span class="o">&lt;</span><span class="n">E</span><span class="o">&gt;</span><span class="p">),</span><span class="w"></span>
</span><span class="line"><span class="p">}</span><span class="w"></span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>So please check it out, take it for a spin, and come back with any ideas, criticisms, and PRs!</p>

<h2 id="links">Links</h2>

<ol>
  <li><a href="https://github.com/lloydmeta/frunk">Frunk on Github</a></li>
  <li><a href="https://crates.io/crates/frunk">Frunk on Crates.io</a></li>
</ol>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Enumeratum 1.4: ValueEnums + Circe]]></title>
    <link href="https://beachape.com/blog/2016/04/16/enumeratum-1-dot-4-valueenums-plus-circe/"/>
    <updated>2016-04-16T16:25:00+09:00</updated>
    <id>https://beachape.com/blog/2016/04/16/enumeratum-1-dot-4-valueenums-plus-circe</id>
    <content type="html"><![CDATA[<p>It’s been a while since the last major release of <a href="https://github.com/lloydmeta/enumeratum">Enumeratum</a>, and in 1.4.0, minor changes include Play 2.5 support, integration library version bumps, and small internal refactorings. More excitingly though, the latest version adds support for a new kind of enumeration, <code>ValueEnum</code>, as well as an integration with the <a href="https://github.com/travisbrown/circe">Circe JSON library</a>.</p>

<p>Points of interest:</p>

<ul>
  <li>Unlike other value enum implementations, Enumeration’s value enums perform uniqueness checks at compile time to make sure you have unique values across your enum members.</li>
  <li>Circe integration allows you to send and receive JSON data between your front end and your server using the same code</li>
</ul>

<p><img class="center" src="https://beachape.com/images/abc-123.gif" width="400" height="400" title="'Enumeratum: Enums as easy as ABC *and* 123'" /></p>

<!-- more -->

<p>The <a href="https://github.com/lloydmeta/enumeratum/releases/tag/v1.4.0">1.4.0 release page</a> on Github has a more detailed list of changes, but we’ll specifically go through:</p>

<ol>
  <li><a href="#valueenums">ValueEnums</a></li>
  <li><a href="#circe-integration">Circe Integration</a></li>
</ol>

<h2 id="valueenums">ValueEnums</h2>

<p>What is a <code>ValueEnum</code>? It’s an enum that represents a primitive value  (e.g. <code>Int</code>, <code>Long</code>, <code>Short</code>) instead of a <code>String</code>. I may have just made up the term, but it doesn’t matter as long as you know what I mean.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span></span><span class="c1">// Have something like</span>
</span><span class="line"><span class="k">object</span> <span class="nc">ContentType</span> <span class="o">{</span>
</span><span class="line">  <span class="k">case</span> <span class="k">object</span> <span class="nc">Text</span><span class="o">(</span><span class="mi">1</span><span class="o">)</span>
</span><span class="line">  <span class="k">case</span> <span class="k">object</span> <span class="nc">Image</span><span class="o">(</span><span class="mi">3</span><span class="o">)</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line">
</span><span class="line"><span class="c1">// Want to do</span>
</span><span class="line"><span class="n">assert</span><span class="o">(</span><span class="nc">ContentType</span><span class="o">.</span><span class="n">withValue</span><span class="o">(</span><span class="mi">3</span><span class="o">)</span> <span class="o">==</span> <span class="nc">ContentType</span><span class="o">.</span><span class="nc">Image</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>This may sound mundane, since you can already build something like this yourself with the standard library’s <code>Enumeration</code> (or  previous versions of Enumeratum ), but sometimes the most straightforward solutions are suboptimal.</p>

<h3 id="the-trouble-with-enumeration">The trouble with <code>Enumeration</code></h3>

<p>The standard lib’s <code>Enumeration</code> comes with the notion of a customisable <code>id: Int</code> on each member, which is a great starting point for implementing numbers-based enumerations.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span></span><span class="cm">/**</span>
</span><span class="line"><span class="cm">  * This is an anti-example to show what can go wrong.</span>
</span><span class="line"><span class="cm">  *</span>
</span><span class="line"><span class="cm">  * Do not use this</span>
</span><span class="line"><span class="cm">  */</span>
</span><span class="line"><span class="k">object</span> <span class="nc">Things</span> <span class="k">extends</span> <span class="nc">Enumeration</span> <span class="o">{</span>
</span><span class="line">  <span class="k">val</span> <span class="nc">First</span> <span class="k">=</span> <span class="nc">Value</span><span class="o">(</span><span class="mi">1</span><span class="o">)</span>
</span><span class="line">  <span class="k">val</span> <span class="nc">Second</span> <span class="k">=</span> <span class="nc">Value</span><span class="o">(</span><span class="mi">2</span><span class="o">)</span>
</span><span class="line">  <span class="k">val</span> <span class="nc">Third</span> <span class="k">=</span> <span class="nc">Value</span><span class="o">(</span><span class="mi">3</span><span class="o">)</span>
</span><span class="line">  <span class="k">val</span> <span class="nc">Fourth</span> <span class="k">=</span> <span class="nc">Value</span><span class="o">(</span><span class="mi">3</span><span class="o">)</span> <span class="c1">// not enough coffeeeeee</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="n">withValueOpt</span><span class="o">(</span><span class="n">i</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span><span class="k">:</span> <span class="kt">Option</span><span class="o">[</span><span class="kt">Things.Value</span><span class="o">]</span> <span class="k">=</span> <span class="n">values</span><span class="o">.</span><span class="n">find</span><span class="o">(</span><span class="k">_</span><span class="o">.</span><span class="n">id</span> <span class="o">==</span> <span class="n">i</span><span class="o">)</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line">
</span><span class="line"><span class="cm">/*</span>
</span><span class="line"><span class="cm"> *  The above Enumeration will compile. Fine, but imagine now your app is deployed</span>
</span><span class="line"><span class="cm"> *  and somewhere else in your code you have to actually use your enum.</span>
</span><span class="line"><span class="cm"> */</span>
</span><span class="line">
</span><span class="line"><span class="nc">Things</span><span class="o">.</span><span class="nc">First</span> <span class="c1">// =&gt; java.lang.AssertionError: assertion failed: Duplicate id: 3</span>
</span><span class="line">
</span><span class="line"><span class="c1">// If at first you don&#39;t succeed???</span>
</span><span class="line"><span class="nc">Things</span><span class="o">.</span><span class="nc">First</span> <span class="c1">// =&gt; java.lang.NoClassDefFoundError: Could not initialize class Things$</span>
</span><span class="line"><span class="c1">// newp</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>This funny behaviour is caused by the fact that <code>Enumeration#Value</code>s (<code>First</code>, <code>Second</code>, <code>Third</code>, <code>Fourth</code>) are not checked for unique ids at compile time, and are instantiated when their outer <code>Enumeration</code> object is lazily instantiated.  When a <code>Value</code> is instantiated, its <code>id</code> is stuffed into a <code>HashMap[Int, Value]</code> after an assertion check that the id does not already exist in the map.</p>

<p>What has happend in the above example is the enumeration code compiles, but when we call <code>Things.First</code>, <code>object Things</code> gets instantiated, and throws an assertion error when <code>val Fourth</code> is being instantiated with an id of 3, which has already been assigned to <code>Third</code> and thus is already in the aforementioned <code>HashMap</code>.  This prevents the singleton <code>Things</code> from getting instantiated, and the next time you try to use it, Scala will throw a <code>NoClassDefFoundError</code>.</p>

<p>One way to work around this is to write tests for every such <code>Enumeration</code> to make sure that no one working in the code base has fat-fingered any ids. I’m a big proponent of writing tests, but tests are also code and come with a maintenance and cognitive cost, so I would prefer not having to write tests to make sure my simple value enums can be safely initialised.</p>

<p>This kind of problem is not limited to <code>Enumeration</code>: careless implementation of something similar may result in arguably freakier outcomes such as silent failures (2 members with the same value but only one of the members can be retrieved by value).</p>

<h3 id="valueenum"><code>ValueEnum</code></h3>

<p>In version 1.4.0 of Enumeratum, we’ve introduced 3 pairs of traits: <code>IntEnum</code> and <code>IntEnumEntry</code>, <code>LongEnum</code> and <code>LongEnumEntry</code>, and <code>ShortEnum</code> and <code>ShortEnumEntry</code>.  As their names suggest, these are value enum traits that allow you to create enums that are backed by <code>Int</code>, <code>Long</code> and <code>Short</code> respectively.  Each pair extends <code>ValueEnum</code> and <code>ValueEnumEntry</code>. Note that this class hierarchy is a bit extensive for now, and it may be more streamlined in the future.</p>

<p>This is an example of how you would create an <code>Long</code> based value enum with Play integration (JSON readers and writers, Query string binders, Path binders, Form formatters, etc):</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>ContentType value enum with full Play integration (ContentType.scala)</span> <a href="https://beachape.com/downloads/code/scala/ContentType.scala">download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span></span><span class="k">import</span> <span class="nn">enumeratum.values._</span>
</span><span class="line">
</span><span class="line"><span class="k">sealed</span> <span class="k">abstract</span> <span class="k">class</span> <span class="nc">ContentType</span><span class="o">(</span><span class="k">val</span> <span class="n">value</span><span class="k">:</span> <span class="kt">Long</span><span class="o">,</span> <span class="n">name</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span> <span class="k">extends</span> <span class="nc">LongEnumEntry</span>
</span><span class="line">
</span><span class="line"><span class="k">case</span> <span class="k">object</span> <span class="nc">ContentType</span> <span class="k">extends</span> <span class="nc">LongPlayEnum</span><span class="o">[</span><span class="kt">ContentType</span><span class="o">]</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">  <span class="k">val</span> <span class="n">values</span> <span class="k">=</span> <span class="n">findValues</span>
</span><span class="line">
</span><span class="line">  <span class="k">case</span> <span class="k">object</span> <span class="nc">Text</span> <span class="k">extends</span> <span class="nc">ContentType</span><span class="o">(</span><span class="n">value</span> <span class="k">=</span> <span class="mi">1L</span><span class="o">,</span> <span class="n">name</span> <span class="k">=</span> <span class="s">&quot;text&quot;</span><span class="o">)</span>
</span><span class="line">  <span class="k">case</span> <span class="k">object</span> <span class="nc">Image</span> <span class="k">extends</span> <span class="nc">ContentType</span><span class="o">(</span><span class="n">value</span> <span class="k">=</span> <span class="mi">2L</span><span class="o">,</span> <span class="n">name</span> <span class="k">=</span> <span class="s">&quot;image&quot;</span><span class="o">)</span>
</span><span class="line">  <span class="k">case</span> <span class="k">object</span> <span class="nc">Video</span> <span class="k">extends</span> <span class="nc">ContentType</span><span class="o">(</span><span class="n">value</span> <span class="k">=</span> <span class="mi">3L</span><span class="o">,</span> <span class="n">name</span> <span class="k">=</span> <span class="s">&quot;video&quot;</span><span class="o">)</span>
</span><span class="line">  <span class="k">case</span> <span class="k">object</span> <span class="nc">Audio</span> <span class="k">extends</span> <span class="nc">ContentType</span><span class="o">(</span><span class="n">value</span> <span class="k">=</span> <span class="mi">4L</span><span class="o">,</span> <span class="n">name</span> <span class="k">=</span> <span class="s">&quot;audio&quot;</span><span class="o">)</span>
</span><span class="line">  <span class="cm">/* case object Sticker extends ContentType(value = 4L, name = &quot;audio&quot;)</span>
</span><span class="line"><span class="cm">  *   =&gt; Fails at compile time because 4L is already used with the following error</span>
</span><span class="line"><span class="cm">  *   It does not look like you have unique values. Found the following values correspond to more than one members: Map(4 -&gt; List(object Audio, object Sticker))</span>
</span><span class="line"><span class="cm">  */</span>
</span><span class="line">
</span><span class="line"><span class="o">}</span>
</span><span class="line">
</span><span class="line"><span class="n">assert</span><span class="o">(</span><span class="nc">ContentType</span><span class="o">.</span><span class="n">withValue</span><span class="o">(</span><span class="mi">1</span><span class="o">)</span> <span class="o">==</span> <span class="nc">ContentType</span><span class="o">.</span><span class="nc">Text</span><span class="o">)</span>
</span><span class="line">
</span><span class="line"><span class="nc">ContentType</span><span class="o">.</span><span class="n">withValue</span><span class="o">(</span><span class="mi">10</span><span class="o">)</span> <span class="c1">// =&gt; java.util.NoSuchElementException:</span>
</span><span class="line">
</span><span class="line"><span class="c1">// Use with Play-JSON</span>
</span><span class="line"><span class="k">import</span> <span class="nn">play.api.libs.json.</span><span class="o">{</span> <span class="nc">JsNumber</span><span class="o">,</span> <span class="nc">JsString</span><span class="o">,</span> <span class="nc">Json</span> <span class="k">=&gt;</span> <span class="nc">PlayJson</span> <span class="o">}</span>
</span><span class="line"><span class="nc">ContentType</span><span class="o">.</span><span class="n">values</span><span class="o">.</span><span class="n">foreach</span> <span class="o">{</span> <span class="n">item</span> <span class="k">=&gt;</span>
</span><span class="line">    <span class="n">assert</span><span class="o">(</span><span class="nc">PlayJson</span><span class="o">.</span><span class="n">toJson</span><span class="o">(</span><span class="n">item</span><span class="o">)</span> <span class="o">==</span> <span class="nc">JsNumber</span><span class="o">(</span><span class="n">item</span><span class="o">.</span><span class="n">value</span><span class="o">))</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The <code>findValues</code> method of <code>ValueEnum</code>s works similarly to the <code>findValues</code> method of Enumeratum’s older <code>Enum</code>, except the macro will ensure that there is a literal <code>value</code> member or constructor for each enum entry and fails the compilation if more than one member shares the same value.</p>

<p>As the above example demonstrates, there are Play (and standalone Play-JSON) integrations available for this new kind of enum, as well as for UPickle, and Circe.</p>

<p>~~Note that this new feature is not yet available in Scala 2.10 and in the REPL due to Macro expansion differences~~ (update: now works in the REPL <em>and</em> is available for 2.10.x!).</p>

<h2 id="circe-integration">Circe integration</h2>

<p>Enumeratum 1.4.0 also adds support for serialising/deserialising to JSON using <a href="https://github.com/travisbrown/circe">Circe</a>, an up-and-coming performant and feature-filled JSON library published for both JVM <em>and</em> ScalaJS.</p>

<p>This is how you would use Circe with Enumeratum’s <code>Enum</code> (integrations for <code>ValueEnum</code> also exist)</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>ShirtSize Enum with Circe integration (ShirtSize.scala)</span> <a href="https://beachape.com/downloads/code/scala/ShirtSize.scala">download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span></span><span class="k">import</span> <span class="nn">enumeratum._</span>
</span><span class="line">
</span><span class="line"><span class="k">sealed</span> <span class="k">trait</span> <span class="nc">ShirtSize</span> <span class="k">extends</span> <span class="nc">EnumEntry</span>
</span><span class="line">
</span><span class="line"><span class="k">case</span> <span class="k">object</span> <span class="nc">ShirtSize</span> <span class="k">extends</span> <span class="nc">CirceEnum</span><span class="o">[</span><span class="kt">ShirtSize</span><span class="o">]</span> <span class="k">with</span> <span class="nc">Enum</span><span class="o">[</span><span class="kt">ShirtSize</span><span class="o">]</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">  <span class="k">case</span> <span class="k">object</span> <span class="nc">Small</span> <span class="k">extends</span> <span class="nc">ShirtSize</span>
</span><span class="line">  <span class="k">case</span> <span class="k">object</span> <span class="nc">Medium</span> <span class="k">extends</span> <span class="nc">ShirtSize</span>
</span><span class="line">  <span class="k">case</span> <span class="k">object</span> <span class="nc">Large</span> <span class="k">extends</span> <span class="nc">ShirtSize</span>
</span><span class="line">
</span><span class="line">  <span class="k">val</span> <span class="n">values</span> <span class="k">=</span> <span class="n">findValues</span>
</span><span class="line">
</span><span class="line"><span class="o">}</span>
</span><span class="line">
</span><span class="line"><span class="k">import</span> <span class="nn">io.circe.Json</span>
</span><span class="line"><span class="k">import</span> <span class="nn">io.circe.syntax._</span>
</span><span class="line">
</span><span class="line"><span class="nc">ShirtSize</span><span class="o">.</span><span class="n">values</span><span class="o">.</span><span class="n">foreach</span> <span class="o">{</span> <span class="n">size</span> <span class="k">=&gt;</span>
</span><span class="line">    <span class="n">assert</span><span class="o">(</span><span class="n">size</span><span class="o">.</span><span class="n">asJson</span> <span class="o">==</span> <span class="nc">Json</span><span class="o">.</span><span class="n">fromString</span><span class="o">(</span><span class="n">size</span><span class="o">.</span><span class="n">entryName</span><span class="o">))</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="conclusion">Conclusion</h2>

<p>Hopefully, Enumeratum’s new <code>ValueEnum</code> implementations will make development easier and safer for engineers out there who need to use value enumerations.  Since uniqueness is checked at compile-time, you can save yourself the trouble of writing a bunch of pedantic tests.  Circe is a promising JSON library that was really easy to integrate with and I look forward to taking advantage of the fact that it works on both server side and on the front end.</p>

<p>As always, if you have any problems, questions, suggestions, or better yet, PRs, please do not hesitate to get in touch on Github.</p>

<h2 id="links">Links</h2>

<ul>
  <li><a href="https://github.com/lloydmeta/enumeratum">Enumeratum on Github</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Scala and OpenCV Ep 2: Akka Face Detector]]></title>
    <link href="https://beachape.com/blog/2016/03/14/scala-and-opencv-ep-2-akka-face-detector/"/>
    <updated>2016-03-14T17:24:00+09:00</updated>
    <id>https://beachape.com/blog/2016/03/14/scala-and-opencv-ep-2-akka-face-detector</id>
    <content type="html"><![CDATA[<p>In <a href="https://beachape.com/blog/2016/03/08/scala-and-opencv-ep-1-akka-webcam/">Episode 1</a> of this series on Scala and computer vision, we created a basic Akka-Streams-powered webcam feed app.  To bring it to the next level, we will dig a little deeper into the OpenCV toolset and bring in feature detection as well as video stream editing.</p>

<p><img class="center" src="https://beachape.com/images/ape-detected.png" width="400" height="400" title="'Beachape face detected'" /></p>

<p>We will build on the foundations from the <a href="https://beachape.com/blog/2016/03/08/scala-and-opencv-ep-1-akka-webcam/">previous post</a> and continue with the usage of Akka Streams, modeling our application as a series of small transformations that are run asynchronously, with backpressure handled automatically.</p>

<!-- more -->

<h3 id="flow-chart">Flow chart</h3>

<p>Previously, our app could be represented by a somewhat trivial <a href="https://beachape.com/blog/2016/03/08/scala-and-opencv-ep-1-akka-webcam/#flow-chart">flow chart</a> that nonetheless had all the elements of a useful Akka stream: a <code>Source</code>, multiple transformations, and controlled side-effecting.</p>

<p>To build our face detector, we will add the following:</p>

<ol>
  <li><strong>Conversion to grey scale</strong>: Many image analysis tools need to be run on greyscale images, both for simplicity and efficiency.</li>
  <li><strong>Facial features detector</strong>: We will make use of OpenCV’s Haar Cascade feature detection API to detect and identify faces in our video feed.</li>
  <li><strong>Video editing</strong>: We want to draw rectangles around the faces that have been identified into the image.</li>
</ol>

<p>Our updated flow chart is as follows (new transformations are highlighted by a light green rectangle):</p>

<div id="flow-chart"><img class="center" src="https://beachape.com/images/opencv-flowchart-part-2.png" title="'Simple wecam feed flow'" /></div>

<h3 id="greyscale">Greyscale</h3>

<p>To convert a given <code>Mat</code> to a greyscale <code>Mat</code>, we can make use of the OpenCV method <a href="http://docs.opencv.org/2.4/modules/imgproc/doc/miscellaneous_transformations.html"><code>cvtColor</code></a>. The only slight niggle is that the method isn’t idempotent: if you try to convert a greyscale image to greyscale, the method will throw. No matter, we can try handle that scenario ourselves by detecting the number of channels in the matrix.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span></span><span class="k">def</span> <span class="n">toGreyScale</span><span class="o">(</span><span class="n">mat</span><span class="k">:</span> <span class="kt">Mat</span><span class="o">)</span><span class="k">:</span> <span class="kt">Mat</span> <span class="o">=</span> <span class="o">{</span>
</span><span class="line">  <span class="k">if</span> <span class="o">(</span><span class="n">mat</span><span class="o">.</span><span class="n">channels</span><span class="o">()</span> <span class="o">==</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">    <span class="n">mat</span> <span class="c1">// just hand back the matrix as is; it is already grey</span>
</span><span class="line">  <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class="line">    <span class="c1">// allocate a new Matrix with the same dimensions</span>
</span><span class="line">    <span class="k">val</span> <span class="n">greyMat</span> <span class="k">=</span> <span class="o">{</span>
</span><span class="line">      <span class="k">val</span> <span class="o">(</span><span class="n">rows</span><span class="o">,</span> <span class="n">cols</span><span class="o">)</span> <span class="k">=</span> <span class="o">(</span><span class="n">mat</span><span class="o">.</span><span class="n">rows</span><span class="o">(),</span> <span class="n">mat</span><span class="o">.</span><span class="n">cols</span><span class="o">())</span>
</span><span class="line">      <span class="k">new</span> <span class="nc">Mat</span><span class="o">(</span><span class="n">rows</span><span class="o">,</span> <span class="n">cols</span><span class="o">,</span> <span class="nc">CV_8U</span><span class="o">)</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">    <span class="n">opencv_imgproc</span><span class="o">.</span><span class="n">cvtColor</span><span class="o">(</span><span class="n">mat</span><span class="o">,</span> <span class="n">greyMat</span><span class="o">,</span> <span class="nc">COLOR_BGR2GRAY</span><span class="o">,</span> <span class="mi">1</span><span class="o">)</span>
</span><span class="line">    <span class="n">greyMat</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>However, since we want to pass the original <em>colour</em> image and the new greyscale image down the pipeline, we’ll make things a bit easier for ourselves by defining a simple <code>WithGreyscale</code> case class to hold both:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span></span><span class="k">object</span> <span class="nc">WithGrey</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">  <span class="cm">/**</span>
</span><span class="line"><span class="cm">   * Simple transformer method that produces a [[WithGrey]]</span>
</span><span class="line"><span class="cm">   */</span>
</span><span class="line">  <span class="k">def</span> <span class="n">build</span><span class="o">(</span><span class="n">orig</span><span class="k">:</span> <span class="kt">Mat</span><span class="o">)</span><span class="k">:</span> <span class="kt">WithGrey</span> <span class="o">=</span> <span class="o">{</span>
</span><span class="line">    <span class="k">val</span> <span class="n">grey</span> <span class="k">=</span> <span class="n">toGreyScale</span><span class="o">(</span><span class="n">orig</span><span class="o">)</span>
</span><span class="line">    <span class="nc">WithGrey</span><span class="o">(</span><span class="n">orig</span> <span class="k">=</span> <span class="n">orig</span><span class="o">,</span> <span class="n">grey</span> <span class="k">=</span> <span class="n">grey</span><span class="o">)</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line">
</span><span class="line">  <span class="c1">// toGreyScale is in here too</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line">
</span><span class="line"><span class="cm">/**</span>
</span><span class="line"><span class="cm"> * Original Matrix with a Grey image. Useful because almost all analysis processing requires a greyscale image instead of</span>
</span><span class="line"><span class="cm"> * a colour image.</span>
</span><span class="line"><span class="cm"> *</span>
</span><span class="line"><span class="cm"> * The constructor is private to make sure we don&#39;t mix up the two references</span>
</span><span class="line"><span class="cm"> *</span>
</span><span class="line"><span class="cm"> * Passing [[WithGrey]] images along with the original saves us from having to process to grey scale over and over again.</span>
</span><span class="line"><span class="cm"> */</span>
</span><span class="line"><span class="k">final</span> <span class="k">case</span> <span class="k">class</span> <span class="nc">WithGrey</span> <span class="k">private</span> <span class="o">(</span><span class="n">orig</span><span class="k">:</span> <span class="kt">Mat</span><span class="o">,</span> <span class="n">grey</span><span class="k">:</span> <span class="kt">Mat</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="face-detection">Face detection</h3>

<p>To find faces in the images in our video feed, we will make use of Haar feature-based cascade classifiers, which are supported directly by OpenCV.  Haar Cascade classifers define how to look at an image and quickly identify any areas in it that are of interest to us.  A given classifier definition will usually contain multiple stages, so that a region is considered to test positive if all features in all stages of the definition return positive (thus <em>cascade</em>).</p>

<p>In actual usage, this relies on careful training and tuning of classifier defintions, as well as a combination of clever mathematics and pragmatic optimisation for detection.  I will not cover exactly how they work in this tutorial (my understanding is dubious and there is a wealth of information online about them), but the following are a couple links that really helped me understand the theory behind them and how they work in practice:</p>

<ol>
  <li><a href="http://docs.opencv.org/3.1.0/d7/d8b/tutorial_py_face_detection.html#gsc.tab=0">OpenCV documentation on using Haar Cascades for face detection</a></li>
  <li><a href="https://www.youtube.com/watch?v=sWTvK72-SPU">Youtube video covering Haar Cascades with a really good explanation of summed area tables</a></li>
</ol>

<p>OpenCV’s Haar Classifier API (or perhaps JavaCV’s wrapping of it) is fairly straight forward and boils down to:</p>

<ol>
  <li>Instantiating a <code>CascadeClassifier</code>, passing in a path to a classifier definition (you can find some <a href="https://github.com/Itseez/opencv/tree/master/data/haarcascades">here</a>) as a constructor argument</li>
  <li>Instantiating an instance of <code>RectVector</code>, which is aptly named because it is a wrapper for a native vector of rectangles.</li>
  <li>Pass the allocated instance of <code>RectVector</code> to the <code>CascadeClassifier</code>’s detectMultiScale along with a greyscale image and some other options (yes, OpenCV will mutate the <code>RectVector</code> you pass in by adding in <code>Rect</code>s)</li>
</ol>

<p>In our implementation of a face detector, we’ll wrap a few raw (but aliased) primitives that serve as option flags in OpenCV, just for our own sanity.  We’ll also create a delegator class that  has a <code>detect(withGrey: WithGrey): (WithGrey, Seq[Face])</code> method and wraps the classifier to hold constant values for the classifier options because for our purposes, those won’t be changing on the fly.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Tuple-like class for holding width and height in pixels (Dimensions.scala)</span> <a href="https://beachape.com/downloads/code/scala/Dimensions.scala">download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span></span><span class="cm">/**</span>
</span><span class="line"><span class="cm"> * Tuple-like class for holding width and height in pixels</span>
</span><span class="line"><span class="cm"> */</span>
</span><span class="line"><span class="k">case</span> <span class="k">class</span> <span class="nc">Dimensions</span><span class="o">(</span><span class="n">width</span><span class="k">:</span> <span class="kt">Int</span><span class="o">,</span> <span class="n">height</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Nothing face-specific in this class per say; it can hold ids and Rects for any detected object (Face.scala)</span> <a href="https://beachape.com/downloads/code/scala/Face.scala">download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span></span><span class="cm">/**</span>
</span><span class="line"><span class="cm">  * Holds an id and an OpenCV Rect defining the corners of a rectangle.</span>
</span><span class="line"><span class="cm">  *</span>
</span><span class="line"><span class="cm">  * There is nothing *face* specific in this class per say; it can hold ids and Rects for any detected</span>
</span><span class="line"><span class="cm">  * object</span>
</span><span class="line"><span class="cm">  */</span>
</span><span class="line"><span class="k">case</span> <span class="k">class</span> <span class="nc">Face</span><span class="o">(</span><span class="n">id</span><span class="k">:</span> <span class="kt">Long</span><span class="o">,</span> <span class="n">faceRect</span><span class="k">:</span> <span class="kt">Rect</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Haar classifier option wrapper class (HaarDetectorFlag.scala)</span> <a href="https://beachape.com/downloads/code/scala/HaarDetectorFlag.scala">download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span></span><span class="k">sealed</span> <span class="k">abstract</span> <span class="k">class</span> <span class="nc">HaarDetectorFlag</span><span class="o">(</span><span class="k">val</span> <span class="n">flag</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span>
</span><span class="line">
</span><span class="line"><span class="k">case</span> <span class="k">object</span> <span class="nc">HaarDetectorFlag</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">  <span class="k">case</span> <span class="k">object</span> <span class="nc">DoCannyPruning</span> <span class="k">extends</span> <span class="nc">HaarDetectorFlag</span><span class="o">(</span><span class="nc">CV_HAAR_DO_CANNY_PRUNING</span><span class="o">)</span>
</span><span class="line">  <span class="k">case</span> <span class="k">object</span> <span class="nc">ScaleImage</span> <span class="k">extends</span> <span class="nc">HaarDetectorFlag</span><span class="o">(</span><span class="nc">CV_HAAR_SCALE_IMAGE</span><span class="o">)</span>
</span><span class="line">  <span class="k">case</span> <span class="k">object</span> <span class="nc">FindBiggestObject</span> <span class="k">extends</span> <span class="nc">HaarDetectorFlag</span><span class="o">(</span><span class="nc">CV_HAAR_FIND_BIGGEST_OBJECT</span><span class="o">)</span>
</span><span class="line">  <span class="k">case</span> <span class="k">object</span> <span class="nc">DoRoughSearch</span> <span class="k">extends</span> <span class="nc">HaarDetectorFlag</span><span class="o">(</span><span class="nc">CV_HAAR_DO_ROUGH_SEARCH</span><span class="o">)</span>
</span><span class="line">
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Face detector class that holds a Haar classifier (FaceDetector.scala)</span> <a href="https://beachape.com/downloads/code/scala/FaceDetector.scala">download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span></span><span class="k">object</span> <span class="nc">FaceDetector</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">  <span class="cm">/**</span>
</span><span class="line"><span class="cm">   * Builds a FaceDetector with the default Haar Cascade classifier in the resource directory</span>
</span><span class="line"><span class="cm">   */</span>
</span><span class="line">  <span class="k">def</span> <span class="n">defaultCascadeFile</span><span class="o">(</span>
</span><span class="line">    <span class="n">dimensions</span><span class="k">:</span> <span class="kt">Dimensions</span><span class="o">,</span>
</span><span class="line">    <span class="n">scaleFactor</span><span class="k">:</span> <span class="kt">Double</span> <span class="o">=</span> <span class="mf">1.3</span><span class="o">,</span>
</span><span class="line">    <span class="n">minNeighbours</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="mi">3</span><span class="o">,</span>
</span><span class="line">    <span class="n">detectorFlag</span><span class="k">:</span> <span class="kt">HaarDetectorFlag</span> <span class="o">=</span> <span class="nc">HaarDetectorFlag</span><span class="o">.</span><span class="nc">DoCannyPruning</span><span class="o">,</span>
</span><span class="line">    <span class="n">minSize</span><span class="k">:</span> <span class="kt">Dimensions</span> <span class="o">=</span> <span class="nc">Dimensions</span><span class="o">(</span><span class="n">width</span> <span class="k">=</span> <span class="mi">30</span><span class="o">,</span> <span class="n">height</span> <span class="k">=</span> <span class="mi">30</span><span class="o">),</span>
</span><span class="line">    <span class="n">maxSize</span><span class="k">:</span> <span class="kt">Option</span><span class="o">[</span><span class="kt">Dimensions</span><span class="o">]</span> <span class="k">=</span> <span class="nc">None</span>
</span><span class="line">  <span class="o">)</span><span class="k">:</span> <span class="kt">FaceDetector</span> <span class="o">=</span> <span class="o">{</span>
</span><span class="line">    <span class="k">val</span> <span class="n">classLoader</span> <span class="k">=</span> <span class="k">this</span><span class="o">.</span><span class="n">getClass</span><span class="o">.</span><span class="n">getClassLoader</span>
</span><span class="line">    <span class="k">val</span> <span class="n">faceXml</span> <span class="k">=</span> <span class="n">classLoader</span><span class="o">.</span><span class="n">getResource</span><span class="o">(</span><span class="s">&quot;haarcascade_frontalface_alt.xml&quot;</span><span class="o">).</span><span class="n">getPath</span>
</span><span class="line">    <span class="k">new</span> <span class="nc">FaceDetector</span><span class="o">(</span>
</span><span class="line">      <span class="n">dimensions</span> <span class="k">=</span> <span class="n">dimensions</span><span class="o">,</span>
</span><span class="line">      <span class="n">classifierPath</span> <span class="k">=</span> <span class="n">faceXml</span><span class="o">,</span>
</span><span class="line">      <span class="n">scaleFactor</span> <span class="k">=</span> <span class="n">scaleFactor</span><span class="o">,</span>
</span><span class="line">      <span class="n">minNeighbours</span> <span class="k">=</span> <span class="n">minNeighbours</span><span class="o">,</span>
</span><span class="line">      <span class="n">detectorFlag</span> <span class="k">=</span> <span class="n">detectorFlag</span><span class="o">,</span>
</span><span class="line">      <span class="n">minSize</span> <span class="k">=</span> <span class="n">minSize</span><span class="o">,</span>
</span><span class="line">      <span class="n">maxSize</span> <span class="k">=</span> <span class="n">maxSize</span>
</span><span class="line">    <span class="o">)</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">FaceDetector</span><span class="o">(</span>
</span><span class="line">    <span class="k">val</span> <span class="n">dimensions</span><span class="k">:</span> <span class="kt">Dimensions</span><span class="o">,</span>
</span><span class="line">    <span class="n">classifierPath</span><span class="k">:</span> <span class="kt">String</span><span class="o">,</span>
</span><span class="line">    <span class="n">scaleFactor</span><span class="k">:</span> <span class="kt">Double</span> <span class="o">=</span> <span class="mf">1.3</span><span class="o">,</span>
</span><span class="line">    <span class="n">minNeighbours</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="mi">3</span><span class="o">,</span>
</span><span class="line">    <span class="n">detectorFlag</span><span class="k">:</span> <span class="kt">HaarDetectorFlag</span> <span class="o">=</span> <span class="nc">HaarDetectorFlag</span><span class="o">.</span><span class="nc">ScaleImage</span><span class="o">,</span>
</span><span class="line">    <span class="n">minSize</span><span class="k">:</span> <span class="kt">Dimensions</span> <span class="o">=</span> <span class="nc">Dimensions</span><span class="o">(</span><span class="n">width</span> <span class="k">=</span> <span class="mi">30</span><span class="o">,</span> <span class="n">height</span> <span class="k">=</span> <span class="mi">30</span><span class="o">),</span>
</span><span class="line">    <span class="n">maxSize</span><span class="k">:</span> <span class="kt">Option</span><span class="o">[</span><span class="kt">Dimensions</span><span class="o">]</span> <span class="k">=</span> <span class="nc">None</span>
</span><span class="line"><span class="o">)</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">  <span class="k">private</span> <span class="k">val</span> <span class="n">faceCascade</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">CascadeClassifier</span><span class="o">(</span><span class="n">classifierPath</span><span class="o">)</span>
</span><span class="line">
</span><span class="line">  <span class="k">private</span> <span class="k">val</span> <span class="n">minSizeOpenCV</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">Size</span><span class="o">(</span><span class="n">minSize</span><span class="o">.</span><span class="n">width</span><span class="o">,</span> <span class="n">minSize</span><span class="o">.</span><span class="n">height</span><span class="o">)</span>
</span><span class="line">  <span class="k">private</span> <span class="k">val</span> <span class="n">maxSizeOpenCV</span> <span class="k">=</span> <span class="n">maxSize</span><span class="o">.</span><span class="n">map</span><span class="o">(</span><span class="n">d</span> <span class="k">=&gt;</span> <span class="k">new</span> <span class="nc">Size</span><span class="o">(</span><span class="n">d</span><span class="o">.</span><span class="n">width</span><span class="o">,</span> <span class="n">d</span><span class="o">.</span><span class="n">height</span><span class="o">)).</span><span class="n">getOrElse</span><span class="o">(</span><span class="k">new</span> <span class="nc">Size</span><span class="o">())</span>
</span><span class="line">
</span><span class="line">  <span class="cm">/**</span>
</span><span class="line"><span class="cm">   * Given a frame matrix, a series of detected faces</span>
</span><span class="line"><span class="cm">   */</span>
</span><span class="line">  <span class="k">def</span> <span class="n">detect</span><span class="o">(</span><span class="n">frameMatWithGrey</span><span class="k">:</span> <span class="kt">WithGrey</span><span class="o">)</span><span class="k">:</span> <span class="o">(</span><span class="kt">WithGrey</span><span class="o">,</span> <span class="kt">Seq</span><span class="o">[</span><span class="kt">Face</span><span class="o">])</span> <span class="k">=</span> <span class="o">{</span>
</span><span class="line">    <span class="k">val</span> <span class="n">currentGreyMat</span> <span class="k">=</span> <span class="n">frameMatWithGrey</span><span class="o">.</span><span class="n">grey</span>
</span><span class="line">    <span class="k">val</span> <span class="n">faceRects</span> <span class="k">=</span> <span class="n">findFaces</span><span class="o">(</span><span class="n">currentGreyMat</span><span class="o">)</span>
</span><span class="line">    <span class="k">val</span> <span class="n">faces</span> <span class="k">=</span> <span class="k">for</span> <span class="o">{</span>
</span><span class="line">      <span class="n">i</span> <span class="k">&lt;-</span> <span class="mi">0L</span> <span class="n">until</span> <span class="n">faceRects</span><span class="o">.</span><span class="n">size</span><span class="o">()</span>
</span><span class="line">      <span class="n">faceRect</span> <span class="k">=</span> <span class="n">faceRects</span><span class="o">.</span><span class="n">get</span><span class="o">(</span><span class="n">i</span><span class="o">)</span>
</span><span class="line">    <span class="o">}</span> <span class="k">yield</span> <span class="nc">Face</span><span class="o">(</span><span class="n">i</span><span class="o">,</span> <span class="n">faceRect</span><span class="o">)</span>
</span><span class="line">    <span class="o">(</span><span class="n">frameMatWithGrey</span><span class="o">,</span> <span class="n">faces</span><span class="o">)</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line">
</span><span class="line">  <span class="k">private</span> <span class="k">def</span> <span class="n">findFaces</span><span class="o">(</span><span class="n">greyMat</span><span class="k">:</span> <span class="kt">Mat</span><span class="o">)</span><span class="k">:</span> <span class="kt">RectVector</span> <span class="o">=</span> <span class="o">{</span>
</span><span class="line">    <span class="k">val</span> <span class="n">faceRects</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">RectVector</span><span class="o">()</span>
</span><span class="line">    <span class="n">faceCascade</span><span class="o">.</span><span class="n">detectMultiScale</span><span class="o">(</span><span class="n">greyMat</span><span class="o">,</span> <span class="n">faceRects</span><span class="o">,</span> <span class="n">scaleFactor</span><span class="o">,</span> <span class="n">minNeighbours</span><span class="o">,</span> <span class="n">detectorFlag</span><span class="o">.</span><span class="n">flag</span><span class="o">,</span> <span class="n">minSizeOpenCV</span><span class="o">,</span> <span class="n">maxSizeOpenCV</span><span class="o">)</span>
</span><span class="line">    <span class="n">faceRects</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line">
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>To be clear, there is really nothing <em>face-specific</em> in our classifier because what it detects is entirely dependent on the Haar cascade XML file passed to it on construction.</p>

<h3 id="drawing-rectangles">Drawing rectangles</h3>

<p>Once we have a list of rectangles that denote where our objects are in the image matrix, the last thing we need to do is draw the rectangles on the original image matrix. OpenCV provides a <code>rectangle</code> method that takes a <code>Mat</code> and two points denoting the top left and bottom right corners of a rectangle and draws the rectangle to the matrix it in-place.  Here again, our implementation will clone the matrix first before calling the OpenCV method so as to keep our code easy to reason about.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span> (FaceDrawer.scala)</span> <a href="https://beachape.com/downloads/code/scala/FaceDrawer.scala">download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span></span><span class="k">class</span> <span class="nc">FaceDrawer</span><span class="o">(</span><span class="n">fontScale</span><span class="k">:</span> <span class="kt">Float</span> <span class="o">=</span> <span class="mf">0.6f</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">  <span class="k">private</span> <span class="k">val</span> <span class="nc">RedColour</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">Scalar</span><span class="o">(</span><span class="nc">AbstractCvScalar</span><span class="o">.</span><span class="nc">RED</span><span class="o">)</span>
</span><span class="line">
</span><span class="line">  <span class="cm">/**</span>
</span><span class="line"><span class="cm">   * Clones the Mat, draws squares around the faces on it using the provided [[Face]] sequence and returns the new Mat</span>
</span><span class="line"><span class="cm">   */</span>
</span><span class="line">  <span class="k">def</span> <span class="n">drawFaces</span><span class="o">(</span><span class="n">withGrey</span><span class="k">:</span> <span class="kt">WithGrey</span><span class="o">,</span> <span class="n">faces</span><span class="k">:</span> <span class="kt">Seq</span><span class="o">[</span><span class="kt">Face</span><span class="o">])</span><span class="k">:</span> <span class="kt">Mat</span> <span class="o">=</span> <span class="o">{</span>
</span><span class="line">    <span class="k">val</span> <span class="n">clonedMat</span> <span class="k">=</span> <span class="n">withGrey</span><span class="o">.</span><span class="n">orig</span><span class="o">.</span><span class="n">clone</span><span class="o">()</span>
</span><span class="line">    <span class="k">for</span> <span class="o">(</span><span class="n">f</span> <span class="k">&lt;-</span> <span class="n">faces</span><span class="o">)</span> <span class="n">drawFace</span><span class="o">(</span><span class="n">clonedMat</span><span class="o">,</span> <span class="n">f</span><span class="o">)</span>
</span><span class="line">    <span class="n">clonedMat</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line">
</span><span class="line">  <span class="k">private</span> <span class="k">def</span> <span class="n">drawFace</span><span class="o">(</span><span class="n">clonedMat</span><span class="k">:</span> <span class="kt">Mat</span><span class="o">,</span> <span class="n">f</span><span class="k">:</span> <span class="kt">Face</span><span class="o">)</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span> <span class="o">{</span>
</span><span class="line">    <span class="n">rectangle</span><span class="o">(</span>
</span><span class="line">      <span class="n">clonedMat</span><span class="o">,</span>
</span><span class="line">      <span class="k">new</span> <span class="nc">Point</span><span class="o">(</span><span class="n">f</span><span class="o">.</span><span class="n">faceRect</span><span class="o">.</span><span class="n">x</span><span class="o">,</span> <span class="n">f</span><span class="o">.</span><span class="n">faceRect</span><span class="o">.</span><span class="n">y</span><span class="o">),</span>
</span><span class="line">      <span class="k">new</span> <span class="nc">Point</span><span class="o">(</span><span class="n">f</span><span class="o">.</span><span class="n">faceRect</span><span class="o">.</span><span class="n">x</span> <span class="o">+</span> <span class="n">f</span><span class="o">.</span><span class="n">faceRect</span><span class="o">.</span><span class="n">width</span><span class="o">,</span> <span class="n">f</span><span class="o">.</span><span class="n">faceRect</span><span class="o">.</span><span class="n">y</span> <span class="o">+</span> <span class="n">f</span><span class="o">.</span><span class="n">faceRect</span><span class="o">.</span><span class="n">height</span><span class="o">),</span>
</span><span class="line">      <span class="nc">RedColour</span><span class="o">,</span>
</span><span class="line">      <span class="mi">1</span><span class="o">,</span>
</span><span class="line">      <span class="nc">CV_AA</span><span class="o">,</span>
</span><span class="line">      <span class="mi">0</span>
</span><span class="line">    <span class="o">)</span>
</span><span class="line">
</span><span class="line">    <span class="c1">// draw the face number</span>
</span><span class="line">    <span class="k">val</span> <span class="n">cvPoint</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">Point</span><span class="o">(</span><span class="n">f</span><span class="o">.</span><span class="n">faceRect</span><span class="o">.</span><span class="n">x</span><span class="o">,</span> <span class="n">f</span><span class="o">.</span><span class="n">faceRect</span><span class="o">.</span><span class="n">y</span> <span class="o">-</span> <span class="mi">20</span><span class="o">)</span>
</span><span class="line">    <span class="n">putText</span><span class="o">(</span><span class="n">clonedMat</span><span class="o">,</span> <span class="s">s&quot;Face </span><span class="si">${</span><span class="n">f</span><span class="o">.</span><span class="n">id</span><span class="si">}</span><span class="s">&quot;</span><span class="o">,</span> <span class="n">cvPoint</span><span class="o">,</span> <span class="nc">FONT_HERSHEY_SIMPLEX</span><span class="o">,</span> <span class="n">fontScale</span><span class="o">,</span> <span class="nc">RedColour</span><span class="o">)</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line">
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Our <code>FaceDrawer</code> will expose a<code>drawFaces</code> method that takes a <code>WithGrey</code> with a list of detected <code>Face</code>s and use the above method to draw rectanges around each face. We’ll also make use of OpenCV’s <code>putText</code> method to write the word “Face” along with a number right on top of the rectangle.</p>

<h3 id="ui">UI</h3>

<p>We’ll hook up all our components in a simple Swing app. To make things a little more interesting, the app will consist of 2 frames:</p>

<ol>
  <li>An initial frame to allow the user to choose between loading a custom Haar cascade classifier file or to load the default one that’s packaged in <code>resources</code></li>
  <li>The actual CanvasFrame shows our feed along with rectangles around detected objects</li>
</ol>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>WebcamFaceDetector UI (WebcamFaceDetector.scala)</span> <a href="https://beachape.com/downloads/code/scala/WebcamFaceDetector.scala">download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
<span class="line-number">68</span>
<span class="line-number">69</span>
<span class="line-number">70</span>
<span class="line-number">71</span>
<span class="line-number">72</span>
<span class="line-number">73</span>
<span class="line-number">74</span>
<span class="line-number">75</span>
<span class="line-number">76</span>
<span class="line-number">77</span>
<span class="line-number">78</span>
<span class="line-number">79</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span></span><span class="k">object</span> <span class="nc">WebcamFaceDetector</span> <span class="k">extends</span> <span class="nc">SimpleSwingApplication</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="n">top</span><span class="k">:</span> <span class="kt">Frame</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">OptionsFrame</span>
</span><span class="line">
</span><span class="line">  <span class="cm">/**</span>
</span><span class="line"><span class="cm">   * This is the initial frame, which presents two simple options, to load a custom Haar cascade file for face detection,</span>
</span><span class="line"><span class="cm">   * or to use the default one</span>
</span><span class="line"><span class="cm">   */</span>
</span><span class="line">  <span class="k">private</span> <span class="k">class</span> <span class="nc">OptionsFrame</span> <span class="k">extends</span> <span class="nc">Frame</span> <span class="o">{</span> <span class="n">currentFrame</span> <span class="k">=&gt;</span>
</span><span class="line">
</span><span class="line">    <span class="n">peer</span><span class="o">.</span><span class="n">setDefaultCloseOperation</span><span class="o">(</span><span class="n">javax</span><span class="o">.</span><span class="n">swing</span><span class="o">.</span><span class="nc">JFrame</span><span class="o">.</span><span class="nc">EXIT_ON_CLOSE</span><span class="o">)</span>
</span><span class="line">
</span><span class="line">    <span class="k">val</span> <span class="n">imageDimensions</span> <span class="k">=</span> <span class="nc">Dimensions</span><span class="o">(</span><span class="n">width</span> <span class="k">=</span> <span class="mi">640</span><span class="o">,</span> <span class="n">height</span> <span class="k">=</span> <span class="mi">480</span><span class="o">)</span>
</span><span class="line">    <span class="k">val</span> <span class="n">chooseCascadeBtn</span> <span class="k">=</span> <span class="nc">Button</span><span class="o">(</span><span class="s">&quot;Load custom Haar cascade file&quot;</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">      <span class="k">val</span> <span class="n">filePath</span> <span class="k">=</span> <span class="n">openChooser</span><span class="o">()</span>
</span><span class="line">      <span class="n">filePath</span><span class="o">.</span><span class="n">foreach</span> <span class="o">{</span> <span class="n">path</span> <span class="k">=&gt;</span>
</span><span class="line">        <span class="k">val</span> <span class="n">detector</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">FaceDetector</span><span class="o">(</span><span class="n">dimensions</span> <span class="k">=</span> <span class="n">imageDimensions</span><span class="o">,</span> <span class="n">classifierPath</span> <span class="k">=</span> <span class="n">path</span><span class="o">)</span>
</span><span class="line">        <span class="n">openFaceDetectionWindow</span><span class="o">(</span><span class="n">detector</span><span class="o">)</span>
</span><span class="line">      <span class="o">}</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">    <span class="k">val</span> <span class="n">defaultCascadeBtn</span> <span class="k">=</span> <span class="nc">Button</span><span class="o">(</span><span class="s">&quot;Use default face Haar cascade file&quot;</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">      <span class="k">val</span> <span class="n">detector</span> <span class="k">=</span> <span class="nc">FaceDetector</span><span class="o">.</span><span class="n">defaultCascadeFile</span><span class="o">(</span><span class="n">imageDimensions</span><span class="o">)</span>
</span><span class="line">      <span class="n">openFaceDetectionWindow</span><span class="o">(</span><span class="n">detector</span><span class="o">)</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="k">val</span> <span class="n">mainPanel</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">GridPanel</span><span class="o">(</span><span class="n">rows0</span> <span class="k">=</span> <span class="mi">0</span><span class="o">,</span> <span class="n">cols0</span> <span class="k">=</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">      <span class="n">preferredSize</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">Dimension</span><span class="o">(</span><span class="mi">300</span><span class="o">,</span> <span class="mi">200</span><span class="o">)</span>
</span><span class="line">      <span class="n">contents</span> <span class="o">++=</span> <span class="nc">Seq</span><span class="o">(</span><span class="n">chooseCascadeBtn</span><span class="o">,</span> <span class="n">defaultCascadeBtn</span><span class="o">)</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="n">contents</span> <span class="k">=</span> <span class="n">mainPanel</span>
</span><span class="line">
</span><span class="line">    <span class="k">private</span> <span class="k">def</span> <span class="n">openChooser</span><span class="o">()</span><span class="k">:</span> <span class="kt">Option</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="k">=</span> <span class="o">{</span>
</span><span class="line">      <span class="k">val</span> <span class="n">chooser</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">FileChooser</span><span class="o">(</span><span class="k">new</span> <span class="n">java</span><span class="o">.</span><span class="n">io</span><span class="o">.</span><span class="nc">File</span><span class="o">(</span><span class="s">&quot;.&quot;</span><span class="o">))</span>
</span><span class="line">      <span class="n">chooser</span><span class="o">.</span><span class="n">fileSelectionMode</span> <span class="k">=</span> <span class="nc">FileChooser</span><span class="o">.</span><span class="nc">SelectionMode</span><span class="o">.</span><span class="nc">FilesOnly</span>
</span><span class="line">      <span class="n">chooser</span><span class="o">.</span><span class="n">showOpenDialog</span><span class="o">(</span><span class="n">currentFrame</span><span class="o">)</span> <span class="k">match</span> <span class="o">{</span>
</span><span class="line">        <span class="k">case</span> <span class="nc">FileChooser</span><span class="o">.</span><span class="nc">Result</span><span class="o">.</span><span class="nc">Approve</span> <span class="k">=&gt;</span> <span class="nc">Some</span><span class="o">(</span><span class="n">chooser</span><span class="o">.</span><span class="n">selectedFile</span><span class="o">.</span><span class="n">toPath</span><span class="o">.</span><span class="n">toAbsolutePath</span><span class="o">.</span><span class="n">toString</span><span class="o">)</span>
</span><span class="line">        <span class="k">case</span> <span class="k">_</span> <span class="k">=&gt;</span> <span class="nc">None</span>
</span><span class="line">      <span class="o">}</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="k">private</span> <span class="k">def</span> <span class="n">openFaceDetectionWindow</span><span class="o">(</span><span class="n">faceDetector</span><span class="k">:</span> <span class="kt">FaceDetector</span><span class="o">)</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span> <span class="o">{</span>
</span><span class="line">      <span class="k">new</span> <span class="nc">DetectionFrame</span><span class="o">(</span><span class="n">faceDetector</span><span class="o">)</span>
</span><span class="line">      <span class="n">peer</span><span class="o">.</span><span class="n">setDefaultCloseOperation</span><span class="o">(</span><span class="n">javax</span><span class="o">.</span><span class="n">swing</span><span class="o">.</span><span class="nc">WindowConstants</span><span class="o">.</span><span class="nc">DO_NOTHING_ON_CLOSE</span><span class="o">)</span>
</span><span class="line">      <span class="n">currentFrame</span><span class="o">.</span><span class="n">close</span><span class="o">()</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">  <span class="o">}</span>
</span><span class="line">
</span><span class="line">  <span class="cm">/**</span>
</span><span class="line"><span class="cm">   * Our detection window; opened by Initial Frame</span>
</span><span class="line"><span class="cm">   */</span>
</span><span class="line">  <span class="k">private</span> <span class="k">class</span> <span class="nc">DetectionFrame</span><span class="o">(</span><span class="n">faceDetector</span><span class="k">:</span> <span class="kt">FaceDetector</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">    <span class="k">implicit</span> <span class="k">val</span> <span class="n">system</span> <span class="k">=</span> <span class="nc">ActorSystem</span><span class="o">()</span>
</span><span class="line">    <span class="k">implicit</span> <span class="k">val</span> <span class="n">materializer</span> <span class="k">=</span> <span class="nc">ActorMaterializer</span><span class="o">()</span>
</span><span class="line">
</span><span class="line">    <span class="k">val</span> <span class="n">webcamSource</span> <span class="k">=</span> <span class="nc">Webcam</span><span class="o">.</span><span class="n">source</span><span class="o">(</span><span class="n">deviceId</span> <span class="k">=</span> <span class="mi">0</span><span class="o">,</span> <span class="n">dimensions</span> <span class="k">=</span> <span class="n">faceDetector</span><span class="o">.</span><span class="n">dimensions</span><span class="o">)</span>
</span><span class="line">
</span><span class="line">    <span class="k">val</span> <span class="n">canvas</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">CanvasFrame</span><span class="o">(</span><span class="s">&quot;Webcam&quot;</span><span class="o">)</span>
</span><span class="line">    <span class="c1">//  //Set Canvas frame to close on exit</span>
</span><span class="line">    <span class="n">canvas</span><span class="o">.</span><span class="n">setDefaultCloseOperation</span><span class="o">(</span><span class="n">javax</span><span class="o">.</span><span class="n">swing</span><span class="o">.</span><span class="nc">JFrame</span><span class="o">.</span><span class="nc">EXIT_ON_CLOSE</span><span class="o">)</span>
</span><span class="line">
</span><span class="line">    <span class="k">val</span> <span class="n">faceDrawer</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">FaceDrawer</span><span class="o">()</span>
</span><span class="line">
</span><span class="line">    <span class="k">val</span> <span class="n">flow</span> <span class="k">=</span> <span class="n">webcamSource</span>
</span><span class="line">      <span class="o">.</span><span class="n">map</span><span class="o">(</span><span class="nc">MediaConversion</span><span class="o">.</span><span class="n">toMat</span><span class="o">)</span> <span class="c1">// most OpenCV manipulations require a Matrix</span>
</span><span class="line">      <span class="o">.</span><span class="n">map</span><span class="o">(</span><span class="nc">Flip</span><span class="o">.</span><span class="n">horizontal</span><span class="o">)</span>
</span><span class="line">      <span class="o">.</span><span class="n">map</span><span class="o">(</span><span class="nc">WithGrey</span><span class="o">.</span><span class="n">build</span><span class="o">)</span>
</span><span class="line">      <span class="o">.</span><span class="n">map</span><span class="o">(</span><span class="n">faceDetector</span><span class="o">.</span><span class="n">detect</span><span class="o">)</span>
</span><span class="line">      <span class="o">.</span><span class="n">map</span><span class="o">((</span><span class="n">faceDrawer</span><span class="o">.</span><span class="n">drawFaces</span> <span class="k">_</span><span class="o">).</span><span class="n">tupled</span><span class="o">)</span>
</span><span class="line">      <span class="o">.</span><span class="n">map</span><span class="o">(</span><span class="nc">MediaConversion</span><span class="o">.</span><span class="n">toFrame</span><span class="o">)</span> <span class="c1">// convert back to a frame</span>
</span><span class="line">      <span class="o">.</span><span class="n">map</span><span class="o">(</span><span class="n">canvas</span><span class="o">.</span><span class="n">showImage</span><span class="o">)</span>
</span><span class="line">      <span class="o">.</span><span class="n">to</span><span class="o">(</span><span class="nc">Sink</span><span class="o">.</span><span class="n">ignore</span><span class="o">)</span>
</span><span class="line">
</span><span class="line">    <span class="n">flow</span><span class="o">.</span><span class="n">run</span><span class="o">()</span>
</span><span class="line">
</span><span class="line">  <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Notice that once again, the code defining the Akka Flow Graph maps almost one to one to our flow chart.</p>

<h2 id="conclusion">Conclusion</h2>

<p>We now have a face detector that uses  OpenCV’s Haar cascade classifier toolbelt and draws rectangles around any identified faces, and we made it by expanding on the Akka Stream foundations laid in the <a href="https://beachape.com/blog/2016/03/08/scala-and-opencv-ep-1-akka-webcam/">previous post</a>. As before, the code for this tutorial can be found <a href="https://github.com/lloydmeta/scala-akka-cv-part2">on Github</a>.</p>

<p>In the next post, we’ll expand this further by classifying the faces that we’ve detected as smiling or not using a supervised machine-learning model. We could of course continue to use Haar cascades to identify smiles in our feed (we can simply choose to load a smile Haar cascade classifier file), but what would be the fun in that ? :)</p>

<h3 id="credits">Credits</h3>

<ol>
  <li><a href="https://chimpler.wordpress.com/2014/11/18/playing-with-opencv-in-scala-to-do-face-detection-with-haarcascade-classifier-using-a-webcam/">Playing with OpenCV in Scala to do face detection with Haarcascade classifier using a webcam</a></li>
</ol>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Scala and OpenCV Ep 1: Akka Webcam]]></title>
    <link href="https://beachape.com/blog/2016/03/08/scala-and-opencv-ep-1-akka-webcam/"/>
    <updated>2016-03-08T16:16:00+09:00</updated>
    <id>https://beachape.com/blog/2016/03/08/scala-and-opencv-ep-1-akka-webcam</id>
    <content type="html"><![CDATA[<p>In a <a href="https://beachape.com/blog/2016/03/05/opencv-sbt-plugin/">previous post</a>, I talked about SBT-OpenCV, a plugin for SBT that makes it easy to get started with OpenCV in any SBT-defined JVM app using just one line in <code>project/plugins.sbt</code>.  Having handled the issue of getting the proper dependencies into a project, we can turn our attention to actually using the libraries to do something cool.</p>

<p>This post is the beginning of a series, where the end goal is to build a smile detector.  Akka and OpenCV will be used, with Spark joining later on to complete the buzzwords treble.</p>

<p>A well-rounded and fun first step is to get a video feed from a webcam showing on our screen. To do this, we will cover a variety of things, including how to define a custom Akka <code>Source</code>, how to use JavaCV, and some basic OpenCV image manipulation utilities.</p>

<!-- more -->

<h2 id="akka-streams">Akka Streams</h2>

<p>Many of the OpenCV tutorials floating around on the interwebs use a procedural approach; perhaps because it better fits the programming language of the tutorial, or for performance. In this series of posts, we will instead adopt a stream processing model, specifically in the manner of <a href="http://www.reactive-streams.org/">Reactive Streams</a>.</p>

<p>There are many benefits of using the Reactive Stream model (<a href="https://medium.com/@kvnwbbr/a-journey-into-reactive-streams-5ee2a9cd7e29#.am5eyvz5x">this blog post</a>, and <a href="http://www.slideshare.net/rolandkuhn/reactive-streams">this slide deck by Roland Kuhn</a> are great places to start reading), but the main ones I feel are relevant for us are:</p>

<ol>
  <li>
    <p><strong>Simplicity</strong>: by turning data processing into a series of simple stateless transformations, your code is easy to maintain, easy to change, and easy to understand: in other words, it becomes agile (<em>relax</em>: your code, not your team…).</p>
  </li>
  <li>
    <p><strong>Backpressure</strong>: Reactive Streams implementations ensure that backpressure (when downstream transforms take too long, upstream is informed so as to not overload your system) is handled automatically</p>
  </li>
  <li>
    <p><strong>Asynchronous</strong>: Reactive Streams are run asynchronously by default, leaving your main thread(s) responsive</p>
  </li>
</ol>

<p>In Scala, <a href="http://doc.akka.io/docs/akka-stream-and-http-experimental/snapshot/scala.html">Akka-Streams</a> is the defacto implementation of the Reactive Streams spec, and although it is labelled experimental, its adoption looks imminent (for example, <a href="https://www.playframework.com/documentation/2.4.x/ReactiveStreamsIntegration">there is already a Play integration</a> and the innards of Play are being rewritten to use Akka-Http, which is based on Akka-Streams).  Another nice Reactive Streams implementation in Scala is <a href="https://github.com/monixio/monix">Monix</a>, which offers a (subjectively) cleaner interface that is more familiar for people who come from RxScala/RxJava.</p>

<p>For the purposes of this tutorial, we will be using Akka-Streams because it seems to have higher chances of wide-spread adoption.</p>

<p><em>Note that this tutorial was written based on an <strong>experimental</strong> version of Akka streams.</em></p>

<h3 id="flow-chart">Flow chart</h3>

<p>Asides from wrapping OpenCV, JavaCV comes with a number of useful classes. One such class is <code>CanvasFrame</code>, which is a hardware-accelerated Swing Frame implementation for showing images.  <code>CanvasFrame</code>’s <code>.showImage</code> method accepts a <code>Frame</code>, which is the exact same type that <code>OpenCVFrameGrabber</code> (another useful JavaCV class) returns from its <code>.grabh()</code> method.</p>

<p>Before showing the image, we will flip the image so that the feed we see on screen moves in the direction we expect. This requires us to do a simple transformation to a <code>Mat</code>, a wrapper type for OpenCV’s native matrix, do the actual flipping of the matrix, convert the <code>Mat</code> back into a <code>Frame</code>, and then show it on the <code>CanvasFrame</code>.</p>

<p>In short, our pipeline looks something like this:</p>

<div id="flow-chart"><img class="center" src="https://beachape.com/images/opencv-flowchart-part-1.png" title="'Simple wecam feed flow'" /></div>

<h3 id="the-source">The Source</h3>

<p>As the diagram suggests, the first thing we need is a <code>Source</code> that produces <code>Frames</code>; in other words, a <code>Source[Frame]</code>.</p>

<p>The <code>OpenCVFrameGrabber</code> API for grabbing frames from a webcam is fairly simple: you instantiate one passing in an <code>Int</code> for the device id of the webcam (usually 0), optionally pass some settings to it, and then call <code>start</code> to initialise the grabber.  Afterwards, it is simly a matter of calling <code>.grab()</code> to obtain a <code>Frame</code>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span></span><span class="k">val</span> <span class="n">grabber</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">OpenCVFrameGrabber</span><span class="o">(</span><span class="n">deviceId</span><span class="o">)</span>
</span><span class="line"><span class="n">grabber</span><span class="o">.</span><span class="n">setImageWidth</span><span class="o">(</span><span class="n">imageWidth</span><span class="o">)</span>
</span><span class="line"><span class="n">grabber</span><span class="o">.</span><span class="n">setImageHeight</span><span class="o">(</span><span class="n">imageHeight</span><span class="o">)</span>
</span><span class="line"><span class="n">grabber</span><span class="o">.</span><span class="n">setBitsPerPixel</span><span class="o">(</span><span class="n">bitsPerPixel</span><span class="o">)</span>
</span><span class="line"><span class="n">grabber</span><span class="o">.</span><span class="n">setImageMode</span><span class="o">(</span><span class="n">imageMode</span><span class="o">)</span>
</span><span class="line"><span class="n">grabber</span><span class="o">.</span><span class="n">start</span><span class="o">()</span>
</span><span class="line">
</span><span class="line"><span class="c1">//...</span>
</span><span class="line">
</span><span class="line"><span class="n">grabber</span><span class="o">.</span><span class="n">grab</span><span class="o">()</span> <span class="c1">// returns a Frame</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>In order to create an Akka <code>Source[Frame]</code>, we will make use of the Akka-provided <code>ActorPublisher</code> class, which provides helper methods that specifically make it easy to send data only when there is downstream demand (this is how backpressure is automagically handled).</p>

<p>In the actor’s <code>receive</code> method, we match on</p>

<ul>
  <li><code>Request</code> message type, which use to then call <code>emitFrames()</code></li>
  <li>A custom <code>Continue</code> object, which also calls <code>emitFrames()</code></li>
  <li><code>Cancel</code> in order to know when to stop the actor.</li>
</ul>

<p>The <code>emitFrames()</code> method is a method that checks to see if the Actor is currently active (whether it has any subscribers), and if it is, grabs a frame and sends it to the <code>onNext</code> helper method from <code>ActorPublisher</code> to send a piece of data. It then checks if <code>totalDemand</code> (another <code>ActorPublisher</code> method) is greater than 0, and sends <em>itself</em> a <code>Continue</code> message, which invokes <code>emitFrames()</code> again. This somewhat convoluted way of sending data downstream is required because <code>grabber.grab()</code> is a blocking call, and we don’t want to block the Actor threadpool for too long at a time (this pattern is used by the built-in <a href="https://github.com/akka/akka/blob/master/akka-stream/src/main/scala/akka/stream/impl/io/InputStreamPublisher.scala#L43"><code>InputStreamPublisher</code></a>).</p>

<p>In order to make a <code>Source[Frame]</code>, we instantiate an instance of our actor, pass its <code>ActorRef</code> to a method that creates a <code>Publisher[Frame]</code>, and then pass the publisher to a method that makes a <code>Source[Frame]</code>.</p>

<p>For the purposes of keeping our API clean, we make it a private class and expose only a static method for creating a source.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Webcam Source[Frame] (WebcamSource.scala)</span> <a href="https://beachape.com/downloads/code/scala/WebcamSource.scala">download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
<span class="line-number">68</span>
<span class="line-number">69</span>
<span class="line-number">70</span>
<span class="line-number">71</span>
<span class="line-number">72</span>
<span class="line-number">73</span>
<span class="line-number">74</span>
<span class="line-number">75</span>
<span class="line-number">76</span>
<span class="line-number">77</span>
<span class="line-number">78</span>
<span class="line-number">79</span>
<span class="line-number">80</span>
<span class="line-number">81</span>
<span class="line-number">82</span>
<span class="line-number">83</span>
<span class="line-number">84</span>
<span class="line-number">85</span>
<span class="line-number">86</span>
<span class="line-number">87</span>
<span class="line-number">88</span>
<span class="line-number">89</span>
<span class="line-number">90</span>
<span class="line-number">91</span>
<span class="line-number">92</span>
<span class="line-number">93</span>
<span class="line-number">94</span>
<span class="line-number">95</span>
<span class="line-number">96</span>
<span class="line-number">97</span>
<span class="line-number">98</span>
<span class="line-number">99</span>
<span class="line-number">100</span>
<span class="line-number">101</span>
<span class="line-number">102</span>
<span class="line-number">103</span>
<span class="line-number">104</span>
<span class="line-number">105</span>
<span class="line-number">106</span>
<span class="line-number">107</span>
<span class="line-number">108</span>
<span class="line-number">109</span>
<span class="line-number">110</span>
<span class="line-number">111</span>
<span class="line-number">112</span>
<span class="line-number">113</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span></span><span class="k">package</span> <span class="nn">com.beachape.video</span>
</span><span class="line">
</span><span class="line"><span class="k">import</span> <span class="nn">akka.actor.</span><span class="o">{</span> <span class="nc">DeadLetterSuppression</span><span class="o">,</span> <span class="nc">Props</span><span class="o">,</span> <span class="nc">ActorSystem</span><span class="o">,</span> <span class="nc">ActorLogging</span> <span class="o">}</span>
</span><span class="line"><span class="k">import</span> <span class="nn">akka.stream.actor.ActorPublisher</span>
</span><span class="line"><span class="k">import</span> <span class="nn">akka.stream.actor.ActorPublisherMessage.</span><span class="o">{</span> <span class="nc">Cancel</span><span class="o">,</span> <span class="nc">Request</span> <span class="o">}</span>
</span><span class="line"><span class="k">import</span> <span class="nn">akka.stream.scaladsl.Source</span>
</span><span class="line"><span class="k">import</span> <span class="nn">org.bytedeco.javacpp.opencv_core._</span>
</span><span class="line"><span class="k">import</span> <span class="nn">org.bytedeco.javacv.</span><span class="o">{</span> <span class="nc">FrameGrabber</span><span class="o">,</span> <span class="nc">Frame</span> <span class="o">}</span>
</span><span class="line"><span class="k">import</span> <span class="nn">org.bytedeco.javacv.FrameGrabber.ImageMode</span>
</span><span class="line">
</span><span class="line"><span class="cm">/**</span>
</span><span class="line"><span class="cm"> * Created by Lloyd on 2/13/16.</span>
</span><span class="line"><span class="cm"> */</span>
</span><span class="line">
</span><span class="line"><span class="k">object</span> <span class="nc">Webcam</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">  <span class="cm">/**</span>
</span><span class="line"><span class="cm">   * Builds a Frame [[Source]]</span>
</span><span class="line"><span class="cm">   *</span>
</span><span class="line"><span class="cm">   * @param deviceId device ID for the webcam</span>
</span><span class="line"><span class="cm">   * @param dimensions</span>
</span><span class="line"><span class="cm">   * @param bitsPerPixel</span>
</span><span class="line"><span class="cm">   * @param imageMode</span>
</span><span class="line"><span class="cm">   * @param system ActorSystem</span>
</span><span class="line"><span class="cm">   * @return a Source of [[Frame]]s</span>
</span><span class="line"><span class="cm">   */</span>
</span><span class="line">  <span class="k">def</span> <span class="n">source</span><span class="o">(</span>
</span><span class="line">    <span class="n">deviceId</span><span class="k">:</span> <span class="kt">Int</span><span class="o">,</span>
</span><span class="line">    <span class="n">dimensions</span><span class="k">:</span> <span class="kt">Dimensions</span><span class="o">,</span>
</span><span class="line">    <span class="n">bitsPerPixel</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="nc">CV_8U</span><span class="o">,</span>
</span><span class="line">    <span class="n">imageMode</span><span class="k">:</span> <span class="kt">ImageMode</span> <span class="o">=</span> <span class="nc">ImageMode</span><span class="o">.</span><span class="nc">COLOR</span>
</span><span class="line">  <span class="o">)(</span><span class="k">implicit</span> <span class="n">system</span><span class="k">:</span> <span class="kt">ActorSystem</span><span class="o">)</span><span class="k">:</span> <span class="kt">Source</span><span class="o">[</span><span class="kt">Frame</span>, <span class="kt">Unit</span><span class="o">]</span> <span class="k">=</span> <span class="o">{</span>
</span><span class="line">    <span class="k">val</span> <span class="n">props</span> <span class="k">=</span> <span class="nc">Props</span><span class="o">(</span>
</span><span class="line">      <span class="k">new</span> <span class="nc">WebcamFramePublisher</span><span class="o">(</span>
</span><span class="line">        <span class="n">deviceId</span> <span class="k">=</span> <span class="n">deviceId</span><span class="o">,</span>
</span><span class="line">        <span class="n">imageWidth</span> <span class="k">=</span> <span class="n">dimensions</span><span class="o">.</span><span class="n">width</span><span class="o">,</span>
</span><span class="line">        <span class="n">imageHeight</span> <span class="k">=</span> <span class="n">dimensions</span><span class="o">.</span><span class="n">height</span><span class="o">,</span>
</span><span class="line">        <span class="n">bitsPerPixel</span> <span class="k">=</span> <span class="n">bitsPerPixel</span><span class="o">,</span>
</span><span class="line">        <span class="n">imageMode</span> <span class="k">=</span> <span class="n">imageMode</span>
</span><span class="line">      <span class="o">)</span>
</span><span class="line">    <span class="o">)</span>
</span><span class="line">    <span class="k">val</span> <span class="n">webcamActorRef</span> <span class="k">=</span> <span class="n">system</span><span class="o">.</span><span class="n">actorOf</span><span class="o">(</span><span class="n">props</span><span class="o">)</span>
</span><span class="line">    <span class="k">val</span> <span class="n">webcamActorPublisher</span> <span class="k">=</span> <span class="nc">ActorPublisher</span><span class="o">[</span><span class="kt">Frame</span><span class="o">](</span><span class="n">webcamActorRef</span><span class="o">)</span>
</span><span class="line">
</span><span class="line">    <span class="nc">Source</span><span class="o">.</span><span class="n">fromPublisher</span><span class="o">(</span><span class="n">webcamActorPublisher</span><span class="o">)</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line">
</span><span class="line">  <span class="c1">// Building a started grabber seems finicky if not synchronised; there may be some freaky stuff happening somewhere.</span>
</span><span class="line">  <span class="k">private</span> <span class="k">def</span> <span class="n">buildGrabber</span><span class="o">(</span>
</span><span class="line">    <span class="n">deviceId</span><span class="k">:</span> <span class="kt">Int</span><span class="o">,</span>
</span><span class="line">    <span class="n">imageWidth</span><span class="k">:</span> <span class="kt">Int</span><span class="o">,</span>
</span><span class="line">    <span class="n">imageHeight</span><span class="k">:</span> <span class="kt">Int</span><span class="o">,</span>
</span><span class="line">    <span class="n">bitsPerPixel</span><span class="k">:</span> <span class="kt">Int</span><span class="o">,</span>
</span><span class="line">    <span class="n">imageMode</span><span class="k">:</span> <span class="kt">ImageMode</span>
</span><span class="line">  <span class="o">)</span><span class="k">:</span> <span class="kt">FrameGrabber</span> <span class="o">=</span> <span class="n">synchronized</span> <span class="o">{</span>
</span><span class="line">    <span class="k">val</span> <span class="n">g</span> <span class="k">=</span> <span class="nc">FrameGrabber</span><span class="o">.</span><span class="n">createDefault</span><span class="o">(</span><span class="n">deviceId</span><span class="o">)</span>
</span><span class="line">    <span class="n">g</span><span class="o">.</span><span class="n">setImageWidth</span><span class="o">(</span><span class="n">imageWidth</span><span class="o">)</span>
</span><span class="line">    <span class="n">g</span><span class="o">.</span><span class="n">setImageHeight</span><span class="o">(</span><span class="n">imageHeight</span><span class="o">)</span>
</span><span class="line">    <span class="n">g</span><span class="o">.</span><span class="n">setBitsPerPixel</span><span class="o">(</span><span class="n">bitsPerPixel</span><span class="o">)</span>
</span><span class="line">    <span class="n">g</span><span class="o">.</span><span class="n">setImageMode</span><span class="o">(</span><span class="n">imageMode</span><span class="o">)</span>
</span><span class="line">    <span class="n">g</span><span class="o">.</span><span class="n">start</span><span class="o">()</span>
</span><span class="line">    <span class="n">g</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line">
</span><span class="line">  <span class="cm">/**</span>
</span><span class="line"><span class="cm">   * Actor that backs the Akka Stream source</span>
</span><span class="line"><span class="cm">   */</span>
</span><span class="line">  <span class="k">private</span> <span class="k">class</span> <span class="nc">WebcamFramePublisher</span><span class="o">(</span>
</span><span class="line">      <span class="n">deviceId</span><span class="k">:</span> <span class="kt">Int</span><span class="o">,</span>
</span><span class="line">      <span class="n">imageWidth</span><span class="k">:</span> <span class="kt">Int</span><span class="o">,</span>
</span><span class="line">      <span class="n">imageHeight</span><span class="k">:</span> <span class="kt">Int</span><span class="o">,</span>
</span><span class="line">      <span class="n">bitsPerPixel</span><span class="k">:</span> <span class="kt">Int</span><span class="o">,</span>
</span><span class="line">      <span class="n">imageMode</span><span class="k">:</span> <span class="kt">ImageMode</span>
</span><span class="line">  <span class="o">)</span> <span class="k">extends</span> <span class="nc">ActorPublisher</span><span class="o">[</span><span class="kt">Frame</span><span class="o">]</span> <span class="k">with</span> <span class="nc">ActorLogging</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">    <span class="k">private</span> <span class="k">implicit</span> <span class="k">val</span> <span class="n">ec</span> <span class="k">=</span> <span class="n">context</span><span class="o">.</span><span class="n">dispatcher</span>
</span><span class="line">
</span><span class="line">    <span class="c1">// Lazy so that nothing happens until the flow begins</span>
</span><span class="line">    <span class="k">private</span> <span class="k">lazy</span> <span class="k">val</span> <span class="n">grabber</span> <span class="k">=</span> <span class="n">buildGrabber</span><span class="o">(</span>
</span><span class="line">      <span class="n">deviceId</span> <span class="k">=</span> <span class="n">deviceId</span><span class="o">,</span>
</span><span class="line">      <span class="n">imageWidth</span> <span class="k">=</span> <span class="n">imageWidth</span><span class="o">,</span>
</span><span class="line">      <span class="n">imageHeight</span> <span class="k">=</span> <span class="n">imageHeight</span><span class="o">,</span>
</span><span class="line">      <span class="n">bitsPerPixel</span> <span class="k">=</span> <span class="n">bitsPerPixel</span><span class="o">,</span>
</span><span class="line">      <span class="n">imageMode</span> <span class="k">=</span> <span class="n">imageMode</span>
</span><span class="line">    <span class="o">)</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="n">receive</span><span class="k">:</span> <span class="kt">Receive</span> <span class="o">=</span> <span class="o">{</span>
</span><span class="line">      <span class="k">case</span> <span class="k">_:</span> <span class="kt">Request</span> <span class="o">=&gt;</span> <span class="n">emitFrames</span><span class="o">()</span>
</span><span class="line">      <span class="k">case</span> <span class="nc">Continue</span> <span class="k">=&gt;</span> <span class="n">emitFrames</span><span class="o">()</span>
</span><span class="line">      <span class="k">case</span> <span class="nc">Cancel</span> <span class="k">=&gt;</span> <span class="n">onCompleteThenStop</span><span class="o">()</span>
</span><span class="line">      <span class="k">case</span> <span class="n">unexpectedMsg</span> <span class="k">=&gt;</span> <span class="n">log</span><span class="o">.</span><span class="n">warning</span><span class="o">(</span><span class="s">s&quot;Unexpected message: </span><span class="si">$unexpectedMsg</span><span class="s">&quot;</span><span class="o">)</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="k">private</span> <span class="k">def</span> <span class="n">emitFrames</span><span class="o">()</span><span class="k">:</span> <span class="kt">Unit</span> <span class="o">=</span> <span class="o">{</span>
</span><span class="line">      <span class="k">if</span> <span class="o">(</span><span class="n">isActive</span> <span class="o">&amp;&amp;</span> <span class="n">totalDemand</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="cm">/*</span>
</span><span class="line"><span class="cm">          Grabbing a frame is a blocking I/O operation, so we don&#39;t send too many at once.</span>
</span><span class="line"><span class="cm">         */</span>
</span><span class="line">        <span class="n">grabFrame</span><span class="o">().</span><span class="n">foreach</span><span class="o">(</span><span class="n">onNext</span><span class="o">)</span>
</span><span class="line">        <span class="k">if</span> <span class="o">(</span><span class="n">totalDemand</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">          <span class="n">self</span> <span class="o">!</span> <span class="nc">Continue</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">      <span class="o">}</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="k">private</span> <span class="k">def</span> <span class="n">grabFrame</span><span class="o">()</span><span class="k">:</span> <span class="kt">Option</span><span class="o">[</span><span class="kt">Frame</span><span class="o">]</span> <span class="k">=</span> <span class="o">{</span>
</span><span class="line">      <span class="nc">Option</span><span class="o">(</span><span class="n">grabber</span><span class="o">.</span><span class="n">grab</span><span class="o">())</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line">
</span><span class="line">  <span class="k">private</span> <span class="k">case</span> <span class="k">object</span> <span class="nc">Continue</span> <span class="k">extends</span> <span class="nc">DeadLetterSuppression</span>
</span><span class="line">
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>We’ll also define a simple <code>Dimensions</code> case class to make things a bit clearer (keyword arguments FTW)</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Tuple-like class for holding dimensions (Dimensions.scala)</span> <a href="https://beachape.com/downloads/code/scala/Dimensions.scala">download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span></span><span class="cm">/**</span>
</span><span class="line"><span class="cm"> * Tuple-like class for holding width and height in pixels</span>
</span><span class="line"><span class="cm"> */</span>
</span><span class="line"><span class="k">case</span> <span class="k">class</span> <span class="nc">Dimensions</span><span class="o">(</span><span class="n">width</span><span class="k">:</span> <span class="kt">Int</span><span class="o">,</span> <span class="n">height</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="conversion">Conversion</h3>

<p>In order to begin processing our feed with OpenCV, we first need to transform our <code>Frame</code>, which is a JavaCV type, into a type that works with JavaCV’s wrapping of OpenCV’s main representation of images, the matrix, aka <code>Mat</code>.  Fortunately, JavaCV has a <code>OpenCVFrameConverter.ToMat</code> helper class that helps us do this.  Since the class uses a mutable private field for holding on to temporary results, it normally isn’t advisable to use it in multithreaded code unless we make new copies of it each time, but we can make it thread safe by binding it to a <code>ThreadLocal</code>.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Media conversion utility methods (MediaConversion.scala)</span> <a href="https://beachape.com/downloads/code/scala/MediaConversion.scala">download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span></span><span class="cm">/**</span>
</span><span class="line"><span class="cm"> * Holds conversion and transformation methods for media types</span>
</span><span class="line"><span class="cm"> */</span>
</span><span class="line"><span class="k">object</span> <span class="nc">MediaConversion</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">  <span class="c1">// Each thread gets its own greyMat for safety</span>
</span><span class="line">  <span class="k">private</span> <span class="k">val</span> <span class="n">frameToMatConverter</span> <span class="k">=</span> <span class="nc">ThreadLocal</span><span class="o">.</span><span class="n">withInitial</span><span class="o">(</span><span class="k">new</span> <span class="nc">Supplier</span><span class="o">[</span><span class="kt">OpenCVFrameConverter.ToMat</span><span class="o">]</span> <span class="o">{</span>
</span><span class="line">    <span class="k">def</span> <span class="n">get</span><span class="o">()</span><span class="k">:</span> <span class="kt">OpenCVFrameConverter.ToMat</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">OpenCVFrameConverter</span><span class="o">.</span><span class="nc">ToMat</span>
</span><span class="line">  <span class="o">})</span>
</span><span class="line">
</span><span class="line">  <span class="cm">/**</span>
</span><span class="line"><span class="cm">   * Returns an OpenCV Mat for a given JavaCV frame</span>
</span><span class="line"><span class="cm">   */</span>
</span><span class="line">  <span class="k">def</span> <span class="n">toMat</span><span class="o">(</span><span class="n">frame</span><span class="k">:</span> <span class="kt">Frame</span><span class="o">)</span><span class="k">:</span> <span class="kt">Mat</span> <span class="o">=</span> <span class="n">frameToMatConverter</span><span class="o">.</span><span class="n">get</span><span class="o">().</span><span class="n">convert</span><span class="o">(</span><span class="n">frame</span><span class="o">)</span>
</span><span class="line">
</span><span class="line">  <span class="cm">/**</span>
</span><span class="line"><span class="cm">   * Returns a JavaCV Frame for a given OpenCV Mat</span>
</span><span class="line"><span class="cm">   */</span>
</span><span class="line">  <span class="k">def</span> <span class="n">toFrame</span><span class="o">(</span><span class="n">mat</span><span class="k">:</span> <span class="kt">Mat</span><span class="o">)</span><span class="k">:</span> <span class="kt">Frame</span> <span class="o">=</span> <span class="n">frameToMatConverter</span><span class="o">.</span><span class="n">get</span><span class="o">().</span><span class="n">convert</span><span class="o">(</span><span class="n">mat</span><span class="o">)</span>
</span><span class="line">
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="manipulation">Manipulation</h3>

<p>Once we have our <code>Mat</code>, we can use OpenCV methods to do manipulation.  One thing though, is that (perhaps for efficiency) by default, these methods mutate the original object. This can cause strange issues in a multi-threaded, multi-path Flow graph, so instead of using them as is, we make use of the convenient <code>clone</code> method before doing our flip so that the original matrix remains as-is.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span> (Flip.scala)</span> <a href="https://beachape.com/downloads/code/scala/Flip.scala">download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span></span><span class="k">object</span> <span class="nc">Flip</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">  <span class="cm">/**</span>
</span><span class="line"><span class="cm">   * Clones the image and returns a flipped version of the given image matrix along the y axis (horizontally)</span>
</span><span class="line"><span class="cm">   */</span>
</span><span class="line">  <span class="k">def</span> <span class="n">horizontal</span><span class="o">(</span><span class="n">mat</span><span class="k">:</span> <span class="kt">Mat</span><span class="o">)</span><span class="k">:</span> <span class="kt">Mat</span> <span class="o">=</span> <span class="o">{</span>
</span><span class="line">    <span class="k">val</span> <span class="n">cloned</span> <span class="k">=</span> <span class="n">mat</span><span class="o">.</span><span class="n">clone</span><span class="o">()</span>
</span><span class="line">    <span class="n">flip</span><span class="o">(</span><span class="n">cloned</span><span class="o">,</span> <span class="n">cloned</span><span class="o">,</span> <span class="mi">1</span><span class="o">)</span>
</span><span class="line">    <span class="n">cloned</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line">
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="hooking-things-up">Hooking things up</h3>

<p>Now that we have all our components, all we need to do is create a simple application that instantiates all our components and hooks them all together:</p>

<ol>
  <li>Instantiate our <code>ActorSystem</code> and <code>Materializer</code></li>
  <li>Instantiate a <code>CanvasFrame</code></li>
  <li>Instantiate our <code>Source[Frame]</code></li>
  <li>Define our <code>Graph</code> by using our components to transform it</li>
  <li>Run the graph</li>
</ol>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Webcam feed app (WebcamWindow.scala)</span> <a href="https://beachape.com/downloads/code/scala/WebcamWindow.scala">download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span></span><span class="k">object</span> <span class="nc">WebcamWindow</span> <span class="k">extends</span> <span class="nc">App</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">  <span class="k">implicit</span> <span class="k">val</span> <span class="n">system</span> <span class="k">=</span> <span class="nc">ActorSystem</span><span class="o">()</span>
</span><span class="line">  <span class="k">implicit</span> <span class="k">val</span> <span class="n">materializer</span> <span class="k">=</span> <span class="nc">ActorMaterializer</span><span class="o">()</span>
</span><span class="line">
</span><span class="line">  <span class="k">val</span> <span class="n">canvas</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">CanvasFrame</span><span class="o">(</span><span class="s">&quot;Webcam&quot;</span><span class="o">)</span>
</span><span class="line">  <span class="c1">//  Set Canvas frame to close on exit</span>
</span><span class="line">  <span class="n">canvas</span><span class="o">.</span><span class="n">setDefaultCloseOperation</span><span class="o">(</span><span class="n">javax</span><span class="o">.</span><span class="n">swing</span><span class="o">.</span><span class="nc">JFrame</span><span class="o">.</span><span class="nc">EXIT_ON_CLOSE</span><span class="o">)</span>
</span><span class="line">
</span><span class="line">  <span class="k">val</span> <span class="n">imageDimensions</span> <span class="k">=</span> <span class="nc">Dimensions</span><span class="o">(</span><span class="n">width</span> <span class="k">=</span> <span class="mi">640</span><span class="o">,</span> <span class="n">height</span> <span class="k">=</span> <span class="mi">480</span><span class="o">)</span>
</span><span class="line">  <span class="k">val</span> <span class="n">webcamSource</span> <span class="k">=</span> <span class="nc">Webcam</span><span class="o">.</span><span class="n">source</span><span class="o">(</span><span class="n">deviceId</span> <span class="k">=</span> <span class="mi">0</span><span class="o">,</span> <span class="n">dimensions</span> <span class="k">=</span> <span class="n">imageDimensions</span><span class="o">)</span>
</span><span class="line">
</span><span class="line">  <span class="k">val</span> <span class="n">graph</span> <span class="k">=</span> <span class="n">webcamSource</span>
</span><span class="line">    <span class="o">.</span><span class="n">map</span><span class="o">(</span><span class="nc">MediaConversion</span><span class="o">.</span><span class="n">toMat</span><span class="o">)</span> <span class="c1">// most OpenCV manipulations require a Matrix</span>
</span><span class="line">    <span class="o">.</span><span class="n">map</span><span class="o">(</span><span class="nc">Flip</span><span class="o">.</span><span class="n">horizontal</span><span class="o">)</span>
</span><span class="line">    <span class="o">.</span><span class="n">map</span><span class="o">(</span><span class="nc">MediaConversion</span><span class="o">.</span><span class="n">toFrame</span><span class="o">)</span> <span class="c1">// convert back to a frame</span>
</span><span class="line">    <span class="o">.</span><span class="n">map</span><span class="o">(</span><span class="n">canvas</span><span class="o">.</span><span class="n">showImage</span><span class="o">)</span>
</span><span class="line">    <span class="o">.</span><span class="n">to</span><span class="o">(</span><span class="nc">Sink</span><span class="o">.</span><span class="n">ignore</span><span class="o">)</span>
</span><span class="line">
</span><span class="line">  <span class="n">graph</span><span class="o">.</span><span class="n">run</span><span class="o">()</span>
</span><span class="line">
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Looking at the code, one of the rewards of using the stream processing model over the procedureal approach might jump out at you: the near 1 to 1 correspondence that the graph definition has with our earlier diagram.</p>

<h2 id="conclusion">Conclusion</h2>

<p>So, with that we should now have a very simple app shows what your webcam sees, flipped so that when you move left, the image moves with you.  We’ve done it by declaring a custom Akka Stream <code>Source</code> and transforming it a little bit before shoving it onto the screen.</p>

<p>In the next post, we will look at how to do something a bit more complex: face detection using OpenCV.</p>

<p><strong>Note</strong> the code for this post is <a href="https://github.com/lloydmeta/scala-akka-cv-part1">on Github</a></p>

<h3 id="credits">Credits</h3>

<ol>
  <li><a href="https://chimpler.wordpress.com/2014/11/18/playing-with-opencv-in-scala-to-do-face-detection-with-haarcascade-classifier-using-a-webcam/">Playing with OpenCV in Scala to do face detection with Haarcascade classifier using a webcam</a></li>
</ol>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OpenCV SBT Plugin]]></title>
    <link href="https://beachape.com/blog/2016/03/05/opencv-sbt-plugin/"/>
    <updated>2016-03-05T00:30:00+09:00</updated>
    <id>https://beachape.com/blog/2016/03/05/opencv-sbt-plugin</id>
    <content type="html"><![CDATA[<p>OpenCV is arguably the defacto free, open-source computer vision library, but setting it up for usage in a JVM project can be hard because OpenCV itself is written in C++, so there are a bunch of system-dependent things that you need to download/compile/install before you can use it.</p>

<p><a href="https://github.com/bytedeco/javacv">JavaCV</a>, written by <a href="http://bytedeco.org/">Bytedeco</a> is a library that makes it more bearable to use OpenCV from JVM projects by providing a bunch of wrapper classes and logic around OpenCV (there’s a lot more to it, see their page for details).</p>

<p>Still, because JavaCV depends on <a href="https://github.com/bytedeco/javacpp-presets">JavaCPP</a> for common and OpenCV C++ wrappers, and JavaCPP requires you to set your target platform (what platform you want to run on), I thought getting started could be easier still.</p>

<p><!-- more --></p>

<p>After taking a look at <a href="https://github.com/chimpler/blog-scala-javacv/blob/master/build.sbt#L19">this Github project</a>, I created an SBT plugin, <a href="https://github.com/lloydmeta/sbt-opencv">SBT-OpenCV</a>, that allows you to add just one line to your <code>project/plugins.sbt</code> to begin playing around with OpenCV:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span></span><span class="n">addSbtPlugin</span><span class="o">(</span><span class="s">&quot;com.beachape&quot;</span> <span class="o">%</span> <span class="s">&quot;sbt-opencv&quot;</span> <span class="o">%</span> <span class="s">&quot;1.4&quot;</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The following is a list of SBT setting keys that you can set in order to customise the behaviour of the plugin:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span></span><span class="o">*</span> <span class="n">`javaCVPlatform`</span><span class="k">:</span> <span class="kt">The</span> <span class="kt">platform</span> <span class="kt">that</span> <span class="kt">you</span> <span class="kt">want</span> <span class="kt">to</span> <span class="kt">compile</span> <span class="kt">for</span> <span class="o">(</span><span class="kt">defaults</span> <span class="kt">to</span> <span class="kt">the</span> <span class="kt">platform</span> <span class="kt">of</span> <span class="kt">the</span> <span class="kt">current</span> <span class="kt">computer</span><span class="o">)</span><span class="kt">.</span> <span class="kt">You</span> <span class="kt">can</span> <span class="kt">also</span> <span class="kt">set</span> <span class="kt">this</span> <span class="kt">via</span> <span class="kt">the</span> <span class="err">&quot;</span><span class="kt">sbt.javacv.platform</span><span class="err">&quot;</span> <span class="kt">System</span> <span class="kt">Property</span>
</span><span class="line"><span class="o">*</span> <span class="n">`javaCppVersion`</span><span class="k">:</span> <span class="kt">Version</span> <span class="kt">of</span> <span class="kt">Java</span> <span class="kt">CPP</span> <span class="kt">that</span> <span class="kt">you</span> <span class="kt">want</span> <span class="kt">to</span> <span class="kt">use</span>
</span><span class="line"><span class="o">*</span> <span class="n">`javaCppPresetsVersion`</span><span class="k">:</span>  <span class="kt">Version</span> <span class="kt">of</span> <span class="kt">Java</span> <span class="kt">CPP</span> <span class="kt">Presets</span> <span class="kt">that</span> <span class="kt">you</span> <span class="kt">want</span> <span class="kt">to</span> <span class="kt">use</span>
</span><span class="line"><span class="o">*</span> <span class="n">`javaCVVersion`</span><span class="k">:</span> <span class="kt">Version</span> <span class="kt">of</span> <span class="kt">Java</span> <span class="kt">CV</span> <span class="kt">that</span> <span class="kt">you</span> <span class="kt">want</span> <span class="kt">to</span> <span class="kt">use</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>I think <code>javaCVPlatform</code> is the one that will be most interesting, since you may want to compile JARs for different target platforms; for a list of supported strings, look at the classifiers supported by <a href="https://github.com/bytedeco/javacpp-presets">JavaCPP presets</a>, or work out the different strings that can result from <a href="https://github.com/bytedeco/javacpp/blob/master/src/main/java/org/bytedeco/javacpp/Loader.java#L65-L95">the JavaCPP Loader</a>.</p>

<p>For example:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span></span><span class="n">javaCppPlatform</span> <span class="o">:=</span> <span class="s">&quot;android-arm&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Feel free to try it out and submit issues, ideas, and PRs at the <a href="https://github.com/lloydmeta/sbt-opencv">Github page</a> :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Slim Play App]]></title>
    <link href="https://beachape.com/blog/2015/07/25/slim-play-app/"/>
    <updated>2015-07-25T20:50:00+09:00</updated>
    <id>https://beachape.com/blog/2015/07/25/slim-play-app</id>
    <content type="html"><![CDATA[<p><a href="https://www.playframework.com/">Play</a> is one of two officially-supported web frameworks from Typesafe, the company behind Scala (the other is <a href="http://spray.io/">Spray</a>). It runs on its own webserver, is non-blocking, and encourages the use of idiomatic Scala. It is often compared with Rails because of its emphasis on convention over configuration and because it’s a full-on framework that comes with most of the bells and whistles needed to build a full-featured webapp. Spray is considered by many to be the defacto API-centric alternative to Play, offering a Sinatra-esque DSL for routing and being slimmer to boot (from a files + LOC perspective).</p>

<p>After looking around  I began suspecting that Play comes with the ability to be slimmed down. By combining the <a href="https://www.playframework.com/documentation/2.4.x/ScalaSirdRouter">String Interpolating Routing DSL</a> and <a href="https://www.playframework.com/documentation/2.4.x/ScalaCompileTimeDependencyInjection">Compile-time dependency injection</a> of Play 2.4, I was able to build a Scala app that would give Sinatra a run for its money in terms of the whole brevity thing.</p>

<p><img class="center" src="https://beachape.com/images/duderino.jpeg" width="350" height="350" title="'The Dude is focused on the whole brevity thing'" /></p>

<!-- more -->

<h3 id="methodology">Methodology</h3>

<p>All I did was:</p>

<ol>
  <li>Use activator to generate a new Play app (<code>$ activator new slim-play play-scala</code>)</li>
  <li>Delete the auto-generated controller, public, and view directories (won’t be using them)</li>
  <li>Create a <code>AppLoader.scala</code> file in the <code>./app</code> directory, which holds an ApplicationLoader and the router, which is
  super simple:
  &lt;div class=&#8217;bogus-wrapper&#8217;&gt;<notextile><figure class="code">&lt;figcaption&gt;<span>Play app in 38 lines including imports and comments (AppLoader.scala)</span> <a href="https://beachape.com/downloads/code/scala/AppLoader.scala">download</a>&lt;/figcaption&gt;
 &lt;div class=&#8221;highlight&#8221;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#8221;gutter&#8221;&gt;&lt;pre class=&#8221;line-numbers&#8221;&gt;<span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span></figure></notextile></li>
</ol>
<p>&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#8217;code&#8217;&gt;&lt;pre&gt;<code class="scala"><span class="line"><span></span><span class="k">import</span> <span class="nn">play.api.ApplicationLoader.Context</span>
</span><span class="line"><span class="k">import</span> <span class="nn">play.api._</span>
</span><span class="line"><span class="k">import</span> <span class="nn">play.api.libs.concurrent.Execution.Implicits._</span>
</span><span class="line"><span class="k">import</span> <span class="nn">play.api.mvc.Results._</span>
</span><span class="line"><span class="k">import</span> <span class="nn">play.api.mvc._</span>
</span><span class="line"><span class="k">import</span> <span class="nn">play.api.routing.Router</span>
</span><span class="line"><span class="k">import</span> <span class="nn">play.api.routing.sird._</span>
</span><span class="line">
</span><span class="line"><span class="k">import</span> <span class="nn">scala.concurrent.Future</span>
</span><span class="line">
</span><span class="line"><span class="k">class</span> <span class="nc">AppLoader</span> <span class="k">extends</span> <span class="nc">ApplicationLoader</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="n">load</span><span class="o">(</span><span class="n">context</span><span class="k">:</span> <span class="kt">Context</span><span class="o">)</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">BuiltInComponentsFromContext</span><span class="o">(</span><span class="n">context</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">    <span class="cm">/**</span>
</span><span class="line"><span class="cm">     * Simple &amp; fairly self-explanatory router</span>
</span><span class="line"><span class="cm">     */</span>
</span><span class="line">    <span class="k">val</span> <span class="n">router</span> <span class="k">=</span> <span class="nc">Router</span><span class="o">.</span><span class="n">from</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">      <span class="c1">// Essentially copied verbatim from the SIRD example</span>
</span><span class="line">      <span class="k">case</span> <span class="nc">GET</span><span class="o">(</span><span class="n">p</span><span class="s">&quot;/hello/$to&quot;</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="nc">Action</span> <span class="o">{</span>
</span><span class="line">        <span class="nc">Ok</span><span class="o">(</span><span class="s">s&quot;Hello </span><span class="si">$to</span><span class="s">&quot;</span><span class="o">)</span>
</span><span class="line">      <span class="o">}</span>
</span><span class="line">
</span><span class="line">      <span class="cm">/*</span>
</span><span class="line"><span class="cm">       Use Action.async to return a Future result (sqrt can be intense :P)</span>
</span><span class="line"><span class="cm">       Note the use of double(num) to bind only numbers (built-in :)</span>
</span><span class="line"><span class="cm">        */</span>
</span><span class="line">      <span class="k">case</span> <span class="nc">GET</span><span class="o">(</span><span class="n">p</span><span class="s">&quot;/sqrt/${double(num)}&quot;</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="nc">Action</span><span class="o">.</span><span class="n">async</span> <span class="o">{</span>
</span><span class="line">        <span class="nc">Future</span> <span class="o">{</span>
</span><span class="line">          <span class="nc">Ok</span><span class="o">(</span><span class="nc">Math</span><span class="o">.</span><span class="n">sqrt</span><span class="o">(</span><span class="n">num</span><span class="o">).</span><span class="n">toString</span><span class="o">)</span>
</span><span class="line">        <span class="o">}</span>
</span><span class="line">      <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="o">}</span>
</span><span class="line">  <span class="o">}.</span><span class="n">application</span>
</span><span class="line">
</span><span class="line"><span class="o">}</span>
</span></code>&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/notextile&gt;&lt;/div&gt;
4. Add <code>play.application.loader=AppLoader</code> to <code>./conf/application.conf</code> so that Play knows to load our custom app (that
  contains our simple router)</p>

<p>The end result is a small, one-file Play app powered by a custom router and compile-time dependency injection. For more information, take a look at the <a href="https://github.com/lloydmeta/slim-play">slim-play</a> repo on Github.</p>

<h3 id="conclusion">Conclusion</h3>

<p>Play is an awesome framework; scalable, idiomatic (type-safe, threadsafe), well documented, and well supported by Typesafe and a great community. I’ve been happily using it to build various-sized apps for the better part of 2.5 years. If you want to have a well-structured app, it comes out of the box configured to provide that. However, it also has the surprising ability to shed weight and turn into a slim API-focused engine.</p>

<h3 id="a-word-sinatra-clones-in-scala">A word Sinatra-clones in Scala</h3>

<p>Ruby is fairly ubiquitous when it comes to server-side web programming.  Rails aside, <a href="http://www.sinatrarb.com/">Sinatra</a> has made its mark on the world and made a name for itself as <em>the</em> DSL to mimic, with imitators in Ruby (Cuba), Python (Bottle, Flask), PHP (Laravel), Scala (Scalatra and its wrapper Skinny), and Javascript (Express).  Thanks to its simple and easy to follow DSL routing, it’s gained a large following as well.</p>

<p>That said, blindly copying Sinatra’s DSL in other languages may be problematic, because Sinatra’s DSL relies on the Rack execution model (one request at a time per process/thread), and embraces Ruby’s spirit of developer happiness at the cost of performance.  This is especially true in Scala, where the language was designed for concurrency and the community places heavy emphasis on adhering to a non-blocking execution model, eschewing mutation of data.</p>

<p>For example, I filed an issue with <a href="https://github.com/scalatra/scalatra/issues/513">Scalatra</a> a few months ago that was largely caused by indiscriminate copying of Sinatra’s DSL, as well being based on the Servlet async API (an intro to <a href="http://petercipov.com/not-only-servlet/">why we should move away from Servlets</a>).  Among other things, it led to:</p>

<ul>
  <li>Loss of thread-safety, meaning you can no longer take advantage of Scala’s strength in concurrency for scaling purposes (a lot of Scala libraries also return Futures when dealing with I/O, as they should).</li>
  <li>Loss of static typing, which is  terrible at design-time (IDE assistence and refactoring perspective), as well as runtime (performance).  Scalatra apps are written in non-idiomatic Scala because the routing implementation takes an <code>Any</code> as the result of a route definition, including…yes, shutting down the Servlet container. In addition, it encourages you to mutate existing data (setting statuses on responses).</li>
</ul>

<p>If you’re coming to Scala from Ruby and what you want is to build a small app using Sinatra-esque DSL in Scala, I would highly suggest evaluating Spray or slim-Play (as presented here) before choosing to go with Scalatra and friends: “Thar be dragons” in the long-run.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Enumeratum: Sealed Trait Enums for Scala]]></title>
    <link href="https://beachape.com/blog/2015/02/11/enumeratum-sealed-trait-enums-for-scala/"/>
    <updated>2015-02-11T16:47:00+09:00</updated>
    <id>https://beachape.com/blog/2015/02/11/enumeratum-sealed-trait-enums-for-scala</id>
    <content type="html"><![CDATA[<p>If you’ve been working with Scala for a while, you might have come across a few “problems” with the built in <code>Enumeration</code> that’s provided out-of-the-box.  This is especially true if you have colleagues who come from a Java background and yearn for the Java-style <code>Enum</code> that gave them lots of power and flexibility.</p>

<p>A quick search on the internet for “Scala enumeration alternative” will yield a lot of results (perhaps on StackOverflow) where people have cooked up their own implementation of enumerations, usually built on <code>sealed traits</code>. Personally, I found most of them to be either too inconvenient to use, too over-powered, or too complicated, and I really didn’t want to have to copy-paste enum-related code into all my projects.</p>

<p>Thus <a href="https://github.com/lloydmeta/enumeratum">Enumeratum</a> was born.</p>

<!-- more -->

<p><a href="https://github.com/lloydmeta/enumeratum">Enumeratum</a> aims to be simple to use, idiomatic, small (LoC), yet flexible enough to allow Scala devs to make power enums if they so wish. It is also Mavenised for easy import into any project.</p>

<p>To use it, simply <a href="https://github.com/lloydmeta/enumeratum#sbt">add it as a dependency</a></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span></span><span class="k">val</span> <span class="n">enumeratumVersion</span> <span class="k">=</span> <span class="s">&quot;1.4.2&quot;</span>  <span class="c1">// latest version number can be found on the Maven Central version badge on the Github repo.</span>
</span><span class="line"><span class="n">libraryDependencies</span> <span class="o">++=</span> <span class="nc">Seq</span><span class="o">(</span>
</span><span class="line">    <span class="s">&quot;com.beachape&quot;</span> <span class="o">%%</span> <span class="s">&quot;enumeratum&quot;</span> <span class="o">%</span> <span class="n">enumeratumVersion</span><span class="o">,</span>
</span><span class="line">    <span class="s">&quot;com.beachape&quot;</span> <span class="o">%%</span> <span class="s">&quot;enumeratum-play&quot;</span> <span class="o">%</span> <span class="n">enumeratumVersion</span> <span class="c1">// if you are using Play and want to avoid boilerplate</span>
</span><span class="line"><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Then</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Enumeratum example code (enumeratum_example.scala)</span> <a href="https://beachape.com/downloads/code/scala/enumeratum_example.scala">download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span></span><span class="c1">// For use in a REPL</span>
</span><span class="line">
</span><span class="line"><span class="k">import</span> <span class="nn">enumeratum._</span>
</span><span class="line">
</span><span class="line"><span class="k">sealed</span> <span class="k">trait</span> <span class="nc">Phone</span> <span class="o">{</span>
</span><span class="line">  <span class="k">def</span> <span class="n">call</span><span class="o">(</span><span class="n">number</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span><span class="k">:</span> <span class="kt">String</span>
</span><span class="line"><span class="o">}</span> <span class="k">extends</span> <span class="nc">EnumEntry</span>
</span><span class="line">
</span><span class="line"><span class="k">case</span> <span class="k">object</span> <span class="nc">Phone</span> <span class="k">extends</span> <span class="nc">Enum</span><span class="o">[</span><span class="kt">Phone</span><span class="o">]</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">  <span class="k">case</span> <span class="k">object</span> <span class="nc">Android</span> <span class="k">extends</span> <span class="nc">Phone</span> <span class="o">{</span>
</span><span class="line">    <span class="k">def</span> <span class="n">call</span><span class="o">(</span><span class="n">number</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span> <span class="k">=</span> <span class="s">&quot;This is Larry Page.&quot;</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line">
</span><span class="line">  <span class="k">case</span> <span class="k">object</span> <span class="nc">Iphone</span> <span class="k">extends</span> <span class="nc">Phone</span> <span class="o">{</span>
</span><span class="line">    <span class="k">def</span> <span class="n">call</span><span class="o">(</span><span class="n">number</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span> <span class="k">=</span> <span class="s">&quot;This is Steve Jobs.&quot;</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line">
</span><span class="line">  <span class="k">case</span> <span class="k">object</span> <span class="nc">WindowsPhone</span> <span class="k">extends</span> <span class="nc">Phone</span> <span class="o">{</span>
</span><span class="line">    <span class="k">def</span> <span class="n">call</span><span class="o">(</span><span class="n">number</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span> <span class="k">=</span> <span class="s">&quot;This is Bill Gates.&quot;</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line">
</span><span class="line">  <span class="k">val</span> <span class="n">values</span> <span class="k">=</span> <span class="n">findValues</span>
</span><span class="line">
</span><span class="line"><span class="o">}</span>
</span><span class="line">
</span><span class="line"><span class="k">import</span> <span class="nn">Phone._</span>
</span><span class="line">
</span><span class="line"><span class="c1">// Use as needed.</span>
</span><span class="line">
</span><span class="line"><span class="k">val</span> <span class="n">myPhone</span> <span class="k">=</span> <span class="nc">Iphone</span>
</span><span class="line">
</span><span class="line"><span class="c1">// Get exhaustive match warnings</span>
</span><span class="line"><span class="k">def</span> <span class="n">rate</span><span class="o">(</span><span class="n">phone</span><span class="k">:</span> <span class="kt">Phone</span><span class="o">)</span><span class="k">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="n">phone</span> <span class="k">match</span> <span class="o">{</span>
</span><span class="line">  <span class="k">case</span> <span class="nc">Android</span> <span class="k">=&gt;</span> <span class="s">&quot;Great!&quot;</span>
</span><span class="line">  <span class="k">case</span> <span class="nc">Iphone</span> <span class="k">=&gt;</span> <span class="s">&quot;Awesome!&quot;</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line">
</span><span class="line"><span class="cm">/*</span>
</span><span class="line"><span class="cm">&lt;console&gt;:17: warning: match may not be exhaustive.</span>
</span><span class="line"><span class="cm">It would fail on the following input: WindowsPhone</span>
</span><span class="line"><span class="cm">*/</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>You get nice things like exhaustive match warnings at compile-time, enums with methods, no more Enum-value type erasure, and other nice stuff.</p>

<h2 id="how-it-works">How it works</h2>

<p>Some of the solutions for custom enums out there are based on macros that reflect at compile time using <code>knownDirectSubclasses</code> to find enum values, but as of writing, there is a <a href="https://issues.scala-lang.org/browse/SI-7046">2 year old bug</a> for that method.</p>

<p>As a result, <a href="https://github.com/lloydmeta/enumeratum">Enumeratum</a> uses another method of finding enum values: looking in an enclosed object to find the enum values. The macro behind <code>findValues</code> does this for you so that you don’t have to maintain your own collection of enum values, which is both error-prone and tedious.</p>

<h2 id="play">Play</h2>

<p>If you want to use <a href="https://github.com/lloydmeta/enumeratum">Enumeratum</a> in a Play app, you may as well add <a href="https://github.com/lloydmeta/enumeratum#play-2"><code>enumeratum-play</code></a> as a dependency instead so that you can use the <code>PlayEnum[A]</code> trait (instead of <code>Enum[A]</code>), which will give you nice things like QueryStringBinders, PathBinders, form mappers, and Json Reads/Writes/Formats. To make use of this integration, just extend from <code>PlayEnum</code> instead of <code>Enum</code> in the above example.</p>

<p>This means less boilerplate in your project, which is A Good Thing, right?</p>

<h2 id="limitations">Limitations</h2>

<p>There are a few limitations with Enumeratum:</p>

<ul>
  <li>~~Ordinality is not taken care of. From what I’ve seen, this is one of the least-used functions of Enums in general. That said, nothing is stoping you from defining an <code>Ordering</code> in your companion object for your sealed trait.~~</li>
  <li>Because the Enum values are case objects, they will be inferred to have their own specific type, which may cause problems with compilation for typeclasses that are not contravariant. In that case, simply help the compiler by adding a type (e.g. <code>val myPhone: Phone = Iphone</code>)</li>
  <li>~~The method <code>withName</code> relies on the <code>toString</code> method of the Enum values for lookup. Make sure to override this if you have specific requirements.~~</li>
</ul>

<p><strong>Update 2016/04/22</strong> Crossed out a bunch of limitations that no longer apply.</p>

<h2 id="enjoy">Enjoy</h2>

<p>I hope <a href="https://github.com/lloydmeta/enumeratum">Enumeratum</a> can help you out of your <code>Enumeration</code> woes. Have a look, play around, and send a PR or two !</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Scala Unless-when via Macros]]></title>
    <link href="https://beachape.com/blog/2014/08/11/scala-unless-when-via-macros/"/>
    <updated>2014-08-11T18:41:00+09:00</updated>
    <id>https://beachape.com/blog/2014/08/11/scala-unless-when-via-macros</id>
    <content type="html"><![CDATA[<p>Last week, I decided to take a stab at learning <a href="http://scalamacros.org/">Scala macros</a>. I had played around with macros when I wrote Scheme for a living (yes, believe it or not, these places exist…and existed long before Clojure made Lisp hip again), but the complexity of Scala’s macros always put me off (if you don’t believe me, check out the example given in the offical docs for a simple <a href="http://docs.scala-lang.org/overviews/macros/overview.html#a-complete-example">print macro</a>).</p>

<p>In Scala, things are not so simple, but with the introduction of <a href="docs.scala-lang.org/overviews/macros/quasiquotes.html">quasiquotes</a> and some refinements brought by Scala 2.11, things are smoother. Still, for a guy like me, the documentation was both sparse and DRY. Since I learn best when I’m actively engaged in building something, I decided to try writing the <a href="http://clhs.lisp.se/Body/m_when_.htm">run-of-the-mill unless-when</a> macros in Scala.</p>

<p>This post aims to summarise my journey towards implementing <a href="https://github.com/lloydmeta/unless-when">unless-when</a> and hopefully along the way make Scala macros accessible, at least at an introductory level, for Most People. There are already a few Scala macro blog posts out there but another one can’t hurt.</p>

<!-- more -->

<p><em>Note</em>: this blog post aims to explore macros as they are usable in Scala 2.10+. It also focuses on implementing macros with quasiquotes, as using them is more human-friendly than manually constructing Abstract Syntax Trees (AST).</p>

<h2 id="goal">Goal</h2>
<p>For those unfamiliar with <code>when</code> and <code>unless</code>: the basic idea is that <code>when</code> is an <code>if</code> without an else, and <code>unless</code> is it’s opposite. The main reason for their existence is to make code more readable by adding a tiny bit of syntatic sugar. Without further ado, an example of what we want to achieve</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span></span><span class="cm">/*</span>
</span><span class="line"><span class="cm">  This should replace if (true) { block of code }</span>
</span><span class="line"><span class="cm">*/</span>
</span><span class="line"><span class="n">when</span> <span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">  <span class="c1">// block of code</span>
</span><span class="line"><span class="o">}</span>
</span><span class="line">
</span><span class="line"><span class="cm">/*</span>
</span><span class="line"><span class="cm">  This should replace if (!true) { do something }</span>
</span><span class="line"><span class="cm">*/</span>
</span><span class="line"><span class="n">unless</span> <span class="o">(</span><span class="kc">false</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">  <span class="c1">// block of code</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Since we’re writing Scala, it would be nice if these constructs returned something useful; using the <a href="http://www.scala-lang.org/api/current/scala/Option.html">Option</a> monad seems reasonable: If the block is run, we return the result in a Some and otherwise return a None. <a href="http://danielwestheide.com/blog/2012/12/19/the-neophytes-guide-to-scala-part-5-the-option-type.html">This tutorial</a> is a good guide for Options in case you are unfamiliar with the concept.</p>

<h2 id="macro-y-basics">Macro-y basics</h2>

<p>Taking a look at the documentation, you will quickly notice the general pattern for implementing a simple Scala macro</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span></span><span class="k">import</span> <span class="nn">scala.language.experimental.macros</span>
</span><span class="line"><span class="k">import</span> <span class="nn">scala.reflect.macros._</span>
</span><span class="line">
</span><span class="line"><span class="k">object</span> <span class="nc">Example</span> <span class="o">{</span>
</span><span class="line">  <span class="k">def</span> <span class="n">meth</span><span class="o">[</span><span class="kt">A</span><span class="o">](</span><span class="n">x</span><span class="k">:</span> <span class="kt">A</span><span class="o">)</span><span class="k">:</span> <span class="kt">A</span> <span class="o">=</span> <span class="n">macro</span> <span class="n">implRef</span><span class="o">[</span><span class="kt">A</span><span class="o">]</span>
</span><span class="line">
</span><span class="line"><span class="o">...</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="n">implRef</span><span class="o">[</span><span class="kt">A:</span> <span class="kt">c.WeakTypeTag</span><span class="o">](</span><span class="n">c</span><span class="k">:</span> <span class="kt">Context</span><span class="o">)(</span><span class="n">x</span><span class="k">:</span> <span class="kt">c.Expr</span><span class="o">[</span><span class="kt">A</span><span class="o">])</span><span class="k">:</span> <span class="kt">c.Expr</span><span class="o">[</span><span class="kt">A</span><span class="o">]</span> <span class="k">=</span> <span class="o">...</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>What does this mean? Let’s break it down:</p>

<ul>
  <li><code>import scala.language.experimental.macros</code> and <code>import scala.reflect.macros._</code> are standard Scala imports that allow us to play around with macros. What’s not listed in this example is the declaration that your project depends on <code>scala-reflect</code>. You can do so by adding the following to your build.sbt:
    <ul>
      <li><code>libraryDependencies ++= Seq("org.scala-lang" % "scala-reflect" % scalaVersion.value)</code></li>
    </ul>
  </li>
  <li><code>def meth[A](x: A): A</code> this is still just normal Scala code that we would normally see. It simply declares a method belonging to the Example singleton that is parameterised on the input type, and we want to make sure that the output type matches this type (e.g. if we invoke <code>meth</code> with an <code>Int</code>, we expect the output to be an <code>Int</code> because that is the contract of the method). For more info on writing parametric polymorphism, please check out <a href="Parametric polymorphism">this guide</a>:</li>
  <li><code>macro implRef[A]</code> this is where things start looking macro-ish. The <code>macro</code> keyword lets the compiler know that the body of this method is going to be implemented via a macro definition, in this case <code>implRef</code>.</li>
  <li><code>def implRef[A: c.WeakTypeTag](c: Context)(x: c.Expr[A]): c.Expr[A]</code> .. wow. This itself needs to be broken down:
    <ul>
      <li><code>def implRef[A: c.WeakTypeTag]</code> The first part <code>def implRef</code> is still standard Scala</li>
      <li><code>(c: Context)</code> (we’ll cover <code>[A: c.WeakTypeTag]</code> in a bit). In this part, <code>(c: Context)</code> declares that the first argument passed to the macro implementation must be a Context. This is a requirement for playing around with Scala macros, and is actually passed by the compiler when it invokes macro expansion, so that you can write code that accesses the compiler API.</li>
      <li><code>[A: c.WeakTypeTag]</code> This is a bit mischievous because we combine Scala-shorthand for typeclasses with macro-magic. This probably deserves a post in and of itself, but for now, please consider this to mean “A is a type parameter passed during macro invocation, but we must ALSO have in scope a WeakTypeTag coming from the Context that is parameterised to type A, which can be written in full as c.WeakTypeTag[A]”. This WeakTypeTag business is required so that we can pass along the type parameter from <code>meth</code> into the <code>implRef</code> macro expansion implementation, allowing us to have a type parameterised macro definition.
        <ul>
          <li>For more information on type classes and the shorthand we use here, I highly recommend this <a href="danielwestheide.com/blog/2013/02/06/the-neophytes-guide-to-scala-part-12-type-classes.html">blog post on type classes</a></li>
        </ul>
      </li>
      <li><code>(x: c.Expr[A])</code> means that the first non-Context parameter of the macro implementation (remember that the first one is always taken by the compiler and must be a Context) is <code>x</code> and it is a <code>c.Expr[A]</code>. It is important that the name of the parameter matches that used in the invoking method (see how <code>meth</code> also has <code>x</code> as the first parameter). <code>c.Expr</code> is type of object that wraps the abstract syntax tree that represents the input to the invoking function, and it is typed to A.
        <ul>
          <li><em>NOTE:</em> since the argument’s type is <code>c.Expr</code> (essentially an abstract syntax tree), any expression passed to the method <code>meth</code> actually may not get invoked or evaluated even though it is not a <a href="http://daily-scala.blogspot.jp/2009/12/by-name-parameter-to-function.html">pass-by-name parameter</a>. In other words, while the macro is expanding, it <strong>acts</strong> like a pass-by name parameter and is “lazy”.</li>
        </ul>
      </li>
      <li><code>: c.Expr[A]</code> all this means is that the result of the macro expansion is also a <code>c.Expr</code> type parameterised to A.</li>
    </ul>
  </li>
</ul>

<h2 id="quasiquotes">Quasiquotes</h2>
<p>Quasiquotes are not a Scala-exclusive construct, and a Google search will show that they are used in other languages that support metaprogramming, like Scheme.</p>

<p>In short, they offer the macro programmer an easy way to manipulate or create abstract syntax trees without having to build them manually. This makes them extremely helpful in Scala because:
  1. Scala syntax does not map to ASTs easily like Lisps
  2. Scala is typed, which means your manually-built AST also needs typing…which wraps non-macro-land types (notice how a normal type parameter like <code>[A]</code> becomes <code>c.Expr[A]</code> … that’s twice as many characters  !)</p>

<p>Quasiquotes allow us to use <a href="http://docs.scala-lang.org/overviews/core/string-interpolation.html">string-interpolation-like syntax</a> to interpolate elements into a tree as we define it.</p>

<p>For example:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span></span><span class="n">scala</span><span class="o">&gt;</span> <span class="k">val</span> <span class="n">aquasiquote</span> <span class="k">=</span> <span class="n">q</span><span class="s">&quot;a quasiquote&quot;</span>
</span><span class="line"><span class="n">aquasiquote</span><span class="k">:</span> <span class="kt">universe.Select</span> <span class="o">=</span> <span class="n">a</span><span class="o">.</span><span class="n">quasiquote</span>
</span><span class="line">
</span><span class="line"><span class="n">scala</span><span class="o">&gt;</span> <span class="k">val</span> <span class="n">tree</span> <span class="k">=</span> <span class="n">q</span><span class="s">&quot;i am { $aquasiquote }&quot;</span>
</span><span class="line"><span class="n">tree</span><span class="k">:</span> <span class="kt">universe.Tree</span> <span class="o">=</span> <span class="n">i</span><span class="o">.</span><span class="n">am</span><span class="o">(</span><span class="n">a</span><span class="o">.</span><span class="n">quasiquote</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>The above example was taken from the <a href="http://docs.scala-lang.org/overviews/quasiquotes/intro.html">official documentation on quasiquotes</a>, which I highly recommend you take a look at if you find the rest of this post hard to follow.</p>

<h2 id="implementation">Implementation</h2>
<p>For <code>when</code>, we know that we roughly want the following:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span></span><span class="n">when</span> <span class="o">(</span><span class="n">someCondition</span><span class="o">)</span> <span class="o">{</span> <span class="n">result</span> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>To expand via our macro into the following (yes we are using an inline if .. if you don’t like it, pretend we didn’t)</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span></span><span class="k">if</span> <span class="o">(</span><span class="n">someCondition</span><span class="o">)</span> <span class="nc">Some</span><span class="o">(</span><span class="n">result</span><span class="o">)</span> <span class="k">else</span> <span class="nc">None</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Using what we know, the following should work:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span></span><span class="k">import</span> <span class="nn">scala.language.experimental.macros</span>
</span><span class="line"><span class="k">import</span> <span class="nn">scala.reflect.macros._</span>
</span><span class="line">
</span><span class="line"><span class="k">object</span> <span class="nc">Example</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="n">when</span><span class="o">[</span><span class="kt">A</span><span class="o">](</span><span class="n">p</span><span class="k">:</span> <span class="kt">Boolean</span><span class="o">)(</span><span class="n">f</span><span class="k">:</span> <span class="kt">A</span><span class="o">)</span><span class="k">:</span> <span class="kt">Option</span><span class="o">[</span><span class="kt">A</span><span class="o">]</span> <span class="k">=</span> <span class="n">macro</span> <span class="n">whenImp</span><span class="o">[</span><span class="kt">A</span><span class="o">]</span>
</span><span class="line">
</span><span class="line">  <span class="k">def</span> <span class="n">whenImp</span><span class="o">[</span><span class="kt">A:</span> <span class="kt">c.WeakTypeTag</span><span class="o">](</span><span class="n">c</span><span class="k">:</span> <span class="kt">Context</span><span class="o">)(</span><span class="n">p</span><span class="k">:</span> <span class="kt">c.Expr</span><span class="o">[</span><span class="kt">Boolean</span><span class="o">])(</span><span class="n">f</span><span class="k">:</span> <span class="kt">c.Expr</span><span class="o">[</span><span class="kt">A</span><span class="o">])</span><span class="k">:</span> <span class="kt">c.Expr</span><span class="o">[</span><span class="kt">Option</span><span class="o">[</span><span class="kt">A</span><span class="o">]]</span> <span class="k">=</span> <span class="o">{</span>
</span><span class="line">    <span class="k">import</span> <span class="nn">c.universe._</span>
</span><span class="line">    <span class="n">c</span><span class="o">.</span><span class="nc">Expr</span><span class="o">[</span><span class="kt">Option</span><span class="o">[</span><span class="kt">A</span><span class="o">]](</span><span class="n">q</span><span class="s">&quot;if ($p) Some($f) else None&quot;</span><span class="o">)</span>
</span><span class="line">  <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Implementing <code>unless</code> is left as an exercise for the reader :)</p>

<h2 id="trying-it-out">Trying it out</h2>

<p>Putting the above into a Scala REPL (you will probably need to use <code>:paste</code> mode) will prove that it works.</p>

<p>For example:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span></span><span class="n">scala</span><span class="o">&gt;</span> <span class="k">import</span> <span class="nn">Example._</span>
</span><span class="line"><span class="k">import</span> <span class="nn">Example._</span>
</span><span class="line">
</span><span class="line"><span class="n">when</span><span class="o">(</span><span class="kc">true</span><span class="o">)(</span><span class="mi">3</span><span class="o">)</span>
</span><span class="line"><span class="n">res1</span><span class="k">:</span> <span class="kt">Option</span><span class="o">[</span><span class="kt">Int</span><span class="o">]</span> <span class="k">=</span> <span class="nc">Some</span><span class="o">(</span><span class="mi">3</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Also, remember that since our <code>when</code> is backed by a macro, the <code>f</code> argument (our block) passed to the second parameter list, behaves “lazily” and won’t execute if our predicate<code>p</code> returns false. This is because when <code>when</code> is invoked, the compiler knows to pass the entire AST for that block parameter (well, wrapped inside a <code>c.Expr</code>) to our macro, which interpolates the it into the final tree.</p>

<p>For the performance-conscious, this means that we get “lazy” for free; that is, without using Scala’s call-by-name parameter feature, which, although nice to use in many cases, <em>does</em> incur some run-time performance penalty because it is implemented by instantiating anonymous classes (see <a href="http://infoscience.epfl.ch/record/128135/files/paper.pdf">this paper</a> for more information about the performance cost of call-by-name parameters .. among other performance-related Scala things).</p>

<h2 id="unless-when-library">unless-when library</h2>
<p>I’ve put the above into a library and included trailing variants of <code>when</code> and <code>unless</code> as bonuses (Rubyists should be familiar with these).</p>

<p>You can find the lib <a href="https://github.com/lloydmeta/unless-when">here on Github</a>. It is fully tested and Mavenised for easy out-of-the-box usage.</p>

<h2 id="conclusion">Conclusion</h2>
<p>I hope this post has been helpful in giving a simple, but full example of how to get started with macros in Scala. If you spot any errors, have questions or suggestions, please feel free to leave a comment!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RxScala and Schwatcher]]></title>
    <link href="https://beachape.com/blog/2014/05/03/rxscala-and-schwatcher/"/>
    <updated>2014-05-03T17:44:00+09:00</updated>
    <id>https://beachape.com/blog/2014/05/03/rxscala-and-schwatcher</id>
    <content type="html"><![CDATA[<p>A couple days ago, I released v0.1.3 of <a href="https://github.com/lloydmeta/schwatcher">Schwatcher</a>, which introduces the ability to monitor events on file paths using a composable <a href="https://rx.codeplex.com/">Rx Observable</a> interface. “What does that even mean and why should you care?” is what this blog post tries to answer.</p>

<p>The original version of Schwatcher allowed you to tell a <code>MonitorActor</code> what callback you want to fire when a <a href="http://docs.oracle.com/javase/7/docs/api/java/nio/file/StandardWatchEventKinds.html">certain type of event</a> happened on a file path. This is fine and there are people out there using it in production as is. The limitation to this approach is that (at least by default), the events are difficult to treat as data and thus difficult to compose.</p>

<p>With <a href="https://rx.codeplex.com/">Rx</a>, we turn file path events into an asynchronous stream/channel. Essentially, you tell a <code>RxMonitor</code> object what path and event type you want to monitor and when an event happens, it will get pushed into its <code>observable</code> (the stream). You can then choose to filter, map, or fold over this data stream, creating new data streams. If you wish to cause side-effects, you can add one or more <code>observer</code>s to these data streams.</p>

<!-- more -->

<p><em>Note</em>: this blog post applies to v0.1.3 of Schwatcher, which uses v0.18.1 of RxScala. Future versions may introduce breaking changes that invalidate the examples in this blog post.</p>

<h2 id="example">Example</h2>

<p>Suppose we have the following directory structure:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">directory1
</span><span class="line">  - directoryFile1</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Let’s set up an <code>RxMonitor</code> object to monitor for file creation and modifications events in <code>directory1</code> (note: all operations on <code>RxMonitor</code> objects are thread-safe).</p>

<p>While we’re at it, let’s grab the base <code>observable</code> from the monitor as well. Note that this <code>Observable</code> will, according to the <code>registerPath</code> and <code>unregisterPath</code> calls made to its parent <code>RxMonitor</code>, push all <code>EventAtPath</code>s to its <code>Observer</code>s. More on what an <code>Observer</code> is later, but for now, think of an <code>Observable</code> as a data stream and an <code>Observer</code> as an object gets pushed new objects from the <code>Observable</code> that it is, well, observing.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span></span><span class="k">import</span> <span class="nn">com.beachape.filemanagement.RxMonitor</span>
</span><span class="line"><span class="k">import</span> <span class="nn">com.beachape.filemanagement.Messages.EventAtPath</span>
</span><span class="line"><span class="k">import</span> <span class="nn">java.nio.file.Paths</span>
</span><span class="line"><span class="k">import</span> <span class="nn">java.nio.file.StandardWatchEventKinds._</span>
</span><span class="line"><span class="k">import</span> <span class="nn">rx.lang.scala.Observer</span>
</span><span class="line">
</span><span class="line"><span class="k">val</span> <span class="n">monitor</span> <span class="k">=</span> <span class="nc">RxMonitor</span><span class="o">()</span>
</span><span class="line"><span class="k">val</span> <span class="n">observable</span> <span class="k">=</span> <span class="n">monitor</span><span class="o">.</span><span class="n">observable</span>
</span><span class="line"><span class="k">val</span> <span class="n">directory1</span> <span class="k">=</span> <span class="nc">Paths</span> <span class="n">get</span> <span class="s">&quot;/Users/lloyd/Desktop/directory1&quot;</span>
</span><span class="line">
</span><span class="line"><span class="n">monitor</span><span class="o">.</span><span class="n">registerPath</span><span class="o">(</span><span class="nc">ENTRY_MODIFY</span><span class="o">,</span> <span class="n">directory1</span><span class="o">)</span>
</span><span class="line"><span class="n">monitor</span><span class="o">.</span><span class="n">registerPath</span><span class="o">(</span><span class="nc">ENTRY_CREATE</span><span class="o">,</span> <span class="n">directory1</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Let’s create 2 more <code>Observables</code>. Let’s make one called <code>createsOnly</code> that will only care about create events in the directory and another one called <code>scalaSourceCreatesOnly</code> that only cares about create events for files ending in <code>.scala</code>. <strong>Notice</strong> that we’re composing here :)</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span></span><span class="k">val</span> <span class="n">createsOnly</span> <span class="k">=</span> <span class="n">observable</span><span class="o">.</span><span class="n">filter</span><span class="o">(</span><span class="k">_</span><span class="o">.</span><span class="n">event</span> <span class="o">==</span> <span class="nc">ENTRY_CREATE</span><span class="o">)</span>
</span><span class="line"><span class="k">val</span> <span class="n">scalaSourceCreatesOnly</span> <span class="k">=</span> <span class="n">createsOnly</span><span class="o">.</span><span class="n">filter</span><span class="o">(</span><span class="k">_</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">toString</span><span class="o">.</span><span class="n">endsWith</span><span class="o">(</span><span class="s">&quot;.scala&quot;</span><span class="o">))</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>Now, let’s create some basic <code>Observers</code> that we can pass to the <code>subscribe</code> method of our new <code>Observable</code>s. An <code>Observer</code> at minimum implements an onNext function, which takes an element that will be pushed to it from the <code>Observable</code> that it subscribes to and returns nothing (<code>Unit</code>). It may optionally implement onError (a function which takes a <code>Throwable</code> as an argument and returns nothing) and onCompleted (0 argument function that is called when the <code>Observable</code> it is subscribed to is finished and will no longer send further objects):</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>attach observers (attachObservers.scala)</span> <a href="https://beachape.com/downloads/code/scala/attachObservers.scala">download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span></span><span class="k">val</span> <span class="n">createAndModifyObserver</span> <span class="k">=</span> <span class="nc">Observer</span><span class="o">[</span><span class="kt">EventAtPath</span><span class="o">](</span><span class="n">onNext</span> <span class="k">=</span> <span class="o">{</span> <span class="n">event</span> <span class="k">=&gt;</span> <span class="n">println</span><span class="o">(</span><span class="s">s&quot;Something was created or modified: </span><span class="si">$event</span><span class="s">&quot;</span><span class="o">)})</span>
</span><span class="line"><span class="k">val</span> <span class="n">createOnlyObserver</span> <span class="k">=</span> <span class="nc">Observer</span><span class="o">[</span><span class="kt">EventAtPath</span><span class="o">](</span><span class="n">onNext</span> <span class="k">=</span> <span class="o">{</span> <span class="n">event</span> <span class="k">=&gt;</span> <span class="n">println</span><span class="o">(</span><span class="s">s&quot;Something was created: </span><span class="si">$event</span><span class="s">&quot;</span><span class="o">)})</span>
</span><span class="line">
</span><span class="line"><span class="n">observable</span><span class="o">.</span><span class="n">subscribe</span><span class="o">(</span><span class="n">createAndModifyObserver</span><span class="o">)</span>
</span><span class="line"><span class="n">createsOnly</span><span class="o">.</span><span class="n">subscribe</span><span class="o">(</span><span class="n">createOnlyObserver</span><span class="o">)</span>
</span><span class="line"><span class="cm">/*</span>
</span><span class="line"><span class="cm"> * The same as</span>
</span><span class="line"><span class="cm"> * {{{</span>
</span><span class="line"><span class="cm"> * val createScalaOnlyObserver = Observer[EventAtPath](onNext = { event =&gt; println(s&quot;A Scala source file was created: $event&quot;)})</span>
</span><span class="line"><span class="cm"> * scalaSourceCreatesOnly.subscribe(createScalaOnlyObserver)</span>
</span><span class="line"><span class="cm"> * }}}</span>
</span><span class="line"><span class="cm"> *</span>
</span><span class="line"><span class="cm"> * The same as declaring an Observer separately and attaching it via #subscribe (as seen above),</span>
</span><span class="line"><span class="cm"> * since Observer as a type is just a way of binding 3 different functions, onNext, onCompleted, and onError</span>
</span><span class="line"><span class="cm"> *</span>
</span><span class="line"><span class="cm"> */</span>
</span><span class="line"><span class="n">scalaSourceCreatesOnly</span><span class="o">.</span><span class="n">subscribe</span><span class="o">(</span><span class="n">onNext</span> <span class="k">=</span> <span class="o">{</span> <span class="n">event</span> <span class="k">=&gt;</span> <span class="n">println</span><span class="o">(</span><span class="s">s&quot;A Scala source file was created: </span><span class="si">$event</span><span class="s">&quot;</span><span class="o">)})</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Now let’s make stuff happen in another terminal.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span></span>$ ~/Desktop/directory1: touch hello
</span><span class="line">$ ~/Desktop/directory1: <span class="nb">echo</span> lol &gt;&gt; hello
</span><span class="line">$ ~/Desktop/directory1: touch speedy.scala
</span><span class="line">$ ~/Desktop/directory1: <span class="nb">echo</span> <span class="s1">&#39;println(&quot;hmm&quot;)&#39;</span> &gt;&gt; speedy.scala
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The following will be outputted</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span></span>Something was created or modified: EventAtPath<span class="o">(</span>ENTRY_CREATE,/Users/lloyd/Desktop/directory1/hello<span class="o">)</span>
</span><span class="line">Something was created: EventAtPath<span class="o">(</span>ENTRY_CREATE,/Users/lloyd/Desktop/directory1/hello<span class="o">)</span>
</span><span class="line">Something was created or modified: EventAtPath<span class="o">(</span>ENTRY_MODIFY,/Users/lloyd/Desktop/directory1/hello<span class="o">)</span>
</span><span class="line">Something was created or modified: EventAtPath<span class="o">(</span>ENTRY_CREATE,/Users/lloyd/Desktop/directory1/speedy.scala<span class="o">)</span>
</span><span class="line">Something was created: EventAtPath<span class="o">(</span>ENTRY_CREATE,/Users/lloyd/Desktop/directory1/speedy.scala<span class="o">)</span>
</span><span class="line">A Scala <span class="nb">source</span> file was created: EventAtPath<span class="o">(</span>ENTRY_CREATE,/Users/lloyd/Desktop/directory1/speedy.scala<span class="o">)</span>
</span><span class="line">Something was created or modified: EventAtPath<span class="o">(</span>ENTRY_MODIFY,/Users/lloyd/Desktop/directory1/speedy.scala<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Lastly, since we’re done, let’s call the <code>stop()</code> method on the <code>RxMonitor</code> object so that subscribed <code>Observers</code> are notified and we stop the underlying <code>MonitorActor</code> as well. Cleaning up is A Good Thing (TM).</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span></span><span class="n">monitor</span><span class="o">.</span><span class="n">stop</span><span class="o">()</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="conclusion">Conclusion</h2>

<p>I hope this post has demonstrated the power of using RxScala’s <code>Observable</code> as an abstraction of asynchronous events into a tangible data structure, and how using it through Schwatcher might simplify the process of building your own applications. If you have any questions or spot any mistakes, please feel free to leave a comment.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Schwatcher v0.1.3 Released]]></title>
    <link href="https://beachape.com/blog/2014/05/02/schwatcher-v0-dot-1-3-released/"/>
    <updated>2014-05-02T00:10:00+09:00</updated>
    <id>https://beachape.com/blog/2014/05/02/schwatcher-v0-dot-1-3-released</id>
    <content type="html"><![CDATA[<p>Version 0.1.3 of Schwatcher has been released.</p>

<p>This version brings a new Observable interface that exposes a “stream” (or channel) of <code>EventAtPath</code>s that can be composed. Using this interface, you no longer need to register callbacks - you simply register paths and get notifications for events on them either by subscribing to the Observable or by composing.</p>

<p>For more information on how to use Observables (especially how they compose in awesome ways), checkout the <a href="https://rx.codeplex.com/">Rx homepage</a></p>

<p>Example usage:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span></span><span class="k">import</span> <span class="nn">com.beachape.filemanagement.RxMonitor</span>
</span><span class="line"><span class="k">import</span> <span class="nn">java.io.</span><span class="o">{</span><span class="nc">FileWriter</span><span class="o">,</span> <span class="nc">BufferedWriter</span><span class="o">}</span>
</span><span class="line">
</span><span class="line"><span class="k">import</span> <span class="nn">java.nio.file.Paths</span>
</span><span class="line"><span class="k">import</span> <span class="nn">java.nio.file.StandardWatchEventKinds._</span>
</span><span class="line">
</span><span class="line"><span class="k">val</span> <span class="n">monitor</span> <span class="k">=</span> <span class="nc">RxMonitor</span><span class="o">()</span>
</span><span class="line"><span class="k">val</span> <span class="n">observable</span> <span class="k">=</span> <span class="n">monitor</span><span class="o">.</span><span class="n">observable</span>
</span><span class="line">
</span><span class="line"><span class="k">val</span> <span class="n">subscription</span> <span class="k">=</span> <span class="n">observable</span><span class="o">.</span><span class="n">subscribe</span><span class="o">(</span>
</span><span class="line">  <span class="n">onNext</span> <span class="k">=</span> <span class="o">{</span> <span class="n">p</span> <span class="k">=&gt;</span> <span class="n">println</span><span class="o">(</span><span class="s">s&quot;Something was modified in a file mufufu: </span><span class="si">$p</span><span class="s">&quot;</span><span class="o">)},</span>
</span><span class="line">  <span class="n">onError</span> <span class="k">=</span> <span class="o">{</span> <span class="n">t</span> <span class="k">=&gt;</span> <span class="n">println</span><span class="o">(</span><span class="n">t</span><span class="o">)},</span>
</span><span class="line">  <span class="n">onCompleted</span> <span class="k">=</span> <span class="o">{</span> <span class="o">()</span> <span class="k">=&gt;</span> <span class="n">println</span><span class="o">(</span><span class="s">&quot;Monitor has been shut down&quot;</span><span class="o">)</span> <span class="o">}</span>
</span><span class="line"><span class="o">)</span>
</span><span class="line">
</span><span class="line"><span class="k">val</span> <span class="n">desktopFile</span> <span class="k">=</span> <span class="nc">Paths</span> <span class="n">get</span> <span class="s">&quot;/Users/lloyd/Desktop/test&quot;</span>
</span><span class="line">
</span><span class="line"><span class="n">monitor</span><span class="o">.</span><span class="n">registerPath</span><span class="o">(</span><span class="nc">ENTRY_MODIFY</span><span class="o">,</span> <span class="n">desktopFile</span><span class="o">)</span>
</span><span class="line">
</span><span class="line"><span class="nc">Thread</span><span class="o">.</span><span class="n">sleep</span><span class="o">(</span><span class="mi">100</span><span class="o">)</span>
</span><span class="line">
</span><span class="line"><span class="c1">//modify a monitored file</span>
</span><span class="line"><span class="k">val</span> <span class="n">writer</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">BufferedWriter</span><span class="o">(</span><span class="k">new</span> <span class="nc">FileWriter</span><span class="o">(</span><span class="n">desktopFile</span><span class="o">.</span><span class="n">toFile</span><span class="o">))</span>
</span><span class="line"><span class="n">writer</span><span class="o">.</span><span class="n">write</span><span class="o">(</span><span class="s">&quot;Theres text in here wee!!&quot;</span><span class="o">)</span>
</span><span class="line"><span class="n">writer</span><span class="o">.</span><span class="n">close</span>
</span><span class="line">
</span><span class="line"><span class="c1">// #=&gt; Something was modified in a file mufufu: /Users/lloyd/Desktop/test</span>
</span><span class="line">
</span><span class="line"><span class="c1">// stop monitoring</span>
</span><span class="line"><span class="n">monitor</span><span class="o">.</span><span class="n">stop</span><span class="o">()</span>
</span><span class="line">
</span><span class="line"><span class="c1">// #=&gt; Monitor has been shut down</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Relevant links:
- <a href="https://github.com/lloydmeta/schwatcher">Github page with how to install and example usage</a>
- <a href="https://github.com/lloydmeta/schwatcher/releases/tag/v0.1.3">Release page</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Schwatcher v0.1.0 Released]]></title>
    <link href="https://beachape.com/blog/2014/03/06/schwatcher-v0-dot-1-0-released/"/>
    <updated>2014-03-06T21:45:00+09:00</updated>
    <id>https://beachape.com/blog/2014/03/06/schwatcher-v0-dot-1-0-released</id>
    <content type="html"><![CDATA[<p>Version 0.1.0 of Schwatcher has been released.</p>

<p>Changes:</p>

<ul>
  <li>Thanks to <a href="https://github.com/lloydmeta/schwatcher/pull/31">this pull request</a> from <a href="https://github.com/georgeOsdDev">georgeOsdDev</a>, modifiers can be used when registering callbacks</li>
  <li>Upgrade to 2.3.0 of Akka</li>
</ul>

<p>Relevent info:</p>

<ul>
  <li><a href="https://github.com/lloydmeta/schwatcher">Schwatcher Github repo</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Backporting Ruby From Trusty to Oneiric]]></title>
    <link href="https://beachape.com/blog/2014/01/14/backporting-ruby-from-trusty-to-oneiric/"/>
    <updated>2014-01-14T22:35:00+09:00</updated>
    <id>https://beachape.com/blog/2014/01/14/backporting-ruby-from-trusty-to-oneiric</id>
    <content type="html"><![CDATA[<h2 id="goal">Goal</h2>
<p>Create a backported Ruby 1.9.3p484 Ubuntu package. For the purposes of this post, we will assume that you are OK with not creating a signed package (required if uploading to launchpad). If you wish to upload to launchpad (for example to share your backport with the world), it may be useful for you to <a href="http://opensourcehacker.com/2013/03/20/how-to-backport-packages-on-ubuntu-linux/">check out this site</a> after reading through this guide.</p>

<h2 id="motivation">Motivation</h2>
<p>At my day job, I had to upgrade Ruby on very old production boxes that were running Oneiric AMD64. Upgrading the OS was a chore that would be happening later but we needed to start using the latest Ruby as soon as possible.</p>

<p>Unfortunately, there is no Ruby 1.9.3p484 Debian package readily available for Oneiric, not even as a backport.</p>

<!-- more -->

<h2 id="basic-requirements">Basic requirements</h2>
<ul>
  <li>A reasonable Ubuntu environment. Use Vagrant (and its dependencies, such as Virtualbox) if you are on OSX</li>
  <li>Basic *Nix knowledge (command line editors and various tools)</li>
</ul>

<h2 id="overview">Overview</h2>
<p>The idea is to use tools readily available on Ubuntu and Debian to create a backported package. These include <code>backportpackage</code> and <code>pbuilder</code> among others.</p>

<p>Without going into too much detail, <code>backportpackage</code> helps us “prep” (e.g. generating .dsc files with conventional names for backported packages) our existing target package on to be backported. <code>pbuilder</code> is a tool that sets up a clean chroot environment (via <a href="https://wiki.debian.org/Debootstrap">debootstrap</a>) to build Debian packages. See the <a href="http://manpages.ubuntu.com/manpages/oneiric/man1/backportpackage.1.html">man page for backportpackage</a> and the <a href="https://wiki.ubuntu.com/PbuilderHowto">pbuilder howto page</a> for more information.</p>

<p>Normally, <code>backportpackage</code> and <code>pbuilder</code> are very straightforward to use when backporting packages that do not have many dependencies. However, when porting the Ruby 1.9.3p484 package from Trusty to Oneiric, quite a bit of “massaging” needed to be done, mostly because of the significant time difference between the two Ubuntu releases.</p>

<h2 id="procedure">Procedure</h2>
<ol>
  <li>Have a reasonable Ubuntu environment ready. It doesn’t matter which version you are currently on because we will be using the aforementioned tools to download, prep and build packages. It may be a good idea to run <code>$ sudo apt-get update</code></li>
  <li><code>$ sudo apt-get install ubuntu-dev-tools</code> to install Ubuntu dev tools on your host machine. This will install</li>
  <li>If you are using a version of Ubuntu newer than Precise, you may be able to skip this step. <code>$ wget http://ubuntu.wikimedia.org/ubuntu//pool/universe/u/ubuntu-dev-tools/ubuntu-dev-tools_0.143_all.deb &amp;&amp; sudo dpkg -i ubuntu-dev-tools_0.143_all.deb </code> This installs a newer version of <code>backportpackages</code> that allows us to not sign our packages</li>
  <li><code>$ mkdir -p ~/backport_workdir/ruby191 &amp;&amp; cd ~/backport_workdir/ruby191</code> to create and go to our working directory</li>
  <li><code>$ backportpackage --dont-sign -s trusty -d oneiric -w . ruby1.9.1</code> to download the newest (at time or writing) <a href="http://packages.ubuntu.com/source/trusty/ruby1.9.1">Ruby 1.9.3p484 package</a> and create the prepped .dsc files for backporting.</li>
  <li><strong>Important</strong> Open up <code>ruby1.9.1_1.9.3.484-1ubuntu2~ubuntu11.10.1.dsc</code> with your preferred editor and remove the versioning constraints on <code>debhelper</code> and <code>cdbs</code> in the <code>Build-Depends</code> line. Theoretically you could backport dependencies as well and put them in a local apt-get repo, but these particular packages are nasty in that they have many further dependencies and since in this case, the default versions that come with Oneiric are fine, we can safely remove these constraints.</li>
  <li><code>$ sudo apt-get install pbuilder</code> to install <code>pbuilder</code>
8.
  Create a <code>~/.pbuilderrc</code> file with the following contents. This is a preference file for <code>pbuilder</code> and the following configuration will allow us to easily toggle between different distributions of Ubuntu and architectures when using it to build packages. Credit to <a href="http://www.tolaris.com/2009/03/31/backporting-debian-packages-with-pbuilder/">tolaris.com</a></li>
</ol>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>pbuilderrc  (pbuilderrc)</span> <a href="https://beachape.com/downloads/code/pbuilder/pbuilderrc">download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span></span>: <span class="si">${</span><span class="nv">DIST</span><span class="p">:=</span><span class="k">$(</span>lsb_release --short --codename<span class="k">)</span><span class="si">}</span>
</span><span class="line">: <span class="si">${</span><span class="nv">ARCH</span><span class="p">:=</span><span class="k">$(</span>dpkg --print-architecture<span class="k">)</span><span class="si">}</span>
</span><span class="line"><span class="nv">NAME</span><span class="o">=</span><span class="s2">&quot;</span><span class="nv">$DIST</span><span class="s2">-</span><span class="nv">$ARCH</span><span class="s2">&quot;</span>
</span><span class="line"><span class="nv">DISTRIBUTION</span><span class="o">=</span><span class="s2">&quot;</span><span class="nv">$DIST</span><span class="s2">&quot;</span>
</span><span class="line"><span class="nv">DEBOOTSTRAPOPTS</span><span class="o">=(</span><span class="s2">&quot;--arch&quot;</span> <span class="s2">&quot;</span><span class="nv">$ARCH</span><span class="s2">&quot;</span> <span class="s2">&quot;</span><span class="si">${</span><span class="nv">DEBOOTSTRAPOPTS</span><span class="p">[@]</span><span class="si">}</span><span class="s2">&quot;</span><span class="o">)</span>
</span><span class="line"><span class="nv">BASETGZ</span><span class="o">=</span><span class="s2">&quot;`dirname </span><span class="nv">$BASETGZ</span><span class="s2">`/</span><span class="nv">$NAME</span><span class="s2">-base.tgz&quot;</span>
</span><span class="line"><span class="nv">BUILDRESULT</span><span class="o">=</span><span class="s2">&quot;/var/cache/pbuilder/</span><span class="nv">$NAME</span><span class="s2">/result/&quot;</span>
</span><span class="line"><span class="nv">APTCACHE</span><span class="o">=</span><span class="s2">&quot;/var/cache/pbuilder/</span><span class="nv">$NAME</span><span class="s2">/aptcache/&quot;</span>
</span><span class="line"><span class="c1"># Don&#39;t rebuild source files (.diff.gz, .dsc), or list them in .changes</span>
</span><span class="line"><span class="c1"># See Ubuntu bug 118181</span>
</span><span class="line"><span class="nv">DEBBUILDOPTS</span><span class="o">=</span><span class="s2">&quot;-b -d&quot;</span>
</span><span class="line">
</span><span class="line"><span class="k">case</span> <span class="s2">&quot;</span><span class="nv">$DIST</span><span class="s2">&quot;</span> in
</span><span class="line">    oneiric<span class="p">|</span>trusty<span class="p">|</span>lucid<span class="p">|</span>karmic<span class="p">|</span>jaunty<span class="p">|</span>intrepid<span class="p">|</span>hardy<span class="p">|</span>dapper<span class="o">)</span> <span class="c1"># ubuntu specific</span>
</span><span class="line">        <span class="nv">MIRRORSITE</span><span class="o">=</span><span class="s2">&quot;http://archive.ubuntu.com/ubuntu/&quot;</span>
</span><span class="line">        <span class="nv">COMPONENTS</span><span class="o">=</span><span class="s2">&quot;main restricted universe multiverse&quot;</span>
</span><span class="line">        <span class="p">;;</span>
</span><span class="line">    sid<span class="p">|</span>squeeze<span class="p">|</span>lenny<span class="p">|</span>etch<span class="o">)</span> <span class="c1"># debian specific</span>
</span><span class="line">        <span class="nv">MIRRORSITE</span><span class="o">=</span><span class="s2">&quot;http://mirrors.kernel.org/debian/&quot;</span>
</span><span class="line">        <span class="nv">COMPONENTS</span><span class="o">=</span><span class="s2">&quot;main contrib non-free&quot;</span>
</span><span class="line">        <span class="p">;;</span>
</span><span class="line">    *<span class="o">)</span>
</span><span class="line">        <span class="nb">echo</span> <span class="s2">&quot;Unknown distribution: </span><span class="nv">$DIST</span><span class="s2">&quot;</span>
</span><span class="line">        <span class="nb">exit</span> <span class="m">1</span>
</span><span class="line">        <span class="p">;;</span>
</span><span class="line"><span class="k">esac</span>
</span><span class="line">
</span><span class="line"><span class="nv">HOOKDIR</span><span class="o">=</span><span class="nv">$HOME</span>/.pbuilder-hooks
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>The only additions I’ve made are to add the <code>-d</code> flag, which is required for us to ignore dependency discrepancies (in this case, our <code>debhelper</code> and <code>cdbs</code> dependencies are not at the version specified by the official package) and to update the list of Ubuntu distro names.
9. <code>$ sudo DIST=oneiric ARCH=amd64 pbuilder create</code> to create an Oneiric AMD64 chroot environment to build our backport on.
10. <code>$ sudo DIST=oneiric ARCH=amd64 pbuilder login --save-after-login</code> to login to our chroot environment. The <code>--save-after-login</code> flag tells pbuilder to save the environment after we exit.
11. <strong>In chroot environment</strong> <code>$ apt-get update &amp;&amp; apt-get install tcl8.5-dev tk8.5-dev</code> to install tcl/tk dev packages. Next, symlink the .so files to where the Ruby 1.9.3p484 package for Trusty expects them to be by doing: <code>$ ln -s /usr/lib/libtk8.5.so /usr/lib/x86_64-linux-gnu/libtk8.5.so &amp;&amp; ln -s /usr/lib/libtcl8.5.so /usr/lib/x86_64-linux-gnu/libtcl8.5.so</code>. Next, exit the chroot environment by hitting Control-D or <code>$ exit</code>. Normally, <code>pbuilder</code> will take care of downloading build-dependencies for you, but in this case, the problem is that the Ruby 1.9.3p484 package for Trusty assumes taht <code>libtcl</code> and <code>libtk</code> <code>.so</code> files are located in places where they are not installed by default on our target distro.
12. <code>$ sudo DIST=oneiric ARCH=amd64 pbuilder build ruby1.9.1_1.9.3.484-1ubuntu2~ubuntu11.10.1.dsc</code> to instruct <code>pbuilder</code> to build your package. Go grab a coffee, walk your dog, etc. because this may take a while. If you are running in a VM (e.g. in Vagrant), be sure you’ve allocated enough memory (I recommend at least 2GB) so that the build tests for Ruby will pass.
13. When <code>pbuilder</code> is done, look in <code>/var/cache/pbuilder/oneiric-amd64/result/</code> for your packages</p>

<h2 id="conclusion">Conclusion</h2>
<p>There are a few places where I needed to get my hands dirty and look at package source code to understand where and why things were failing. Hopefully this guide helps you to backport not only Ruby, but any Ubuntu/Debian package between different releases !</p>

<p>If you have problems and questions, please leave a comment :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Schwatcher v0.0.7 Released]]></title>
    <link href="https://beachape.com/blog/2013/12/04/schwatcher-v0-dot-0-7-released/"/>
    <updated>2013-12-04T21:18:00+09:00</updated>
    <id>https://beachape.com/blog/2013/12/04/schwatcher-v0-dot-0-7-released</id>
    <content type="html"><![CDATA[<p>Version 0.0.7 of Schwatcher has been released.</p>

<p>Changes:</p>

<ul>
  <li>No longer has external logging library dependencies. Thanks <a href="https://github.com/crdueck">crdueck</a> for the suggestion.</li>
  <li>No longer uses any mutable members for extra thread-safety</li>
</ul>

<p>Relevent info:</p>

<ul>
  <li><a href="https://github.com/lloydmeta/schwatcher">Schwatcher Github repo</a></li>
</ul>
]]></content>
  </entry>
  
</feed>
