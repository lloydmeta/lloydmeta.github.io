<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[BeachApe.]]></title>
  <link href="https://beachape.com/atom.xml" rel="self"/>
  <link href="https://beachape.com/"/>
  <updated>2015-02-11T17:39:57+09:00</updated>
  <id>https://beachape.com/</id>
  <author>
    <name><![CDATA[Lloyd]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Enumeratum: Sealed Trait Enums for Scala]]></title>
    <link href="https://beachape.com/blog/2015/02/11/enumeratum-sealed-trait-enums-for-scala/"/>
    <updated>2015-02-11T16:47:00+09:00</updated>
    <id>https://beachape.com/blog/2015/02/11/enumeratum-sealed-trait-enums-for-scala</id>
    <content type="html"><![CDATA[<p>If you&#8217;ve been working with Scala for a while, you might have come across a few &#8220;problems&#8221; with the built in <code>Enumeration</code> that&#8217;s provided out-of-the-box.  This is especially true if you have colleagues who come from a Java background and yearn for the Java-style <code>Enum</code> that gave them lots of power and flexibility.</p>

<p>A quick search on the internet for &#8220;Scala enumeration alternative&#8221; will yield a lot of results (perhaps on StackOverflow) where people have cooked up their own implementation of enumerations, usually built on <code>sealed traits</code>. Personally, I found most of them to be either too inconvenient to use, too over-powered, or too complicated, and I really didn&#8217;t want to have to copy-paste enum-related code into all my projects.</p>

<p>Thus <a href="https://github.com/lloydmeta/enumeratum">Enumeratum</a> was born.</p>

<!-- more -->


<p><a href="https://github.com/lloydmeta/enumeratum">Enumeratum</a> aims to be simple to use, idiomatic, small (LoC), yet flexible enough to allow Scala devs to make power enums if they so wish. It is also Mavenised for easy import into any project.</p>

<p>To use it, simply <a href="https://github.com/lloydmeta/enumeratum#sbt">add it as a dependency</a></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>libraryDependencies ++= Seq(
</span><span class='line'>    "com.beachape" %% "enumeratum" % "1.0.0",
</span><span class='line'>    "com.beachape" %% "enumeratum-play" % "1.0.0" // if you are using Play and want to avoid boilerplate
</span><span class='line'>)</span></code></pre></td></tr></table></div></figure>


<p>Then</p>

<figure class='code'><figcaption><span>Enumeratum example code (enumeratum_example.scala)</span> <a href='https://beachape.com/downloads/code/scala/enumeratum_example.scala'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="c1">// For use in a REPL</span>
</span><span class='line'>
</span><span class='line'><span class="k">import</span> <span class="nn">enumeratum._</span>
</span><span class='line'>
</span><span class='line'><span class="k">sealed</span> <span class="k">trait</span> <span class="nc">Phone</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">call</span><span class="o">(</span><span class="n">number</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span><span class="k">:</span> <span class="kt">String</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">case</span> <span class="k">object</span> <span class="nc">Phone</span> <span class="k">extends</span> <span class="nc">Enum</span><span class="o">[</span><span class="kt">Phone</span><span class="o">]</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">case</span> <span class="k">object</span> <span class="nc">Android</span> <span class="k">extends</span> <span class="nc">Phone</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">def</span> <span class="n">call</span><span class="o">(</span><span class="n">number</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span> <span class="k">=</span> <span class="s">&quot;This is Larry Page.&quot;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">case</span> <span class="k">object</span> <span class="nc">Iphone</span> <span class="k">extends</span> <span class="nc">Phone</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">def</span> <span class="n">call</span><span class="o">(</span><span class="n">number</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span> <span class="k">=</span> <span class="s">&quot;This is Steve Jobs.&quot;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">case</span> <span class="k">object</span> <span class="nc">WindowsPhone</span> <span class="k">extends</span> <span class="nc">Phone</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">def</span> <span class="n">call</span><span class="o">(</span><span class="n">number</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span> <span class="k">=</span> <span class="s">&quot;This is Bill Gates.&quot;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">val</span> <span class="n">values</span> <span class="k">=</span> <span class="n">findValues</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">import</span> <span class="nn">Phone._</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Use as needed.</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="n">myPhone</span> <span class="k">=</span> <span class="nc">Iphone</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Get exhaustive match warnings</span>
</span><span class='line'><span class="k">def</span> <span class="n">rate</span><span class="o">(</span><span class="n">phone</span><span class="k">:</span> <span class="kt">Phone</span><span class="o">)</span><span class="k">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="n">phone</span> <span class="k">match</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">case</span> <span class="nc">Android</span> <span class="k">=&gt;</span> <span class="s">&quot;Great!&quot;</span>
</span><span class='line'>  <span class="k">case</span> <span class="nc">Iphone</span> <span class="k">=&gt;</span> <span class="s">&quot;Awesome!&quot;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">&lt;console&gt;:17: warning: match may not be exhaustive.</span>
</span><span class='line'><span class="cm">It would fail on the following input: WindowsPhone</span>
</span><span class='line'><span class="cm">*/</span>
</span></code></pre></td></tr></table></div></figure>


<p>You get nice things like exhaustive match warnings at compile-time, enums with methods, no more Enum-value type erasure, and other nice stuff.</p>

<h2>How it works</h2>

<p>Some of the solutions for custom enums out there are based on macros that reflect at compile time using <code>knownDirectSubclasses</code> to find enum values, but as of writing, there is a <a href="https://issues.scala-lang.org/browse/SI-7046">2 year old bug</a> for that method.</p>

<p>As a result, <a href="https://github.com/lloydmeta/enumeratum">Enumeratum</a> uses another method of finding enum values: looking in an enclosed object to find the enum values. The macro behind <code>findValues</code> does this for you so that you don&#8217;t have to maintain your own collection of enum values, which is both error-prone and tedious.</p>

<h2>Play</h2>

<p>If you want to use <a href="https://github.com/lloydmeta/enumeratum">Enumeratum</a> in a Play app, you may as well add <a href="https://github.com/lloydmeta/enumeratum#play-2"><code>enumeratum-play</code></a> as a dependency instead so that you can use the <code>PlayEnum[A]</code> trait (instead of <code>Enum[A]</code>), which will give you nice things like QueryStringBinders, PathBinders, form mappers, and Json Reads/Writes/Formats. This means less boilerplate in your project, which is A Good Thing, right?</p>

<h2>Limitations</h2>

<p>There are a few limitations with Enumeratum:</p>

<ul>
<li>Ordinality is not taken care of. From what I&#8217;ve seen, this is one of the least-used functions of Enums in general. That said, nothing is stoping you from defining an <code>Ordering</code> in your companion object for your sealed trait.</li>
<li>Because the Enum values are case objects, they will be inferred to have their own specific type, which may cause problems with compilation for typeclasses that are not contravariant. In that case, simply help the compiler by adding a type (e.g. <code>val myPhone: Phone = Iphone</code>)</li>
<li>The method <code>withName</code> relies on the <code>toString</code> method of the Enum values for lookup. Make sure to override this if you have specific requirements.</li>
</ul>


<h2>Enjoy</h2>

<p>I hope <a href="https://github.com/lloydmeta/enumeratum">Enumeratum</a> can help you out of your <code>Enumeration</code> woes. Have a look, play around, and send a PR or two !</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Scala Unless-when via Macros]]></title>
    <link href="https://beachape.com/blog/2014/08/11/scala-unless-when-via-macros/"/>
    <updated>2014-08-11T18:41:00+09:00</updated>
    <id>https://beachape.com/blog/2014/08/11/scala-unless-when-via-macros</id>
    <content type="html"><![CDATA[<p>Last week, I decided to take a stab at learning <a href="http://scalamacros.org/">Scala macros</a>. I had played around with macros when I wrote Scheme for a living (yes, believe it or not, these places exist&#8230;and existed long before Clojure made Lisp hip again), but the complexity of Scala&#8217;s macros always put me off (if you don&#8217;t believe me, check out the example given in the offical docs for a simple <a href="http://docs.scala-lang.org/overviews/macros/overview.html#a-complete-example">print macro</a>).</p>

<p>In Scala, things are not so simple, but with the introduction of <a href="docs.scala-lang.org/overviews/macros/quasiquotes.html">quasiquotes</a> and some refinements brought by Scala 2.11, things are smoother. Still, for a guy like me, the documentation was both sparse and DRY. Since I learn best when I&#8217;m actively engaged in building something, I decided to try writing the <a href="http://clhs.lisp.se/Body/m_when_.htm">run-of-the-mill unless-when</a> macros in Scala.</p>

<p>This post aims to summarise my journey towards implementing <a href="https://github.com/lloydmeta/unless-when">unless-when</a> and hopefully along the way make Scala macros accessible, at least at an introductory level, for Most People. There are already a few Scala macro blog posts out there but another one can&#8217;t hurt.</p>

<!-- more -->


<p><em>Note</em>: this blog post aims to explore macros as they are usable in Scala 2.10+. It also focuses on implementing macros with quasiquotes, as using them is more human-friendly than manually constructing Abstract Syntax Trees (AST).</p>

<h2>Goal</h2>

<p>For those unfamiliar with <code>when</code> and <code>unless</code>: the basic idea is that <code>when</code> is an <code>if</code> without an else, and <code>unless</code> is it&#8217;s opposite. The main reason for their existence is to make code more readable by adding a tiny bit of syntatic sugar. Without further ado, an example of what we want to achieve</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">  This should replace if (true) { block of code }</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'><span class="n">when</span> <span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="c1">// block of code</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">  This should replace if (!true) { do something }</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'><span class="n">unless</span> <span class="o">(</span><span class="kc">false</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="c1">// block of code</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Since we&#8217;re writing Scala, it would be nice if these constructs returned something useful; using the <a href="http://www.scala-lang.org/api/current/scala/Option.html">Option</a> monad seems reasonable: If the block is run, we return the result in a Some and otherwise return a None. <a href="http://danielwestheide.com/blog/2012/12/19/the-neophytes-guide-to-scala-part-5-the-option-type.html">This tutorial</a> is a good guide for Options in case you are unfamiliar with the concept.</p>

<h2>Macro-y basics</h2>

<p>Taking a look at the documentation, you will quickly notice the general pattern for implementing a simple Scala macro</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">import</span> <span class="nn">scala.language.experimental.macros</span>
</span><span class='line'><span class="k">import</span> <span class="nn">scala.reflect.macros._</span>
</span><span class='line'>
</span><span class='line'><span class="k">object</span> <span class="nc">Example</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">def</span> <span class="n">meth</span><span class="o">[</span><span class="kt">A</span><span class="o">](</span><span class="n">x</span><span class="k">:</span> <span class="kt">A</span><span class="o">)</span><span class="k">:</span> <span class="kt">A</span> <span class="o">=</span> <span class="n">macro</span> <span class="n">implRef</span><span class="o">[</span><span class="kt">A</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="o">...</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="n">implRef</span><span class="o">[</span><span class="kt">A:</span> <span class="kt">c.WeakTypeTag</span><span class="o">](</span><span class="n">c</span><span class="k">:</span> <span class="kt">Context</span><span class="o">)(</span><span class="n">x</span><span class="k">:</span> <span class="kt">c.Expr</span><span class="o">[</span><span class="kt">A</span><span class="o">])</span><span class="k">:</span> <span class="kt">c.Expr</span><span class="o">[</span><span class="kt">A</span><span class="o">]</span> <span class="k">=</span> <span class="o">...</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>What does this mean? Let&#8217;s break it down:</p>

<ul>
<li><code>import scala.language.experimental.macros</code> and <code>import scala.reflect.macros._</code> are standard Scala imports that allow us to play around with macros. What&#8217;s not listed in this example is the declaration that your project depends on <code>scala-reflect</code>. You can do so by adding the following to your build.sbt:

<ul>
<li><code>libraryDependencies ++= Seq("org.scala-lang" % "scala-reflect" % scalaVersion.value)</code></li>
</ul>
</li>
<li><code>def meth[A](x: A): A</code> this is still just normal Scala code that we would normally see. It simply declares a method belonging to the Example singleton that is parameterised on the input type, and we want to make sure that the output type matches this type (e.g. if we invoke <code>meth</code> with an <code>Int</code>, we expect the output to be an <code>Int</code> because that is the contract of the method). For more info on writing parametric polymorphism, please check out <a href="Parametric%20polymorphism">this guide</a>:</li>
<li><code>macro implRef[A]</code> this is where things start looking macro-ish. The <code>macro</code> keyword lets the compiler know that the body of this method is going to be implemented via a macro definition, in this case <code>implRef</code>.</li>
<li><code>def implRef[A: c.WeakTypeTag](c: Context)(x: c.Expr[A]): c.Expr[A]</code> .. wow. This itself needs to be broken down:

<ul>
<li><code>def implRef[A: c.WeakTypeTag]</code> The first part <code>def implRef</code> is still standard Scala</li>
<li><code>(c: Context)</code> (we&#8217;ll cover <code>[A: c.WeakTypeTag]</code> in a bit). In this part, <code>(c: Context)</code> declares that the first argument passed to the macro implementation must be a Context. This is a requirement for playing around with Scala macros, and is actually passed by the compiler when it invokes macro expansion, so that you can write code that accesses the compiler API.</li>
<li><code>[A: c.WeakTypeTag]</code> This is a bit mischievous because we combine Scala-shorthand for typeclasses with macro-magic. This probably deserves a post in and of itself, but for now, please consider this to mean &#8220;A is a type parameter passed during macro invocation, but we must ALSO have in scope a WeakTypeTag coming from the Context that is parameterised to type A, which can be written in full as c.WeakTypeTag[A]&#8221;. This WeakTypeTag business is required so that we can pass along the type parameter from <code>meth</code> into the <code>implRef</code> macro expansion implementation, allowing us to have a type parameterised macro definition.

<ul>
<li>For more information on type classes and the shorthand we use here, I highly recommend this <a href="danielwestheide.com/blog/2013/02/06/the-neophytes-guide-to-scala-part-12-type-classes.html">blog post on type classes</a></li>
</ul>
</li>
<li><code>(x: c.Expr[A])</code> means that the first non-Context parameter of the macro implementation (remember that the first one is always taken by the compiler and must be a Context) is <code>x</code> and it is a <code>c.Expr[A]</code>. It is important that the name of the parameter matches that used in the invoking method (see how <code>meth</code> also has <code>x</code> as the first parameter). <code>c.Expr</code> is type of object that wraps the abstract syntax tree that represents the input to the invoking function, and it is typed to A.

<ul>
<li><em>NOTE:</em> since the argument&#8217;s type is <code>c.Expr</code> (essentially an abstract syntax tree), any expression passed to the method <code>meth</code> actually may not get invoked or evaluated even though it is not a <a href="http://daily-scala.blogspot.jp/2009/12/by-name-parameter-to-function.html">pass-by-name parameter</a>. In other words, while the macro is expanding, it <strong>acts</strong> like a pass-by name parameter and is &#8220;lazy&#8221;.</li>
</ul>
</li>
<li><code>: c.Expr[A]</code> all this means is that the result of the macro expansion is also a <code>c.Expr</code> type parameterised to A.</li>
</ul>
</li>
</ul>


<h2>Quasiquotes</h2>

<p>Quasiquotes are not a Scala-exclusive construct, and a Google search will show that they are used in other languages that support metaprogramming, like Scheme.</p>

<p>In short, they offer the macro programmer an easy way to manipulate or create abstract syntax trees without having to build them manually. This makes them extremely helpful in Scala because:
  1. Scala syntax does not map to ASTs easily like Lisps
  2. Scala is typed, which means your manually-built AST also needs typing&#8230;which wraps non-macro-land types (notice how a normal type parameter like <code>[A]</code> becomes <code>c.Expr[A]</code> &#8230; that&#8217;s twice as many characters  !)</p>

<p>Quasiquotes allow us to use <a href="http://docs.scala-lang.org/overviews/core/string-interpolation.html">string-interpolation-like syntax</a> to interpolate elements into a tree as we define it.</p>

<p>For example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="k">val</span> <span class="n">aquasiquote</span> <span class="k">=</span> <span class="n">q</span><span class="s">&quot;a quasiquote&quot;</span>
</span><span class='line'><span class="n">aquasiquote</span><span class="k">:</span> <span class="kt">universe.Select</span> <span class="o">=</span> <span class="n">a</span><span class="o">.</span><span class="n">quasiquote</span>
</span><span class='line'>
</span><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="k">val</span> <span class="n">tree</span> <span class="k">=</span> <span class="n">q</span><span class="s">&quot;i am { $aquasiquote }&quot;</span>
</span><span class='line'><span class="n">tree</span><span class="k">:</span> <span class="kt">universe.Tree</span> <span class="o">=</span> <span class="n">i</span><span class="o">.</span><span class="n">am</span><span class="o">(</span><span class="n">a</span><span class="o">.</span><span class="n">quasiquote</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The above example was taken from the <a href="http://docs.scala-lang.org/overviews/quasiquotes/intro.html">official documentation on quasiquotes</a>, which I highly recommend you take a look at if you find the rest of this post hard to follow.</p>

<h2>Implementation</h2>

<p>For <code>when</code>, we know that we roughly want the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">when</span> <span class="o">(</span><span class="n">someCondition</span><span class="o">)</span> <span class="o">{</span> <span class="n">result</span> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>To expand via our macro into the following (yes we are using an inline if .. if you don&#8217;t like it, pretend we didn&#8217;t)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">if</span> <span class="o">(</span><span class="n">someCondition</span><span class="o">)</span> <span class="nc">Some</span><span class="o">(</span><span class="n">result</span><span class="o">)</span> <span class="k">else</span> <span class="nc">None</span>
</span></code></pre></td></tr></table></div></figure>


<p>Using what we know, the following should work:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">import</span> <span class="nn">scala.language.experimental.macros</span>
</span><span class='line'><span class="k">import</span> <span class="nn">scala.reflect.macros._</span>
</span><span class='line'>
</span><span class='line'><span class="k">object</span> <span class="nc">Example</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="n">when</span><span class="o">[</span><span class="kt">A</span><span class="o">](</span><span class="n">p</span><span class="k">:</span> <span class="kt">Boolean</span><span class="o">)(</span><span class="n">f</span><span class="k">:</span> <span class="kt">A</span><span class="o">)</span><span class="k">:</span> <span class="kt">Option</span><span class="o">[</span><span class="kt">A</span><span class="o">]</span> <span class="k">=</span> <span class="n">macro</span> <span class="n">whenImp</span><span class="o">[</span><span class="kt">A</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="n">whenImp</span><span class="o">[</span><span class="kt">A:</span> <span class="kt">c.WeakTypeTag</span><span class="o">](</span><span class="n">c</span><span class="k">:</span> <span class="kt">Context</span><span class="o">)(</span><span class="n">p</span><span class="k">:</span> <span class="kt">c.Expr</span><span class="o">[</span><span class="kt">Boolean</span><span class="o">])(</span><span class="n">f</span><span class="k">:</span> <span class="kt">c.Expr</span><span class="o">[</span><span class="kt">A</span><span class="o">])</span><span class="k">:</span> <span class="kt">c.Expr</span><span class="o">[</span><span class="kt">Option</span><span class="o">[</span><span class="kt">A</span><span class="o">]]</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">import</span> <span class="nn">c.universe._</span>
</span><span class='line'>    <span class="n">c</span><span class="o">.</span><span class="nc">Expr</span><span class="o">[</span><span class="kt">Option</span><span class="o">[</span><span class="kt">A</span><span class="o">]](</span><span class="n">q</span><span class="s">&quot;if ($p) Some($f) else None&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Implementing <code>unless</code> is left as an exercise for the reader :)</p>

<h2>Trying it out</h2>

<p>Putting the above into a Scala REPL (you will probably need to use <code>:paste</code> mode) will prove that it works.</p>

<p>For example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">scala</span><span class="o">&gt;</span> <span class="k">import</span> <span class="nn">Example._</span>
</span><span class='line'><span class="k">import</span> <span class="nn">Example._</span>
</span><span class='line'>
</span><span class='line'><span class="n">when</span><span class="o">(</span><span class="kc">true</span><span class="o">)(</span><span class="mi">3</span><span class="o">)</span>
</span><span class='line'><span class="n">res1</span><span class="k">:</span> <span class="kt">Option</span><span class="o">[</span><span class="kt">Int</span><span class="o">]</span> <span class="k">=</span> <span class="nc">Some</span><span class="o">(</span><span class="mi">3</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Also, remember that since our <code>when</code> is backed by a macro, the <code>f</code> argument (our block) passed to the second parameter list, behaves &#8220;lazily&#8221; and won&#8217;t execute if our predicate<code>p</code> returns false. This is because when <code>when</code> is invoked, the compiler knows to pass the entire AST for that block parameter (well, wrapped inside a <code>c.Expr</code>) to our macro, which interpolates the it into the final tree.</p>

<p>For the performance-conscious, this means that we get &#8220;lazy&#8221; for free; that is, without using Scala&#8217;s call-by-name parameter feature, which, although nice to use in many cases, <em>does</em> incur some run-time performance penalty because it is implemented by instantiating anonymous classes (see <a href="http://infoscience.epfl.ch/record/128135/files/paper.pdf">this paper</a> for more information about the performance cost of call-by-name parameters .. among other performance-related Scala things).</p>

<h2>unless-when library</h2>

<p>I&#8217;ve put the above into a library and included trailing variants of <code>when</code> and <code>unless</code> as bonuses (Rubyists should be familiar with these).</p>

<p>You can find the lib <a href="https://github.com/lloydmeta/unless-when">here on Github</a>. It is fully tested and Mavenised for easy out-of-the-box usage.</p>

<h2>Conclusion</h2>

<p>I hope this post has been helpful in giving a simple, but full example of how to get started with macros in Scala. If you spot any errors, have questions or suggestions, please feel free to leave a comment!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RxScala and Schwatcher]]></title>
    <link href="https://beachape.com/blog/2014/05/03/rxscala-and-schwatcher/"/>
    <updated>2014-05-03T17:44:00+09:00</updated>
    <id>https://beachape.com/blog/2014/05/03/rxscala-and-schwatcher</id>
    <content type="html"><![CDATA[<p>A couple days ago, I released v0.1.3 of <a href="https://github.com/lloydmeta/schwatcher">Schwatcher</a>, which introduces the ability to monitor events on file paths using a composable <a href="https://rx.codeplex.com/">Rx Observable</a> interface. &#8220;What does that even mean and why should you care?&#8221; is what this blog post tries to answer.</p>

<p>The original version of Schwatcher allowed you to tell a <code>MonitorActor</code> what callback you want to fire when a <a href="http://docs.oracle.com/javase/7/docs/api/java/nio/file/StandardWatchEventKinds.html">certain type of event</a> happened on a file path. This is fine and there are people out there using it in production as is. The limitation to this approach is that (at least by default), the events are difficult to treat as data and thus difficult to compose.</p>

<p>With <a href="https://rx.codeplex.com/">Rx</a>, we turn file path events into an asynchronous stream/channel. Essentially, you tell a <code>RxMonitor</code> object what path and event type you want to monitor and when an event happens, it will get pushed into its <code>observable</code> (the stream). You can then choose to filter, map, or fold over this data stream, creating new data streams. If you wish to cause side-effects, you can add one or more <code>observer</code>s to these data streams.</p>

<!-- more -->


<p><em>Note</em>: this blog post applies to v0.1.3 of Schwatcher, which uses v0.18.1 of RxScala. Future versions may introduce breaking changes that invalidate the examples in this blog post.</p>

<h2>Example</h2>

<p>Suppose we have the following directory structure:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>directory1
</span><span class='line'>  - directoryFile1</span></code></pre></td></tr></table></div></figure>


<p>Let&#8217;s set up an <code>RxMonitor</code> object to monitor for file creation and modifications events in <code>directory1</code> (note: all operations on <code>RxMonitor</code> objects are thread-safe).</p>

<p>While we&#8217;re at it, let&#8217;s grab the base <code>observable</code> from the monitor as well. Note that this <code>Observable</code> will, according to the <code>registerPath</code> and <code>unregisterPath</code> calls made to its parent <code>RxMonitor</code>, push all <code>EventAtPath</code>s to its <code>Observer</code>s. More on what an <code>Observer</code> is later, but for now, think of an <code>Observable</code> as a data stream and an <code>Observer</code> as an object gets pushed new objects from the <code>Observable</code> that it is, well, observing.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">import</span> <span class="nn">com.beachape.filemanagement.RxMonitor</span>
</span><span class='line'><span class="k">import</span> <span class="nn">com.beachape.filemanagement.Messages.EventAtPath</span>
</span><span class='line'><span class="k">import</span> <span class="nn">java.nio.file.Paths</span>
</span><span class='line'><span class="k">import</span> <span class="nn">java.nio.file.StandardWatchEventKinds._</span>
</span><span class='line'><span class="k">import</span> <span class="nn">rx.lang.scala.Observer</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="n">monitor</span> <span class="k">=</span> <span class="nc">RxMonitor</span><span class="o">()</span>
</span><span class='line'><span class="k">val</span> <span class="n">observable</span> <span class="k">=</span> <span class="n">monitor</span><span class="o">.</span><span class="n">observable</span>
</span><span class='line'><span class="k">val</span> <span class="n">directory1</span> <span class="k">=</span> <span class="nc">Paths</span> <span class="n">get</span> <span class="s">&quot;/Users/lloyd/Desktop/directory1&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">monitor</span><span class="o">.</span><span class="n">registerPath</span><span class="o">(</span><span class="nc">ENTRY_MODIFY</span><span class="o">,</span> <span class="n">directory1</span><span class="o">)</span>
</span><span class='line'><span class="n">monitor</span><span class="o">.</span><span class="n">registerPath</span><span class="o">(</span><span class="nc">ENTRY_CREATE</span><span class="o">,</span> <span class="n">directory1</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&#8217;s create 2 more <code>Observables</code>. Let&#8217;s make one called <code>createsOnly</code> that will only care about create events in the directory and another one called <code>scalaSourceCreatesOnly</code> that only cares about create events for files ending in <code>.scala</code>. <strong>Notice</strong> that we&#8217;re composing here :)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">createsOnly</span> <span class="k">=</span> <span class="n">observable</span><span class="o">.</span><span class="n">filter</span><span class="o">(</span><span class="k">_</span><span class="o">.</span><span class="n">event</span> <span class="o">==</span> <span class="nc">ENTRY_CREATE</span><span class="o">)</span>
</span><span class='line'><span class="k">val</span> <span class="n">scalaSourceCreatesOnly</span> <span class="k">=</span> <span class="n">createsOnly</span><span class="o">.</span><span class="n">filter</span><span class="o">(</span><span class="k">_</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">toString</span><span class="o">.</span><span class="n">endsWith</span><span class="o">(</span><span class="s">&quot;.scala&quot;</span><span class="o">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, let&#8217;s create some basic <code>Observers</code> that we can pass to the <code>subscribe</code> method of our new <code>Observable</code>s. An <code>Observer</code> at minimum implements an onNext function, which takes an element that will be pushed to it from the <code>Observable</code> that it subscribes to and returns nothing (<code>Unit</code>). It may optionally implement onError (a function which takes a <code>Throwable</code> as an argument and returns nothing) and onCompleted (0 argument function that is called when the <code>Observable</code> it is subscribed to is finished and will no longer send further objects):</p>

<figure class='code'><figcaption><span>attach observers (attachObservers.scala)</span> <a href='https://beachape.com/downloads/code/scala/attachObservers.scala'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">createAndModifyObserver</span> <span class="k">=</span> <span class="nc">Observer</span><span class="o">[</span><span class="kt">EventAtPath</span><span class="o">](</span><span class="n">onNext</span> <span class="k">=</span> <span class="o">{</span> <span class="n">event</span> <span class="k">=&gt;</span> <span class="n">println</span><span class="o">(</span><span class="n">s</span><span class="s">&quot;Something was created or modified: $event&quot;</span><span class="o">)})</span>
</span><span class='line'><span class="k">val</span> <span class="n">createOnlyObserver</span> <span class="k">=</span> <span class="nc">Observer</span><span class="o">[</span><span class="kt">EventAtPath</span><span class="o">](</span><span class="n">onNext</span> <span class="k">=</span> <span class="o">{</span> <span class="n">event</span> <span class="k">=&gt;</span> <span class="n">println</span><span class="o">(</span><span class="n">s</span><span class="s">&quot;Something was created: $event&quot;</span><span class="o">)})</span>
</span><span class='line'>
</span><span class='line'><span class="n">observable</span><span class="o">.</span><span class="n">subscribe</span><span class="o">(</span><span class="n">createAndModifyObserver</span><span class="o">)</span>
</span><span class='line'><span class="n">createsOnly</span><span class="o">.</span><span class="n">subscribe</span><span class="o">(</span><span class="n">createOnlyObserver</span><span class="o">)</span>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * The same as</span>
</span><span class='line'><span class="cm"> * {{{</span>
</span><span class='line'><span class="cm"> * val createScalaOnlyObserver = Observer[EventAtPath](onNext = { event =&gt; println(s&quot;A Scala source file was created: $event&quot;)})</span>
</span><span class='line'><span class="cm"> * scalaSourceCreatesOnly.subscribe(createScalaOnlyObserver)</span>
</span><span class='line'><span class="cm"> * }}}</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * The same as declaring an Observer separately and attaching it via #subscribe (as seen above),</span>
</span><span class='line'><span class="cm"> * since Observer as a type is just a way of binding 3 different functions, onNext, onCompleted, and onError</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="n">scalaSourceCreatesOnly</span><span class="o">.</span><span class="n">subscribe</span><span class="o">(</span><span class="n">onNext</span> <span class="k">=</span> <span class="o">{</span> <span class="n">event</span> <span class="k">=&gt;</span> <span class="n">println</span><span class="o">(</span><span class="n">s</span><span class="s">&quot;A Scala source file was created: $event&quot;</span><span class="o">)})</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now let&#8217;s make stuff happen in another terminal.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>~/Desktop/directory1: touch hello
</span><span class='line'><span class="nv">$ </span>~/Desktop/directory1: <span class="nb">echo </span>lol &gt;&gt; hello
</span><span class='line'><span class="nv">$ </span>~/Desktop/directory1: touch speedy.scala
</span><span class='line'><span class="nv">$ </span>~/Desktop/directory1: <span class="nb">echo</span> <span class="s1">&#39;println(&quot;hmm&quot;)&#39;</span> &gt;&gt; speedy.scala
</span></code></pre></td></tr></table></div></figure>


<p>The following will be outputted</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Something was created or modified: EventAtPath<span class="o">(</span>ENTRY_CREATE,/Users/lloyd/Desktop/directory1/hello<span class="o">)</span>
</span><span class='line'>Something was created: EventAtPath<span class="o">(</span>ENTRY_CREATE,/Users/lloyd/Desktop/directory1/hello<span class="o">)</span>
</span><span class='line'>Something was created or modified: EventAtPath<span class="o">(</span>ENTRY_MODIFY,/Users/lloyd/Desktop/directory1/hello<span class="o">)</span>
</span><span class='line'>Something was created or modified: EventAtPath<span class="o">(</span>ENTRY_CREATE,/Users/lloyd/Desktop/directory1/speedy.scala<span class="o">)</span>
</span><span class='line'>Something was created: EventAtPath<span class="o">(</span>ENTRY_CREATE,/Users/lloyd/Desktop/directory1/speedy.scala<span class="o">)</span>
</span><span class='line'>A Scala <span class="nb">source </span>file was created: EventAtPath<span class="o">(</span>ENTRY_CREATE,/Users/lloyd/Desktop/directory1/speedy.scala<span class="o">)</span>
</span><span class='line'>Something was created or modified: EventAtPath<span class="o">(</span>ENTRY_MODIFY,/Users/lloyd/Desktop/directory1/speedy.scala<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Lastly, since we&#8217;re done, let&#8217;s call the <code>stop()</code> method on the <code>RxMonitor</code> object so that subscribed <code>Observers</code> are notified and we stop the underlying <code>MonitorActor</code> as well. Cleaning up is A Good Thing (TM).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">monitor</span><span class="o">.</span><span class="n">stop</span><span class="o">()</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Conclusion</h2>

<p>I hope this post has demonstrated the power of using RxScala&#8217;s <code>Observable</code> as an abstraction of asynchronous events into a tangible data structure, and how using it through Schwatcher might simplify the process of building your own applications. If you have any questions or spot any mistakes, please feel free to leave a comment.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Schwatcher v0.1.3 Released]]></title>
    <link href="https://beachape.com/blog/2014/05/02/schwatcher-v0-dot-1-3-released/"/>
    <updated>2014-05-02T00:10:00+09:00</updated>
    <id>https://beachape.com/blog/2014/05/02/schwatcher-v0-dot-1-3-released</id>
    <content type="html"><![CDATA[<p>Version 0.1.3 of Schwatcher has been released.</p>

<p>This version brings a new Observable interface that exposes a &#8220;stream&#8221; (or channel) of <code>EventAtPath</code>s that can be composed. Using this interface, you no longer need to register callbacks - you simply register paths and get notifications for events on them either by subscribing to the Observable or by composing.</p>

<p>For more information on how to use Observables (especially how they compose in awesome ways), checkout the <a href="https://rx.codeplex.com/">Rx homepage</a></p>

<p>Example usage:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">import</span> <span class="nn">com.beachape.filemanagement.RxMonitor</span>
</span><span class='line'><span class="k">import</span> <span class="nn">java.io.</span><span class="o">{</span><span class="nc">FileWriter</span><span class="o">,</span> <span class="nc">BufferedWriter</span><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">import</span> <span class="nn">java.nio.file.Paths</span>
</span><span class='line'><span class="k">import</span> <span class="nn">java.nio.file.StandardWatchEventKinds._</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="n">monitor</span> <span class="k">=</span> <span class="nc">RxMonitor</span><span class="o">()</span>
</span><span class='line'><span class="k">val</span> <span class="n">observable</span> <span class="k">=</span> <span class="n">monitor</span><span class="o">.</span><span class="n">observable</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="n">subscription</span> <span class="k">=</span> <span class="n">observable</span><span class="o">.</span><span class="n">subscribe</span><span class="o">(</span>
</span><span class='line'>  <span class="n">onNext</span> <span class="k">=</span> <span class="o">{</span> <span class="n">p</span> <span class="k">=&gt;</span> <span class="n">println</span><span class="o">(</span><span class="n">s</span><span class="s">&quot;Something was modified in a file mufufu: $p&quot;</span><span class="o">)},</span>
</span><span class='line'>  <span class="n">onError</span> <span class="k">=</span> <span class="o">{</span> <span class="n">t</span> <span class="k">=&gt;</span> <span class="n">println</span><span class="o">(</span><span class="n">t</span><span class="o">)},</span>
</span><span class='line'>  <span class="n">onCompleted</span> <span class="k">=</span> <span class="o">{</span> <span class="o">()</span> <span class="k">=&gt;</span> <span class="n">println</span><span class="o">(</span><span class="s">&quot;Monitor has been shut down&quot;</span><span class="o">)</span> <span class="o">}</span>
</span><span class='line'><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="n">desktopFile</span> <span class="k">=</span> <span class="nc">Paths</span> <span class="n">get</span> <span class="s">&quot;/Users/lloyd/Desktop/test&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">monitor</span><span class="o">.</span><span class="n">registerPath</span><span class="o">(</span><span class="nc">ENTRY_MODIFY</span><span class="o">,</span> <span class="n">desktopFile</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="nc">Thread</span><span class="o">.</span><span class="n">sleep</span><span class="o">(</span><span class="mi">100</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//modify a monitored file</span>
</span><span class='line'><span class="k">val</span> <span class="n">writer</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">BufferedWriter</span><span class="o">(</span><span class="k">new</span> <span class="nc">FileWriter</span><span class="o">(</span><span class="n">desktopFile</span><span class="o">.</span><span class="n">toFile</span><span class="o">))</span>
</span><span class='line'><span class="n">writer</span><span class="o">.</span><span class="n">write</span><span class="o">(</span><span class="s">&quot;Theres text in here wee!!&quot;</span><span class="o">)</span>
</span><span class='line'><span class="n">writer</span><span class="o">.</span><span class="n">close</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// #=&gt; Something was modified in a file mufufu: /Users/lloyd/Desktop/test</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// stop monitoring</span>
</span><span class='line'><span class="n">monitor</span><span class="o">.</span><span class="n">stop</span><span class="o">()</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// #=&gt; Monitor has been shut down</span>
</span></code></pre></td></tr></table></div></figure>


<p>Relevant links:
- <a href="https://github.com/lloydmeta/schwatcher">Github page with how to install and example usage</a>
- <a href="https://github.com/lloydmeta/schwatcher/releases/tag/v0.1.3">Release page</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Schwatcher v0.1.0 Released]]></title>
    <link href="https://beachape.com/blog/2014/03/06/schwatcher-v0-dot-1-0-released/"/>
    <updated>2014-03-06T21:45:00+09:00</updated>
    <id>https://beachape.com/blog/2014/03/06/schwatcher-v0-dot-1-0-released</id>
    <content type="html"><![CDATA[<p>Version 0.1.0 of Schwatcher has been released.</p>

<p>Changes:</p>

<ul>
<li>Thanks to <a href="https://github.com/lloydmeta/schwatcher/pull/31">this pull request</a> from <a href="https://github.com/georgeOsdDev">georgeOsdDev</a>, modifiers can be used when registering callbacks</li>
<li>Upgrade to 2.3.0 of Akka</li>
</ul>


<p>Relevent info:</p>

<ul>
<li><a href="https://github.com/lloydmeta/schwatcher">Schwatcher Github repo</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Backporting Ruby From Trusty to Oneiric]]></title>
    <link href="https://beachape.com/blog/2014/01/14/backporting-ruby-from-trusty-to-oneiric/"/>
    <updated>2014-01-14T22:35:00+09:00</updated>
    <id>https://beachape.com/blog/2014/01/14/backporting-ruby-from-trusty-to-oneiric</id>
    <content type="html"><![CDATA[<h2>Goal</h2>

<p>Create a backported Ruby 1.9.3p484 Ubuntu package. For the purposes of this post, we will assume that you are OK with not creating a signed package (required if uploading to launchpad). If you wish to upload to launchpad (for example to share your backport with the world), it may be useful for you to <a href="http://opensourcehacker.com/2013/03/20/how-to-backport-packages-on-ubuntu-linux/">check out this site</a> after reading through this guide.</p>

<h2>Motivation</h2>

<p>At my day job, I had to upgrade Ruby on very old production boxes that were running Oneiric AMD64. Upgrading the OS was a chore that would be happening later but we needed to start using the latest Ruby as soon as possible.</p>

<p>Unfortunately, there is no Ruby 1.9.3p484 Debian package readily available for Oneiric, not even as a backport.</p>

<!-- more -->


<h2>Basic requirements</h2>

<ul>
<li>A reasonable Ubuntu environment. Use Vagrant (and its dependencies, such as Virtualbox) if you are on OSX</li>
<li>Basic *Nix knowledge (command line editors and various tools)</li>
</ul>


<h2>Overview</h2>

<p>The idea is to use tools readily available on Ubuntu and Debian to create a backported package. These include <code>backportpackage</code> and <code>pbuilder</code> among others.</p>

<p>Without going into too much detail, <code>backportpackage</code> helps us “prep” (e.g. generating .dsc files with conventional names for backported packages) our existing target package on to be backported. <code>pbuilder</code> is a tool that sets up a clean chroot environment (via <a href="https://wiki.debian.org/Debootstrap">debootstrap</a>) to build Debian packages. See the <a href="http://manpages.ubuntu.com/manpages/oneiric/man1/backportpackage.1.html">man page for backportpackage</a> and the <a href="https://wiki.ubuntu.com/PbuilderHowto">pbuilder howto page</a> for more information.</p>

<p>Normally, <code>backportpackage</code> and <code>pbuilder</code> are very straightforward to use when backporting packages that do not have many dependencies. However, when porting the Ruby 1.9.3p484 package from Trusty to Oneiric, quite a bit of “massaging” needed to be done, mostly because of the significant time difference between the two Ubuntu releases.</p>

<h2>Procedure</h2>

<ol>
<li>Have a reasonable Ubuntu environment ready. It doesn’t matter which version you are currently on because we will be using the aforementioned tools to download, prep and build packages. It may be a good idea to run <code>$ sudo apt-get update</code></li>
<li><code>$ sudo apt-get install ubuntu-dev-tools</code> to install Ubuntu dev tools on your host machine. This will install</li>
<li>If you are using a version of Ubuntu newer than Precise, you may be able to skip this step. <code>$ wget http://ubuntu.wikimedia.org/ubuntu//pool/universe/u/ubuntu-dev-tools/ubuntu-dev-tools_0.143_all.deb &amp;&amp; sudo dpkg -i ubuntu-dev-tools_0.143_all.deb</code> This installs a newer version of <code>backportpackages</code> that allows us to not sign our packages</li>
<li><code>$ mkdir -p ~/backport_workdir/ruby191 &amp;&amp; cd ~/backport_workdir/ruby191</code> to create and go to our working directory</li>
<li><code>$ backportpackage --dont-sign -s trusty -d oneiric -w . ruby1.9.1</code> to download the newest (at time or writing) <a href="http://packages.ubuntu.com/source/trusty/ruby1.9.1">Ruby 1.9.3p484 package</a> and create the prepped .dsc files for backporting.</li>
<li><strong>Important</strong> Open up <code>ruby1.9.1_1.9.3.484-1ubuntu2~ubuntu11.10.1.dsc</code> with your preferred editor and remove the versioning constraints on <code>debhelper</code> and <code>cdbs</code> in the <code>Build-Depends</code> line. Theoretically you could backport dependencies as well and put them in a local apt-get repo, but these particular packages are nasty in that they have many further dependencies and since in this case, the default versions that come with Oneiric are fine, we can safely remove these constraints.</li>
<li><code>$ sudo apt-get install pbuilder</code> to install <code>pbuilder</code></li>
<li><p>Create a <code>~/.pbuilderrc</code> file with the following contents. This is a preference file for <code>pbuilder</code> and the following configuration will allow us to easily toggle between different distributions of Ubuntu and architectures when using it to build packages. Credit to <a href="http://www.tolaris.com/2009/03/31/backporting-debian-packages-with-pbuilder/">tolaris.com</a></p>

<p><figure class='code'><figcaption><span>pbuilderrc  (pbuilderrc)</span> <a href='https://beachape.com/downloads/code/pbuilder/pbuilderrc'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>: <span class="k">${</span><span class="nv">DIST</span><span class="p">:=</span><span class="k">$(</span>lsb_release --short --codename<span class="k">)}</span>
</span><span class='line'>: <span class="k">${</span><span class="nv">ARCH</span><span class="p">:=</span><span class="k">$(</span>dpkg --print-architecture<span class="k">)}</span>
</span><span class='line'><span class="nv">NAME</span><span class="o">=</span><span class="s2">&quot;$DIST-$ARCH&quot;</span>
</span><span class='line'><span class="nv">DISTRIBUTION</span><span class="o">=</span><span class="s2">&quot;$DIST&quot;</span>
</span><span class='line'><span class="nv">DEBOOTSTRAPOPTS</span><span class="o">=(</span><span class="s2">&quot;--arch&quot;</span> <span class="s2">&quot;$ARCH&quot;</span> <span class="s2">&quot;${DEBOOTSTRAPOPTS[@]}&quot;</span><span class="o">)</span>
</span><span class='line'><span class="nv">BASETGZ</span><span class="o">=</span><span class="s2">&quot;<code>dirname $BASETGZ</code>/$NAME-base.tgz&quot;</span>
</span><span class='line'><span class="nv">BUILDRESULT</span><span class="o">=</span><span class="s2">&quot;/var/cache/pbuilder/$NAME/result/&quot;</span>
</span><span class='line'><span class="nv">APTCACHE</span><span class="o">=</span><span class="s2">&quot;/var/cache/pbuilder/$NAME/aptcache/&quot;</span>
</span><span class='line'><span class="c"># Don&#39;t rebuild source files (.diff.gz, .dsc), or list them in .changes</span>
</span><span class='line'><span class="c"># See Ubuntu bug 118181</span>
</span><span class='line'><span class="nv">DEBBUILDOPTS</span><span class="o">=</span><span class="s2">&quot;-b -d&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">case</span> <span class="s2">&quot;$DIST&quot;</span> in
</span><span class='line'>    oneiric|trusty|lucid|karmic|jaunty|intrepid|hardy|dapper<span class="o">)</span> <span class="c"># ubuntu specific</span>
</span><span class='line'>        <span class="nv">MIRRORSITE</span><span class="o">=</span><span class="s2">&quot;http://archive.ubuntu.com/ubuntu/&quot;</span>
</span><span class='line'>        <span class="nv">COMPONENTS</span><span class="o">=</span><span class="s2">&quot;main restricted universe multiverse&quot;</span>
</span><span class='line'>        ;;
</span><span class='line'>    sid|squeeze|lenny|etch<span class="o">)</span> <span class="c"># debian specific</span>
</span><span class='line'>        <span class="nv">MIRRORSITE</span><span class="o">=</span><span class="s2">&quot;http://mirrors.kernel.org/debian/&quot;</span>
</span><span class='line'>        <span class="nv">COMPONENTS</span><span class="o">=</span><span class="s2">&quot;main contrib non-free&quot;</span>
</span><span class='line'>        ;;
</span><span class='line'>    *<span class="o">)</span>
</span><span class='line'>        <span class="nb">echo</span> <span class="s2">&quot;Unknown distribution: $DIST&quot;</span>
</span><span class='line'>        <span class="nb">exit </span>1
</span><span class='line'>        ;;
</span><span class='line'><span class="k">esac</span>
</span><span class='line'>
</span><span class='line'><span class="nv">HOOKDIR</span><span class="o">=</span><span class="nv">$HOME</span>/.pbuilder-hooks
</span></code></pre></td></tr></table></div></figure></p>

<p>The only additions I&#8217;ve made are to add the <code>-d</code> flag, which is required for us to ignore dependency discrepancies (in this case, our <code>debhelper</code> and <code>cdbs</code> dependencies are not at the version specified by the official package) and to update the list of Ubuntu distro names.</p></li>
<li><code>$ sudo DIST=oneiric ARCH=amd64 pbuilder create</code> to create an Oneiric AMD64 chroot environment to build our backport on.</li>
<li><code>$ sudo DIST=oneiric ARCH=amd64 pbuilder login --save-after-login</code> to login to our chroot environment. The <code>--save-after-login</code> flag tells pbuilder to save the environment after we exit.</li>
<li><strong>In chroot environment</strong> <code>$ apt-get update &amp;&amp; apt-get install tcl8.5-dev tk8.5-dev</code> to install tcl/tk dev packages. Next, symlink the .so files to where the Ruby 1.9.3p484 package for Trusty expects them to be by doing: <code>$ ln -s /usr/lib/libtk8.5.so /usr/lib/x86_64-linux-gnu/libtk8.5.so &amp;&amp; ln -s /usr/lib/libtcl8.5.so /usr/lib/x86_64-linux-gnu/libtcl8.5.so</code>. Next, exit the chroot environment by hitting Control-D or <code>$ exit</code>. Normally, <code>pbuilder</code> will take care of downloading build-dependencies for you, but in this case, the problem is that the Ruby 1.9.3p484 package for Trusty assumes taht <code>libtcl</code> and <code>libtk</code> <code>.so</code> files are located in places where they are not installed by default on our target distro.</li>
<li><code>$ sudo DIST=oneiric ARCH=amd64 pbuilder build ruby1.9.1_1.9.3.484-1ubuntu2~ubuntu11.10.1.dsc</code> to instruct <code>pbuilder</code> to build your package. Go grab a coffee, walk your dog, etc. because this may take a while. If you are running in a VM (e.g. in Vagrant), be sure you’ve allocated enough memory (I recommend at least 2GB) so that the build tests for Ruby will pass.</li>
<li>When <code>pbuilder</code> is done, look in <code>/var/cache/pbuilder/oneiric-amd64/result/</code> for your packages</li>
</ol>


<h2>Conclusion</h2>

<p>There are a few places where I needed to get my hands dirty and look at package source code to understand where and why things were failing. Hopefully this guide helps you to backport not only Ruby, but any Ubuntu/Debian package between different releases !</p>

<p>If you have problems and questions, please leave a comment :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Schwatcher v0.0.7 Released]]></title>
    <link href="https://beachape.com/blog/2013/12/04/schwatcher-v0-dot-0-7-released/"/>
    <updated>2013-12-04T21:18:00+09:00</updated>
    <id>https://beachape.com/blog/2013/12/04/schwatcher-v0-dot-0-7-released</id>
    <content type="html"><![CDATA[<p>Version 0.0.7 of Schwatcher has been released.</p>

<p>Changes:</p>

<ul>
<li>No longer has external logging library dependencies. Thanks <a href="https://github.com/crdueck">crdueck</a> for the suggestion.</li>
<li>No longer uses any mutable members for extra thread-safety</li>
</ul>


<p>Relevent info:</p>

<ul>
<li><a href="https://github.com/lloydmeta/schwatcher">Schwatcher Github repo</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Schwatcher v0.0.4 Released]]></title>
    <link href="https://beachape.com/blog/2013/10/21/schwatcher-v0-dot-0-4-released/"/>
    <updated>2013-10-21T09:08:00+09:00</updated>
    <id>https://beachape.com/blog/2013/10/21/schwatcher-v0-dot-0-4-released</id>
    <content type="html"><![CDATA[<p>Version 0.0.4 of Schwatcher has been released.</p>

<p>Changes:</p>

<ul>
<li>No longer uses Akka Agent to hold CallbackRegistry (thanks crdueck). This should result in a small performance increase because of more &#8216;direct&#8217; memory access inside MonitorActor.</li>
<li>Refactored testing for better coverage and maintainability</li>
<li>Scala 2.10.3 support in testing</li>
</ul>


<p>Relevent info:</p>

<ul>
<li><a href="https://github.com/lloydmeta/schwatcher">Schwatcher Github repo</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Schwatcher v0.0.3 Released]]></title>
    <link href="https://beachape.com/blog/2013/09/19/schwatcher-v0-dot-0-3-released/"/>
    <updated>2013-09-19T09:16:00+09:00</updated>
    <id>https://beachape.com/blog/2013/09/19/schwatcher-v0-dot-0-3-released</id>
    <content type="html"><![CDATA[<p>Version 0.0.3 of Schwatcher upgrades the Akka library used by the plugin to 2.2.1 so that devs already using Akka 2.2.x are able to use this library.</p>

<p>Those upgrading to 0.0.3 of Schwatcher who aren&#8217;t already using Akka 2.2.x should read the <a href="http://doc.akka.io/docs/akka/current/project/migration-guide-2.1.x-2.2.x.html">2.1.x to 2.2.x Akka migration guide</a> to make sure their projects don&#8217;t break.</p>

<p>Relevent info:</p>

<ul>
<li><a href="https://github.com/lloydmeta/schwatcher">Schwatcher Github repo</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Resolving 'Java OOM: Unable to Create New Native Thread' Errors on Heroku]]></title>
    <link href="https://beachape.com/blog/2013/09/12/resolving-java-oom-unable-to-create-new-native-thread-errors-on-heroku/"/>
    <updated>2013-09-12T13:25:00+09:00</updated>
    <id>https://beachape.com/blog/2013/09/12/resolving-java-oom-unable-to-create-new-native-thread-errors-on-heroku</id>
    <content type="html"><![CDATA[<p>For the most part, I&#8217;m a very happy Heroku user. The platform allows me deploy my apps, be they Java, Scala or Ruby-based without having to think/worry about infrastructure, which is amazing. They also allow me to, for the most part, do this for free. For the most part, I love it, and so do many others. That said, sometimes you do run into problems that cause you to lose lots of time debugging &#8230; in the wrong direction.</p>

<p>Yesterday, after adding non-blocking I/O to my <a href="https://github.com/lloydmeta/metascraper">Metascraper library</a>, I load tested my deployed application and found it fatally crashing with <code>java.lang.OutOfMemoryError: unable to create new native thread</code> errors. <strong>Not Good</strong></p>

<!-- more -->


<h3>What I did wrong</h3>

<p>Because of the error thrown, I immediately thought to myself: &#8220;there&#8217;s gotta be a memory leak. Good thing I&#8217;m monitoring the app with New Relic !&#8221;. For the most part, if you <a href="https://www.google.com/search?q=java+out+of+memory+error+unable+to+create+new+native+thread&amp;oq=java+out+of+memory+error+unable+to+create+new+native+thread&amp;aqs=chrome..69i57.273j0&amp;sourceid=chrome&amp;ie=UTF-8">Google the error</a>, you find a lot of posts suggesting that your app has a memory leak somewhere, you need to tweak your VM memory options, etc. <strong>All of this advice is valid.</strong></p>

<p>After looking at my instance&#8217;s memory usage though, it didn&#8217;t seem like that was the problem; used heap, commited heap, etc all looked fine. I should have probably stopped looking at memory usage, but I didn&#8217;t and proceeded to spend a few hours going through the cycle of combing through code, tweaking memory options, and testing. To no avail.</p>

<h3>Seeing the light</h3>

<p>Then, finally, I stumbled across <a href="http://devgrok.blogspot.jp/2012/03/resolving-outofmemoryerror-unable-to.html">this page</a>, talking about how to resolve said OOM error. In short, the JVM apparently throws the Java OOM error whenever it can&#8217;t allocate a new thread from the OS, regardless of the cause. Their solution was to up the max processes per user. Hmmmm.</p>

<figure class='code'><figcaption><span>Where in jvm.cpp that the error is thrown</span><a href='http://hg.openjdk.java.net/jdk7/jdk7/hotspot/file/tip/src/share/vm/prims/jvm.cpp'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">native_thread</span><span class="o">-&gt;</span><span class="n">osthread</span><span class="p">()</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// No one should hold a reference to the &#39;native_thread&#39;.</span>
</span><span class='line'>  <span class="n">delete</span> <span class="n">native_thread</span><span class="p">;</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">JvmtiExport</span><span class="o">::</span><span class="n">should_post_resource_exhausted</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">JvmtiExport</span><span class="o">::</span><span class="n">post_resource_exhausted</span><span class="p">(</span>
</span><span class='line'>      <span class="n">JVMTI_RESOURCE_EXHAUSTED_OOM_ERROR</span> <span class="o">|</span> <span class="n">JVMTI_RESOURCE_EXHAUSTED_THREADS</span><span class="p">,</span>
</span><span class='line'>      <span class="s">&quot;unable to create new native thread&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">THROW_MSG</span><span class="p">(</span><span class="n">vmSymbols</span><span class="o">::</span><span class="n">java_lang_OutOfMemoryError</span><span class="p">(),</span>
</span><span class='line'>            <span class="s">&quot;unable to create new native thread&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Since I had added non-blocking I/O, which inherently must be doing some kind of threading somewhere, I felt I was on to something. Googling &#8220;Heroku thread limits&#8221; brought me to <a href="https://devcenter.heroku.com/articles/limits#processes-threads">this page</a></p>

<blockquote><p>1X Dynos are limited a combined sum of 256 processes and threads. 2X Dynos are limited to 512. This limit applies whether they are executing, sleeping, or in any other state.</p><footer><strong>Heroku</strong> <cite><a href='https://devcenter.heroku.com/articles/limits#processes-threads'>devcenter.heroku.com/articles/&hellip;</a></cite></footer></blockquote>


<p>Bingo, but because there was nothing I could do about Heroku&#8217;s thread+process limits, I decided to look at the code for <a href="https://github.com/dispatch/reboot">Dispatch</a>, the HTTP library I&#8217;m using for fetching pages from URLs to look at how it manages threads. This is where things get icky.</p>

<h3>Diving in</h3>

<p>Apparently, in previous versions of Dispatch, one could configure the number of threads easily (I believe in 0.9.x, you had access to a <code>threads</code> method). However, in the version that I&#8217;m using (latest as of writing), version 0.11.0, you do not. Moreover, unless being called from <code>sbt</code>, the library now defaults to building clients using the default configuration for the underlying <code>async-http-client</code> (which does make sense). Unfortunately, <a href="https://github.com/AsyncHttpClient/async-http-client/blob/b9f1ca733d05530f19d66c4afbb9ee0aeafd05d1/api/src/main/java/org/asynchttpclient/AsyncHttpClientConfigBean.java#L81-L96">it appears that the default configuration therefore results in the use of</a> <code>Executor.newCachedThreadPool</code>, which some say is <a href="http://stackoverflow.com/questions/15058978/how-to-decide-whether-to-use-newcachedthreadpool-or-newfixedthreadpool">good</a> and <a href="http://paultyma.blogspot.jp/2008/03/writing-java-multithreaded-servers.html">bad</a>.</p>

<h3>Problem identified</h3>

<p>The main point is this: because of it&#8217;s use of <a href="http://docs.oracle.com/javase/6/docs/api/java/util/concurrent/Executors.html#newCachedThreadPool">newCachedThreadPool</a>, <strong><code>aysnc-http-client</code>, and thus <code>Dispatch</code> is going to use as many threads as necessary to handle the workload that you give it and rely on the JVM clean up idle threads later</strong> . Usually, this might not be a problem, but when running on Heroku or any other environment where you might hit thread limit constraints, the cleanup might not happen quick enough to not crash your program.</p>

<h3>Resolution</h3>

<p>To fix the scary &#8220;OOM unable to create new thread&#8221; problem when an app using my library is running in such an environment, I did a bit of sleuthing to find out how I might limit the number of threads used by my HTTP library and came up with <a href="https://github.com/lloydmeta/metascraper/blob/master/src/main/scala/com/beachape/metascraper/ScraperActor.scala#L63-L77">this</a>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="c1">// Http client</span>
</span><span class='line'><span class="k">lazy</span> <span class="k">val</span> <span class="n">followRedirects</span> <span class="k">=</span> <span class="kc">true</span>
</span><span class='line'><span class="k">lazy</span> <span class="k">val</span> <span class="n">connectionPooling</span> <span class="k">=</span> <span class="kc">true</span>
</span><span class='line'><span class="k">lazy</span> <span class="k">val</span> <span class="n">httpExecutorService</span><span class="k">:</span> <span class="kt">ExecutorService</span> <span class="o">=</span> <span class="nc">Executors</span><span class="o">.</span><span class="n">newFixedThreadPool</span><span class="o">(</span><span class="n">httpExecutorThreads</span><span class="o">)</span>
</span><span class='line'><span class="k">lazy</span> <span class="k">val</span> <span class="n">config</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">AsyncHttpClientConfig</span><span class="o">.</span><span class="nc">Builder</span><span class="o">()</span>
</span><span class='line'>  <span class="o">.</span><span class="n">setExecutorService</span><span class="o">(</span><span class="n">httpExecutorService</span><span class="o">)</span>
</span><span class='line'>  <span class="o">.</span><span class="n">setMaximumConnectionsPerHost</span><span class="o">(</span><span class="n">maxConnectionsPerHost</span><span class="o">)</span>
</span><span class='line'>  <span class="o">.</span><span class="n">setAllowPoolingConnection</span><span class="o">(</span><span class="n">connectionPooling</span><span class="o">)</span>
</span><span class='line'>  <span class="o">.</span><span class="n">setAllowSslConnectionPool</span><span class="o">(</span><span class="n">connectionPooling</span><span class="o">)</span>
</span><span class='line'>  <span class="o">.</span><span class="n">setConnectionTimeoutInMs</span><span class="o">(</span><span class="n">connectionTimeoutInMs</span><span class="o">)</span>
</span><span class='line'>  <span class="o">.</span><span class="n">setRequestTimeoutInMs</span><span class="o">(</span><span class="n">requestTimeoutInMs</span><span class="o">)</span>
</span><span class='line'>  <span class="o">.</span><span class="n">setCompressionEnabled</span><span class="o">(</span><span class="n">compressionEnabled</span><span class="o">)</span>
</span><span class='line'>  <span class="o">.</span><span class="n">setFollowRedirects</span><span class="o">(</span><span class="n">followRedirects</span><span class="o">).</span><span class="n">build</span>
</span><span class='line'><span class="k">lazy</span> <span class="k">val</span> <span class="n">asyncHttpClient</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">AsyncHttpClient</span><span class="o">(</span><span class="n">config</span><span class="o">)</span>
</span><span class='line'><span class="k">lazy</span> <span class="k">val</span> <span class="n">httpClient</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">Http</span><span class="o">(</span><span class="n">asyncHttpClient</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>It makes more sense when you look at the entire Actor source, but in short, I instantiate an HTTP client, passing in an <code>ExecutorService</code> that uses a <strong>fixed</strong> threads pool. I then allow library users to configure the number of threads for the client when instantiating the actor (and other options). Of course, this means that an actor&#8217;s HTTP client will wait if all execution threads are busy, but since it&#8217;s a non-blocking call, the actor itself doesn&#8217;t care, and the only negative result is maybe slower operations under load. All in all, I think it&#8217;s a good tradeoff for not having your app die.</p>

<h3>Lessons learned</h3>

<ol>
<li>Don&#8217;t take an error message at face value. Know exactly when it gets thrown and if there are multiple possible causes, go for the most likely one first.</li>
<li>Know your environment and its constraints.</li>
</ol>


<p>Hoped this post helped you !</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Metascraper v0.2.1 Released]]></title>
    <link href="https://beachape.com/blog/2013/09/12/metascraper-v0-dot-2-1-released/"/>
    <updated>2013-09-12T10:04:00+09:00</updated>
    <id>https://beachape.com/blog/2013/09/12/metascraper-v0-dot-2-1-released</id>
    <content type="html"><![CDATA[<p>Sorry for the quick version-up. Version 0.1.1 added non-blocking I/O, but was using Dispatch without configuring the threadpool used for HTTP connections. This caused issues on Heroku where there is a 256 combined thread + process limit for 1x dynos (512 for 2x dynos), whereby Java OOM &#8220;unable to create new native thread&#8221; errors would be thrown.</p>

<p>0.2.1 adds:</p>

<ul>
<li>Configuration of Actor HTTP client on ScraperActor instantiation

<ul>
<li>Notably: HTTP client ExecutorService thread pool</li>
</ul>
</li>
</ul>


<p>Relevent info:</p>

<ul>
<li><a href="https://github.com/lloydmeta/metascraper">Metascraper Github repo</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Metascraper v0.1.1 Released]]></title>
    <link href="https://beachape.com/blog/2013/09/11/metascraper-v0-dot-1-1-released/"/>
    <updated>2013-09-11T16:13:00+09:00</updated>
    <id>https://beachape.com/blog/2013/09/11/metascraper-v0-dot-1-1-released</id>
    <content type="html"><![CDATA[<p>Metascraper v0.1.1 has been released. Major changes include:</p>

<ul>
<li>Async / non-blocking I/O for page requests: <a href="https://github.com/lloydmeta/metascraper/issues/2">Originally suggested by analytically</a>, I&#8217;ve added asynchronous requesting of webpages via <a href="http://dispatch.databinder.net/Dispatch.html">Dispatch</a></li>
<li>ScraperActor now replies with <code>Either[Throwable, ScrapedData]</code> whereas before it replied with <code>Either[Throwable, ScrapedData]</code>. This allows library users to access the full capabilities of thrown objects. <em>This might break your app</em></li>
<li>Added URL validations</li>
<li>Better guessing of metadata</li>
<li>More relevant <code>User-Agent</code> out of the box</li>
<li>Better test coverage</li>
</ul>


<p>Relevent info:</p>

<ul>
<li><a href="https://github.com/lloydmeta/metascraper">Metascraper Github repo</a></li>
<li>Add<code>libraryDependencies += "com.beachape.metascraper" %% "metascraper" % "0.1.1"</code> into <code>build.sbt</code> to install</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introducing Metascraper - a Scala Library for Scraping Page Metadata]]></title>
    <link href="https://beachape.com/blog/2013/09/05/introducing-metascraper-a-scala-library-for-scraping-page-metadata/"/>
    <updated>2013-09-05T10:26:00+09:00</updated>
    <id>https://beachape.com/blog/2013/09/05/introducing-metascraper-a-scala-library-for-scraping-page-metadata</id>
    <content type="html"><![CDATA[<p>Scraping metadata (e.g. <code>title</code>, <code>description</code>, <code>url</code>, etc.) from a URL is something that <a href="https://www.facebook.com/">Facebook</a> currently does for you when you paste a URL into the &#8220;Update Status&#8221; box. For a service that I&#8217;m currently building out, we wanted to do this as well for our users. Thus <a href="https://github.com/lloydmeta/metascraper">Metascraper</a> was born.</p>

<p>There was already a Ruby solution called <a href="https://github.com/gottfrois/link_thumbnailer">link_thumbnailer</a>, but since this is a I/O heavy operation, I knew I wanted to build a solution using tools that supported non-blocking I/O and could be used without getting caught in callback spaghetti. Scala, Akka, and the Play framework immediately came to mind.</p>

<!-- more -->


<h2>Existing solutions</h2>

<p>Before I started building my own solution, I did some research and found that there were already some web-scraping solutions written in Scala or Java, such as <a href="https://github.com/ofrasergreen/chafed">chafed</a>, and some more listed in <a href="http://stackoverflow.com/questions/14745634/web-scraping-with-scala">this StackOverflow question</a>.</p>

<p>I wanted something more focused, something that would &#8220;intelligently&#8221; return a page&#8217;s title, description, urls, and images back. I also wanted to make sure that if the page implemented the <a href="http://ogp.me/">Open Graph Protocol</a>, the information from those tags got prioritised. Since these requirements were not being fulfilled by existing Scala libraries, I set about creating my own Scala library.</p>

<h2>Metascraper Components</h2>

<p>The main components of the Metascraper library include:</p>

<ol>
<li><a href="http://akka.io/">Akka actors</a></li>
<li><a href="http://jsoup.org/">jsoup</a>: While there were Scala web scrapers, the Java solution, jsoup, was very mature and easy to use.</li>
</ol>


<h2>Basic workflow (a.k.a. how to use)</h2>

<p>This post won&#8217;t go over in too much detail how to use the library because that stuff is available from the <a href="https://github.com/lloydmeta/metascraper">Metascraper Github page</a> and will probably change over time, but this is the basic workflow:</p>

<ol>
<li>Instantiate a <code>ScraperActor</code></li>
<li>Send a message to the scraper with <code>ScrapeUrl(url: String)</code></li>
<li>When scraping is done, the actor will reply with a <code>Either[FailedToScrapeUrl,ScrapedData]</code></li>
</ol>


<p>The project is Mavenised and is availale from the Central Repository, so simply add the <code>libraryDependency</code> in your <code>build.sbt</code> (when you read this the versioning might be different so refer to the project&#8217;s Github page):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">libraryDependencies</span> <span class="o">+=</span> <span class="s">&quot;com.beachape.metascraper&quot;</span> <span class="o">%%</span> <span class="s">&quot;metascraper&quot;</span> <span class="o">%</span> <span class="s">&quot;0.0.2&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>And to use it,</p>

<figure class='code'><figcaption><span>Metascraper example code (metascraper_example.scala)</span> <a href='https://beachape.com/downloads/code/scala/metascraper_example.scala'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">import</span> <span class="nn">akka.actor.ActorSystem</span>
</span><span class='line'><span class="k">import</span> <span class="nn">com.beachape.metascraper.Messages._</span>
</span><span class='line'><span class="k">import</span> <span class="nn">com.beachape.metascraper.ScraperActor</span>
</span><span class='line'><span class="k">import</span> <span class="nn">scala.concurrent.Await</span>
</span><span class='line'><span class="k">import</span> <span class="nn">akka.pattern.ask</span>
</span><span class='line'><span class="k">import</span> <span class="nn">akka.util.Timeout</span>
</span><span class='line'><span class="k">import</span> <span class="nn">scala.concurrent.duration._</span>
</span><span class='line'>
</span><span class='line'><span class="k">implicit</span> <span class="k">val</span> <span class="n">timeout</span> <span class="k">=</span> <span class="nc">Timeout</span><span class="o">(</span><span class="mi">30</span> <span class="n">seconds</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">implicit</span> <span class="k">val</span> <span class="n">system</span> <span class="k">=</span> <span class="nc">ActorSystem</span><span class="o">(</span><span class="s">&quot;actorSystem&quot;</span><span class="o">)</span>
</span><span class='line'><span class="k">implicit</span> <span class="k">val</span> <span class="n">dispatcher</span> <span class="k">=</span> <span class="n">system</span><span class="o">.</span><span class="n">dispatcher</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="n">scraperActor</span> <span class="k">=</span> <span class="n">system</span><span class="o">.</span><span class="n">actorOf</span><span class="o">(</span><span class="nc">ScraperActor</span><span class="o">())</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">future</span> <span class="k">&lt;-</span> <span class="n">ask</span><span class="o">(</span><span class="n">scraperActor</span><span class="o">,</span> <span class="nc">ScrapeUrl</span><span class="o">(</span><span class="s">&quot;https://bbc.co.uk&quot;</span><span class="o">)).</span><span class="n">mapTo</span><span class="o">[</span><span class="kt">Either</span><span class="o">[</span><span class="kt">FailedToScrapeUrl</span>,<span class="kt">ScrapedData</span><span class="o">]]</span>
</span><span class='line'><span class="o">}</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">future</span> <span class="k">match</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">case</span> <span class="nc">Left</span><span class="o">(</span><span class="n">failed</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">println</span><span class="o">(</span><span class="s">&quot;Failed: &quot;</span><span class="o">)</span>
</span><span class='line'>      <span class="n">println</span><span class="o">(</span><span class="n">failed</span><span class="o">.</span><span class="n">message</span><span class="o">)</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">case</span> <span class="nc">Right</span><span class="o">(</span><span class="n">data</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">println</span><span class="o">(</span><span class="s">&quot;Image urls&quot;</span><span class="o">)</span>
</span><span class='line'>      <span class="n">data</span><span class="o">.</span><span class="n">imageUrls</span><span class="o">.</span><span class="n">foreach</span><span class="o">(</span><span class="n">println</span><span class="o">)</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> #=&gt;</span>
</span><span class='line'><span class="cm">  Image URLs:</span>
</span><span class='line'><span class="cm">  http://www.bbc.co.uk/img/iphone.png</span>
</span><span class='line'><span class="cm">  http://sa.bbc.co.uk/bbc/bbc/s?name=SET-COUNTER&amp;pal_route=index&amp;ml_name=barlesque&amp;app_type=web&amp;language=en-GB&amp;ml_version=0.16.1&amp;pal_webapp=wwhp&amp;blq_s=3.5&amp;blq_r=3.5&amp;blq_v=default-worldwide</span>
</span><span class='line'><span class="cm">  http://static.bbci.co.uk/frameworks/barlesque/2.51.2/desktop/3.5/img/blq-blocks_grey_alpha.png</span>
</span><span class='line'><span class="cm">  http://static.bbci.co.uk/frameworks/barlesque/2.51.2/desktop/3.5/img/blq-search_grey_alpha.png</span>
</span><span class='line'><span class="cm">  http://news.bbcimg.co.uk/media/images/69612000/jpg/_69612953_69612952.jpg</span>
</span><span class='line'><span class="cm">*/</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Example application</h2>

<p>I&#8217;ve created an example Play2 application that integrates this library, called <a href="https://github.com/lloydmeta/metascraper-service">metascraper-service</a>. Feel free to take a look !</p>

<h2>Conclusion</h2>

<p>Please give <a href="https://github.com/lloydmeta/metascraper">Metascraper</a> a test drive and submit issues and pull requests !</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introducing Schwatcher]]></title>
    <link href="https://beachape.com/blog/2013/07/23/introducing-schwatcher/"/>
    <updated>2013-07-23T07:55:00+09:00</updated>
    <id>https://beachape.com/blog/2013/07/23/introducing-schwatcher</id>
    <content type="html"><![CDATA[<p>The <a href="http://docs.oracle.com/javase/7/docs/api/java/nio/file/WatchService.html">WatchService</a> was added as part of Java 7 and introduced the ability to monitor files through the JVM without the use of external libraries like <a href="http://jnotify.sourceforge.net/">JNotify</a> that require installing native libraries. Using this API for a project that requires monitoring files makes handling dependencies for both deployment and development much simpler.</p>

<p>Since Scala is able to directly invoke Java, I wanted to use this API when I was building <a href="https://github.com/lloydmeta/akanori-thrift">Akanori-thrift</a>, a trending-words detection service that is focused on the Japanese language. This post will not go over that service in detail (that will take up an entire post of its own if not more) but my use-case there was monitor a custom dictionary file for updates and then spawn a new instance of the <code>Tokenizer</code> that uses the updated state of the file.</p>

<p>I quickly realised a few pain-points:</p>

<ol>
<li>There existed no file monitoring Scala library (at the time),</li>
<li>Using the WatchService API requires the use of a blocking thread to get events,</li>
<li>The WatchService API does not have recursive monitoring support built in</li>
</ol>


<p>To address these, I set out to create <a href="https://github.com/lloydmeta/schwatcher">Schwatcher</a>, a Scala library that wraps the WatchService API of Java7 and allows callbacks to be registered and unregistered on both directories and files both as individual paths and recursively. Furthermore, I wanted to facilitate the use of the Java7 API in Scala in a simple way that is in line with the functional programming paradigm.</p>

<!-- more -->


<h2>Components</h2>

<p>The main components of the Schwatcher library include:</p>

<ol>
<li><a href="http://akka.io/">Akka actors</a>: While I was building <a href="https://github.com/lloydmeta/akanori-thrift">Akanori-thrift</a>, I already knew that I wanted to use Akka actors as an abstraction of concurrency for their resilience and concurrency control tools (<a href="http://doc.akka.io/docs/akka/2.1.4/scala/agents.html">Agents</a> in particular).</li>
<li>Threads: After reading <a href="http://java.dzone.com/articles/watchservice-combined-akka">this awesome blog post</a> on how to use Akka actors with Watchservice by encapsulating the blocking loop in a thread via Runnable, I knew I wanted to use this pattern for Schwatcher.</li>
<li>CallbackRegistry: A callback registry that maps paths to a list of callback functions that get called when the Java 7 service signals that an event has occured on a specific path.</li>
</ol>


<h2>Basic workflow (a.k.a. how to use)</h2>

<p>This post won&#8217;t go over in too much detail how to use the library because that stuff is available from the <a href="https://github.com/lloydmeta/schwatcher">Schwatcher Github page</a> and will probably change over time, but this is the basic workflow:</p>

<ol>
<li>Instantiate a <code>MonitorActor</code></li>
<li>Register callbacks by sending <code>RegisterCallback</code> messages to the MonitorActor and passing in a path with an <a href="http://docs.oracle.com/javase/7/docs/api/java/nio/file/StandardWatchEventKinds.html">event type</a>.</li>
<li>Carry on, as your callbacks will be called when events happen</li>
</ol>


<p>The project is Mavenised and is availale from the Central Repository, so simply add the <code>libraryDependency</code> in your <code>build.sbt</code> (when you read this the versioning might be different so refer to the project&#8217;s Github page):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">libraryDependencies</span> <span class="o">+=</span> <span class="s">&quot;com.beachape.filemanagement&quot;</span> <span class="o">%%</span> <span class="s">&quot;schwatcher&quot;</span> <span class="o">%</span> <span class="s">&quot;0.0.2&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>And to use it,</p>

<figure class='code'><figcaption><span>Schwatcher example code (schwatcher_example.scala)</span> <a href='https://beachape.com/downloads/code/scala/schwatcher_example.scala'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">import</span> <span class="nn">akka.actor.ActorSystem</span>
</span><span class='line'><span class="k">import</span> <span class="nn">com.beachape.filemanagement.MonitorActor</span>
</span><span class='line'><span class="k">import</span> <span class="nn">com.beachape.filemanagement.RegistryTypes._</span>
</span><span class='line'><span class="k">import</span> <span class="nn">com.beachape.filemanagement.Messages._</span>
</span><span class='line'>
</span><span class='line'><span class="k">import</span> <span class="nn">java.io.</span><span class="o">{</span><span class="nc">FileWriter</span><span class="o">,</span> <span class="nc">BufferedWriter</span><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">import</span> <span class="nn">java.nio.file.Paths</span>
</span><span class='line'><span class="k">import</span> <span class="nn">java.nio.file.StandardWatchEventKinds._</span>
</span><span class='line'>
</span><span class='line'><span class="k">implicit</span> <span class="k">val</span> <span class="n">system</span> <span class="k">=</span> <span class="nc">ActorSystem</span><span class="o">(</span><span class="s">&quot;actorSystem&quot;</span><span class="o">)</span>
</span><span class='line'><span class="k">val</span> <span class="n">fileMonitorActor</span> <span class="k">=</span> <span class="n">system</span><span class="o">.</span><span class="n">actorOf</span><span class="o">(</span><span class="nc">MonitorActor</span><span class="o">(</span><span class="n">concurrency</span> <span class="k">=</span> <span class="mi">2</span><span class="o">))</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="n">modifyCallbackFile</span><span class="k">:</span> <span class="kt">Callback</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">path</span> <span class="k">=&gt;</span> <span class="n">println</span><span class="o">(</span><span class="n">s</span><span class="s">&quot;Something was modified in a file: $path&quot;</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="k">val</span> <span class="n">modifyCallbackDirectory</span><span class="k">:</span> <span class="kt">Callback</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">path</span> <span class="k">=&gt;</span> <span class="n">println</span><span class="o">(</span><span class="n">s</span><span class="s">&quot;Something was modified in a directory: $path&quot;</span><span class="o">)</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="n">desktop</span> <span class="k">=</span> <span class="nc">Paths</span> <span class="n">get</span> <span class="s">&quot;/Users/lloyd/Desktop&quot;</span>
</span><span class='line'><span class="k">val</span> <span class="n">desktopFile</span> <span class="k">=</span> <span class="nc">Paths</span> <span class="n">get</span> <span class="s">&quot;/Users/lloyd/Desktop/test&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">  This will receive callbacks for just the one file</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="n">fileMonitorActor</span> <span class="o">!</span> <span class="nc">RegisterCallback</span><span class="o">(</span>
</span><span class='line'>  <span class="nc">ENTRY_MODIFY</span><span class="o">,</span>
</span><span class='line'>  <span class="n">recursive</span> <span class="k">=</span> <span class="kc">false</span><span class="o">,</span>
</span><span class='line'>  <span class="n">path</span> <span class="k">=</span> <span class="n">desktopFile</span><span class="o">,</span>
</span><span class='line'>  <span class="n">modifyCallbackFile</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">  If desktopFile is modified, this will also receive a callback</span>
</span><span class='line'><span class="cm">  it will receive callbacks for everything under the desktop directory</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'><span class="n">fileMonitorActor</span> <span class="o">!</span> <span class="nc">RegisterCallback</span><span class="o">(</span>
</span><span class='line'>  <span class="nc">ENTRY_MODIFY</span><span class="o">,</span>
</span><span class='line'>  <span class="n">recursive</span> <span class="k">=</span> <span class="kc">false</span><span class="o">,</span>
</span><span class='line'>  <span class="n">path</span> <span class="k">=</span> <span class="n">desktop</span><span class="o">,</span>
</span><span class='line'>  <span class="n">modifyCallbackDirectory</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">//modify a monitored file</span>
</span><span class='line'><span class="k">val</span> <span class="n">writer</span> <span class="k">=</span> <span class="k">new</span> <span class="nc">BufferedWriter</span><span class="o">(</span><span class="k">new</span> <span class="nc">FileWriter</span><span class="o">(</span><span class="n">desktopFile</span><span class="o">.</span><span class="n">toFile</span><span class="o">))</span>
</span><span class='line'><span class="n">writer</span><span class="o">.</span><span class="n">write</span><span class="o">(</span><span class="s">&quot;Theres text in here wee!!&quot;</span><span class="o">)</span>
</span><span class='line'><span class="n">writer</span><span class="o">.</span><span class="n">close</span><span class="o">()</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// #=&gt; Something was modified in a file: /Users/a13075/Desktop/test.txt</span>
</span><span class='line'><span class="c1">//     Something was modified in a directory: /Users/a13075/Desktop/test.txt</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Behind the scenes workflow</h2>

<p>A few things happen behind the scenes (accurate at time of writing):</p>

<ol>
<li>Upon the <code>MonitorActor</code>  &#8216;s instantiation, a private <code>WatchServiceTask</code> <code>Runnable</code> object is created and its accompanying <code>WatchService</code> thread (the blocking thread that takes events from the Java 7 WatchService) is started. The <code>MonitorActor</code> is in charge of keeping tabs (starting and stopping) the <code>WatchService</code> thread.</li>
<li>The <code>MonitorActor</code> also instantiates a <code>Map</code> of type <code>[EventType, Agent[CallbackRegistry]]</code>. <code>CallbackRegistry</code> objects are themselves Maps of type <code>[Path, List[Path =&gt; Unit]]</code> and are immutable. The callbacks are put inside an <code>Agent</code> to assure atomic concurrent updates.</li>
<li>When registering a <code>Path</code> and file system event type with a <code>Callback</code> function, a <code>RegisterCallback</code> message is sent to the MonitorActor and the <code>MonitorActor</code> sends an update message on the <code>Agent</code> containing the <code>CallbackRegistry</code> for that event type. Adding callback functions or paths to a <code>CallbackRegistry</code> creates a new one containing the (new) path and its new accompanying <code>List[Callback]</code> while leaving the old one untouched. Un-registering a path&#8217;s callbacks work the same way (but in reverse).</li>
<li>If <code>recursive</code> is set to <code>true</code> in the <code>RegisterCallback</code> or <code>UnRegisterCallback</code> messages, then the path&#8217;s tree is walked and each directory is registered with callbacks as long as the initial path given is that of a directory.</li>
<li>When an event is picked up from the Java 7 WatchService within the <code>WatchService</code> thread (mentioned in 1), a <code>EventAtPath</code> message is sent from that thread its parent <code>MonitorActor</code>, containing the event type and the path of the event.</li>
<li>The <code>MonitorActor</code> receives the <code>EventAtPath</code> message and looks up the proper list of callbacks for the event type and path and sends each callback packaged inside <code>PerformCallback</code> messages to it&#8217;s pool of <code>CallbackActor</code>s via a <code>SmallestMailbox</code> router. Thus, callbacks are handled concurrently (or, if desired, one at a time by sending <code>MonitorActor</code>&#8217;s <code>concurrency</code> parameter to 1 when instantiating it)</li>
</ol>


<h2>Conclusion</h2>

<p>Hopefully, <a href="https://github.com/lloydmeta/schwatcher">Schwatcher</a> is useful for Scala developers looking to monitor the file system. Questions, pull requests, feedback are greatly appreciated !</p>

<h2>Publishing to Maven</h2>

<p>As a side-note, when publishing this library to Maven via Sonatype, I found the following links very helpful:</p>

<ol>
<li><a href="http://www.scala-sbt.org/0.12.3/docs/Community/Using-Sonatype.html">Offical Scala-sbt&#8217;s guide to Deploying to Sonatype</a></li>
<li><a href="https://docs.sonatype.org/display/Repository/Sonatype+OSS+Maven+Repository+Usage+Guide">Sonatype OSS Maven Repository usage guide</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Scala: Processing Option-wrapped Collections]]></title>
    <link href="https://beachape.com/blog/2013/06/20/scala-processing-option-wrapped-collections/"/>
    <updated>2013-06-20T11:14:00+09:00</updated>
    <id>https://beachape.com/blog/2013/06/20/scala-processing-option-wrapped-collections</id>
    <content type="html"><![CDATA[<p>In Scala, there are a lot of cool things - too many to list. Among them is something borrowed from Haskell; the <strong>Maybe</strong>, spelt <a href="http://www.scala-lang.org/api/current/index.html#scala.Option"><em>Option</em> in Scala</a>, which itself is based on the concept of computing via <a href="http://en.wikibooks.org/wiki/Haskell/Understanding_monads">monads</a>.</p>

<p>The reason why <code>Option</code> is awesome is that, if used properly, it largely frees the programmer from having to worry about various variables being in states of nothingness (Nil, null, etc). Without fail, every programmer has at one point or another written things like <code>thing.nil? ? do_nothing : do_something</code> &#8230;. all over the place. The point (in my mind, at least) of <code>Option</code> is to free us from having to do this in as many places as possible.</p>

<p>Many libraries in Scala, such as <a href="https://github.com/debasishg/scala-redis">Scala-Redis</a> are made with the assumption that the programmer knows how to deal with <code>Option</code> and return results wrapped in either <code>Some[List[T]]</code> or <code>None</code>.  That said, how to work with these types of results is not exactly straight forward for someone coming from other languages that don&#8217;t have such constructs, so I&#8217;ve written down some of my thoughts.</p>

<!-- more -->


<p>As an example, let&#8217;s try tackling the issue of how to use a result like the one that comes from <a href="https://github.com/debasishg/scala-redis">Scala-Redis</a>: <code>Some[List[T]]</code>.</p>

<p>To keep things simple, assume we have a <code>val maybeList = Some(List(1,2,3))</code> and we want to increment each member of the list inside the <code>Option</code>, and want to return another<code>Option</code> with the incremented list inside. While we could potentially do pattern matching to check if the <code>Option</code> is a <code>None</code>, we would prefer to take advantage of the patterns afforded to us by the fact that we&#8217;re dealing with an <code>Option</code>. This means using <code>map</code>, <code>flatMap</code> and <code>for</code>.</p>

<p>Based on what <a href="http://www.scala-lang.org/api/current/index.html#scala.Option">official Scala documentation on Options</a> tells us, we have</p>

<figure class='code'><figcaption><span>Scala option-wrapped collections (processing_option_wrapped_collections.scala)</span> <a href='https://beachape.com/downloads/code/scala/processing_option_wrapped_collections.scala'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">def</span> <span class="n">incrementMaybeList</span><span class="o">(</span><span class="n">maybeList</span><span class="k">:</span> <span class="kt">Option</span><span class="o">[</span><span class="kt">List</span><span class="o">[</span><span class="kt">Int</span><span class="o">]],</span> <span class="n">increment</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="mi">1</span><span class="o">)</span><span class="k">:</span> <span class="kt">Option</span><span class="o">[</span><span class="kt">List</span><span class="o">[</span><span class="kt">Int</span><span class="o">]]</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">maybeList</span><span class="o">.</span><span class="n">map</span><span class="o">{</span><span class="n">list</span> <span class="k">=&gt;</span>
</span><span class='line'>    <span class="n">list</span><span class="o">.</span><span class="n">map</span><span class="o">(</span><span class="k">_</span> <span class="o">+</span> <span class="n">increment</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="n">incrementMaybeListFor</span><span class="o">(</span><span class="n">maybeList</span><span class="k">:</span> <span class="kt">Option</span><span class="o">[</span><span class="kt">List</span><span class="o">[</span><span class="kt">Int</span><span class="o">]],</span> <span class="n">increment</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="mi">1</span><span class="o">)</span><span class="k">:</span> <span class="kt">Option</span><span class="o">[</span><span class="kt">List</span><span class="o">[</span><span class="kt">Int</span><span class="o">]]</span> <span class="k">=</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">for</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">list</span> <span class="k">&lt;-</span> <span class="n">maybeList</span>
</span><span class='line'>  <span class="o">}</span> <span class="k">yield</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">list</span> <span class="n">map</span> <span class="o">(</span><span class="k">_</span> <span class="o">+</span> <span class="mi">1</span><span class="o">)</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>There are two versions that we can choose from; one using <code>map</code> and another using <code>for</code>. In essense, they are the same, because <a href="http://tataryn.net/2011/10/whats-in-a-scala-for-comprehension/">for-comprehensions boil down to appropriate <code>map</code> and <code>flatMap</code> methods</a> anyway. This also means that sometimes you may get funky errors with type mismatch errors, for which a good rule of thumb is to remember that <a href="http://stackoverflow.com/questions/4719592/type-mismatch-on-scala-for-comprehension">for comprehensions will try to return the type of the collection of the first generator</a></p>

<p>Using the code above, we can do:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">val</span> <span class="n">maybeList</span> <span class="k">=</span> <span class="nc">Some</span><span class="o">(</span><span class="nc">List</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span><span class="mi">2</span><span class="o">,</span><span class="mi">3</span><span class="o">))</span>
</span><span class='line'><span class="k">val</span> <span class="n">incrementedMaybeList</span> <span class="k">=</span> <span class="n">incrementMaybeList</span><span class="o">(</span><span class="n">maybeList</span><span class="o">)</span>
</span><span class='line'><span class="c1">// =&gt; incrementedMaybeList: Option[List[Int]] = Some(List(2, 3, 4))</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="n">maybeListNone</span> <span class="k">=</span> <span class="nc">None</span>
</span><span class='line'><span class="k">val</span> <span class="n">incrementedMaybeList</span> <span class="k">=</span> <span class="n">incrementMaybeList</span><span class="o">(</span><span class="n">maybeListNone</span><span class="o">)</span>
</span><span class='line'><span class="c1">// =&gt; incrementedMaybeList: Option[List[Int]] = None</span>
</span></code></pre></td></tr></table></div></figure>


<p>The fact that calling <code>incrementMaybeList</code> with <code>maybeList</code> worked should not be surprising, but notice how <code>maybeListNone</code> didn&#8217;t cause the function to throw up. This is because calling methods like <code>map</code> or using for-comprehnsion on <code>Option</code>s that are <code>None</code> immediately return None instead of proceeding to run internal logic. No need to write if/else guards !</p>

<p>By building and using functions like <code>incrementMaybeList</code>, where an <code>Option</code> is processed and an <code>Option</code> is returned throughout the code, one can stop worrying about Nothingness (for the most part), because they can be chained together.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="n">incrementMaybeList</span><span class="o">(</span><span class="n">incrementMaybeList</span><span class="o">(</span><span class="nc">None</span><span class="o">))</span>
</span><span class='line'><span class="c1">// =&gt; Option[List[Int]] = None</span>
</span></code></pre></td></tr></table></div></figure>


<p>When the time comes to actually do something with those <code>Option</code>-wrapped results without returning another value, once again, its time to break out for-comprehensions.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="c1">// Unimaginatively print the incremented results</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span><span class="o">{</span>
</span><span class='line'>  <span class="n">list</span> <span class="k">&lt;-</span> <span class="n">incrementList</span><span class="o">(</span><span class="nc">Some</span><span class="o">(</span><span class="nc">List</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span><span class="mi">2</span><span class="o">,</span><span class="mi">3</span><span class="o">)))</span>
</span><span class='line'>  <span class="n">item</span> <span class="k">&lt;-</span> <span class="n">list</span>
</span><span class='line'><span class="o">}</span> <span class="n">println</span><span class="o">(</span><span class="n">item</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span><span class="o">{</span>
</span><span class='line'>  <span class="n">list</span> <span class="k">&lt;-</span> <span class="n">incrementMaybeList</span><span class="o">(</span><span class="n">incrementMaybeList</span><span class="o">(</span><span class="nc">None</span><span class="o">))</span>
</span><span class='line'>  <span class="n">item</span> <span class="k">&lt;-</span> <span class="n">list</span>
</span><span class='line'><span class="o">}</span> <span class="n">println</span><span class="o">(</span><span class="n">item</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Conclusion</h2>

<p><code>Option</code>s  free the programmer from worrying about Nothingness and thus from writing tons of boilerplate nothingness checks in our code. This blog post talks about a simplish, but applicable example on how to deal with <code>Option</code> in Scala.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby 2.0.0 Enumerable Lazy Benchmark]]></title>
    <link href="https://beachape.com/blog/2013/06/12/ruby-2-dot-0-0-enumerable-lazy-benchmark/"/>
    <updated>2013-06-12T10:30:00+09:00</updated>
    <id>https://beachape.com/blog/2013/06/12/ruby-2-dot-0-0-enumerable-lazy-benchmark</id>
    <content type="html"><![CDATA[<p>Ruby 2.0.0 was released a few months back and I finally had some time to look into some of the features and changes that came with it. Lazy collections has always been a cool concept for me and so I decided to do a few benchmarks.</p>

<!-- more -->


<p>That said, a quick Google search brought me to this <a href="http://dev.af83.com/2012/11/22/ruby-2-0-enumerator-lazy.html">great page</a> where someone had already written a usable benchmark back in 2012 when the 2.0.0 preview release came out:</p>

<figure class='code'><figcaption><span>Benchmark (ruby_2_0_0_enum_lazy_bench.rb)</span> <a href='https://beachape.com/downloads/code/ruby/ruby_2_0_0_enum_lazy_bench.rb'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="nb">require</span> <span class="s1">&#39;benchmark&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="o">[</span><span class="mi">10000</span><span class="p">,</span> <span class="mi">100000</span><span class="p">,</span> <span class="mi">1000000</span><span class="p">,</span> <span class="mi">10000000</span><span class="o">].</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">size</span><span class="o">|</span>
</span><span class='line'>  <span class="no">Benchmark</span><span class="o">.</span><span class="n">bm</span><span class="p">(</span><span class="mi">15</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">b</span><span class="o">|</span>
</span><span class='line'>    <span class="n">b</span><span class="o">.</span><span class="n">report</span><span class="p">(</span><span class="s2">&quot;chainable </span><span class="si">#{</span><span class="n">size</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">hashes</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.size</span><span class="p">)</span><span class="o">.</span><span class="n">select</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:even?</span><span class="p">)</span><span class="o">.</span><span class="n">map</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:hash</span><span class="p">)</span><span class="o">.</span><span class="n">map</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:to_s</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="no">Benchmark</span><span class="o">.</span><span class="n">bm</span><span class="p">(</span><span class="mi">15</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">b</span><span class="o">|</span>
</span><span class='line'>    <span class="n">b</span><span class="o">.</span><span class="n">report</span><span class="p">(</span><span class="s2">&quot;one iteration </span><span class="si">#{</span><span class="n">size</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">hashes</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.size</span><span class="p">)</span><span class="o">.</span><span class="n">inject</span><span class="p">(</span><span class="o">[]</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">accumulator</span><span class="p">,</span> <span class="n">number</span><span class="o">|</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">number</span><span class="o">.</span><span class="n">even?</span>
</span><span class='line'>          <span class="n">accumulator</span> <span class="o">&lt;&lt;</span> <span class="n">number</span><span class="o">.</span><span class="n">hash</span><span class="o">.</span><span class="n">to_s</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>          <span class="n">accumulator</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="no">Benchmark</span><span class="o">.</span><span class="n">bm</span><span class="p">(</span><span class="mi">15</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">b</span><span class="o">|</span>
</span><span class='line'>    <span class="n">b</span><span class="o">.</span><span class="n">report</span><span class="p">(</span><span class="s2">&quot;chainable lazy </span><span class="si">#{</span><span class="n">size</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">hashes</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.size</span><span class="p">)</span><span class="o">.</span><span class="n">lazy</span><span class="o">.</span><span class="n">select</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:even?</span><span class="p">)</span><span class="o">.</span><span class="n">map</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:hash</span><span class="p">)</span><span class="o">.</span><span class="n">map</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:to_s</span><span class="p">)</span><span class="o">.</span><span class="n">to_a</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>And then the results, with Ruby 2.0.0p0</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>                  user     system      total        real
</span><span class='line'>chainable 10000   0.000000   0.000000   0.000000 (  0.002659)
</span><span class='line'>                  user     system      total        real
</span><span class='line'>one iteration 10000  0.000000   0.000000   0.000000 (  0.002732)
</span><span class='line'>                  user     system      total        real
</span><span class='line'>chainable lazy 10000  0.010000   0.000000   0.010000 (  0.005103)
</span><span class='line'>                  user     system      total        real
</span><span class='line'>chainable 100000  0.030000   0.000000   0.030000 (  0.031249)
</span><span class='line'>                  user     system      total        real
</span><span class='line'>one iteration 100000  0.020000   0.000000   0.020000 (  0.027257)
</span><span class='line'>                  user     system      total        real
</span><span class='line'>chainable lazy 100000  0.060000   0.000000   0.060000 (  0.053770)
</span><span class='line'>                  user     system      total        real
</span><span class='line'>chainable 1000000  0.260000   0.010000   0.270000 (  0.270027)
</span><span class='line'>                  user     system      total        real
</span><span class='line'>one iteration 1000000  0.280000   0.010000   0.290000 (  0.283680)
</span><span class='line'>                  user     system      total        real
</span><span class='line'>chainable lazy 1000000  0.560000   0.010000   0.570000 (  0.566137)
</span><span class='line'>                  user     system      total        real
</span><span class='line'>chainable 10000000  2.830000   0.120000   2.950000 (  2.956604)
</span><span class='line'>                  user     system      total        real
</span><span class='line'>one iteration 10000000  2.910000   0.130000   3.040000 (  3.095763)
</span><span class='line'>                  user     system      total        real
</span><span class='line'>chainable lazy 10000000  5.580000   0.140000   5.720000 (  6.079247)</span></code></pre></td></tr></table></div></figure>


<h2>Conclusion</h2>

<p>Turns out that performance of Lazy relative to non-lazy variants hasn&#8217;t changed enough for it to be worthwhile to use for anything other than outrageously huge colletions (perhaps many many times larger than 10000000) from a performance point of view. That said, depending on the operation you&#8217;re performing, using Lazy might be useful if you want to play within memory constraints.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Simple String Pattern Checking in Ruby: Benchmark]]></title>
    <link href="https://beachape.com/blog/2013/04/06/simple-string-pattern-checking-in-ruby-benchmark/"/>
    <updated>2013-04-06T16:25:00+09:00</updated>
    <id>https://beachape.com/blog/2013/04/06/simple-string-pattern-checking-in-ruby-benchmark</id>
    <content type="html"><![CDATA[<p>Often times, as programmers, we need to check to see if a substring exists in a bigger string. Many programmers will instinctively reach out for Regex matching, but I often wondered if this was really the best way to do things, particularly in Ruby.</p>

<p>One day, in a Ruby-focused Skype group chat, a friend of mine asked the other members to give him a snippet of code that would allow him to take a hostname, check if the substring &#8216;qa&#8217; was in it and if it did, return &#8216;qa&#8217;, else &#8216;prod&#8217; (for production). My knee-jerk reaction was the same as the other members: use Regex. But I wondered if it would be better to use compiled Regex, or interpreted Regex, or perhaps maybe even the built in String method <a href="http://www.ruby-doc.org/core-1.9.3/String.html#method-i-include-3F">include?</a>. So I decided to do some benchmarking.</p>

<!-- more -->


<p>Ruby has a great module built in that makes benchmarking very simple: <a href="http://www.ruby-doc.org/stdlib-1.9.3/libdoc/benchmark/rdoc/Benchmark.html">Benchmark</a>. A lot of the time I use it to check if something is performant or not, even on the Rails level! In this session, I make use of a very small subset of this module&#8217;s functionality, but if you&#8217;re interested, please be sure to check out the above link to see other options.</p>

<p>Anyways, my goal was to benchmark a simple string pattern check using compiled Regex, interpreted Regex, and the String #include? method. As a result, I wrote the following ruby script:</p>

<figure class='code'><figcaption><span>Code for benchmarking (simple_string_matching_benchmark.rb)</span> <a href='https://beachape.com/downloads/code/ruby/simple_string_matching_benchmark.rb'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="nb">require</span> <span class="s2">&quot;benchmark&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">regex_compiled</span> <span class="o">=</span> <span class="no">Regexp</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;qa&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">regex_compiled</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="s2">&quot;qa&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="no">Benchmark</span><span class="o">.</span><span class="n">bmbm</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span>
</span><span class='line'>  <span class="n">x</span><span class="o">.</span><span class="n">report</span><span class="p">(</span><span class="s2">&quot;1000000 times positive regex&quot;</span><span class="p">){</span><span class="mi">1000000</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span>
</span><span class='line'>    <span class="s2">&quot;someserverqa&quot;</span> <span class="o">=~</span> <span class="sr">/qa/</span> <span class="p">?</span> <span class="s2">&quot;qa&quot;</span> <span class="p">:</span> <span class="s2">&quot;prod&quot;</span>
</span><span class='line'>  <span class="k">end</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">x</span><span class="o">.</span><span class="n">report</span><span class="p">(</span><span class="s2">&quot;1000000 times negative regex&quot;</span><span class="p">){</span><span class="mi">1000000</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span>
</span><span class='line'>    <span class="s2">&quot;someserverprod&quot;</span> <span class="o">=~</span> <span class="sr">/qa/</span> <span class="p">?</span> <span class="s2">&quot;qa&quot;</span> <span class="p">:</span> <span class="s2">&quot;prod&quot;</span>
</span><span class='line'>  <span class="k">end</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">x</span><span class="o">.</span><span class="n">report</span><span class="p">(</span><span class="s2">&quot;1000000 times positive regex compiled&quot;</span><span class="p">){</span><span class="mi">1000000</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">regex_compiled</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="s2">&quot;someserverqa&quot;</span><span class="p">)</span> <span class="p">?</span> <span class="s2">&quot;qa&quot;</span> <span class="p">:</span> <span class="s2">&quot;prod&quot;</span>
</span><span class='line'>  <span class="k">end</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">x</span><span class="o">.</span><span class="n">report</span><span class="p">(</span><span class="s2">&quot;1000000 times negative regex compiled&quot;</span><span class="p">){</span><span class="mi">1000000</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">regex_compiled</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="s2">&quot;someserverprod&quot;</span><span class="p">)</span> <span class="p">?</span> <span class="s2">&quot;qa&quot;</span> <span class="p">:</span> <span class="s2">&quot;prod&quot;</span>
</span><span class='line'>  <span class="k">end</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">x</span><span class="o">.</span><span class="n">report</span><span class="p">(</span><span class="s2">&quot;1000000 times positive #include?&quot;</span><span class="p">){</span><span class="mi">1000000</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span>
</span><span class='line'>    <span class="s2">&quot;someserverqa&quot;</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="s2">&quot;qa&quot;</span><span class="p">)</span> <span class="p">?</span> <span class="s2">&quot;qa&quot;</span> <span class="p">:</span> <span class="s2">&quot;prod&quot;</span>
</span><span class='line'>  <span class="k">end</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">x</span><span class="o">.</span><span class="n">report</span><span class="p">(</span><span class="s2">&quot;1000000 times negative #include?&quot;</span><span class="p">){</span><span class="mi">1000000</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span>
</span><span class='line'>    <span class="s2">&quot;someserverqa&quot;</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="s2">&quot;someserverprod&quot;</span><span class="p">)</span> <span class="p">?</span> <span class="s2">&quot;qa&quot;</span> <span class="p">:</span> <span class="s2">&quot;prod&quot;</span>
</span><span class='line'>  <span class="k">end</span><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note the use of .bmbm, which tells the module that we want to perform a rehearsal run.</p>

<p>The results were as follows:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Rehearsal -------------------------------------------------------------------------
</span><span class='line'>1000000 times positive regex            0.400000   0.000000   0.400000 (  0.398280)
</span><span class='line'>1000000 times negative regex            0.420000   0.000000   0.420000 (  0.424669)
</span><span class='line'>1000000 times positive regex compiled   0.990000   0.020000   1.010000 (  1.005177)
</span><span class='line'>1000000 times negative regex compiled   0.500000   0.000000   0.500000 (  0.496037)
</span><span class='line'>1000000 times positive #include?        0.280000   0.000000   0.280000 (  0.277431)
</span><span class='line'>1000000 times negative #include?        0.240000   0.000000   0.240000 (  0.248257)
</span><span class='line'>---------------------------------------------------------------- total: 2.850000sec
</span><span class='line'>
</span><span class='line'>                                            user     system      total        real
</span><span class='line'>1000000 times positive regex            0.400000   0.000000   0.400000 (  0.408893)
</span><span class='line'>1000000 times negative regex            0.450000   0.000000   0.450000 (  0.447820)
</span><span class='line'>1000000 times positive regex compiled   1.010000   0.000000   1.010000 (  1.009081)
</span><span class='line'>1000000 times negative regex compiled   0.500000   0.000000   0.500000 (  0.502232)
</span><span class='line'>1000000 times positive #include?        0.280000   0.000000   0.280000 (  0.275711)
</span><span class='line'>1000000 times negative #include?        0.250000   0.000000   0.250000 (  0.247974)</span></code></pre></td></tr></table></div></figure>


<h2>Conclusion</h2>

<p>Turned out in the case of simple string presence checking, #include? was faster than everything else by almost half. More surprising was the fact that Regex compiled was even slower than Regex interpreted.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lossy Optimisation for PNG Files]]></title>
    <link href="https://beachape.com/blog/2013/04/06/lossy-optimisation-for-png-files/"/>
    <updated>2013-04-06T16:04:00+09:00</updated>
    <id>https://beachape.com/blog/2013/04/06/lossy-optimisation-for-png-files</id>
    <content type="html"><![CDATA[<p>These days, theres a lot of focus on reducing the load times on your website to make the experience smoother for your users. One way is to make creative use of CSS to style your websites instead of using images. That said, there are times when you have to use images and even the best front-end guys need to reach for images depending on what kind of design they were tasked with implementing.</p>

<p>If you&#8217;re using PNGs, likely you&#8217;re already choosing to save them in a way that optimises them for the internets, but even then there are savings to be had by employing the use of <em>lossy</em> PNG optimisation.</p>

<!-- more -->


<p>On the project that I&#8217;m on at the moment, the front-end guys (for better or worse) went with making heavy, heavy use of images, almost all of them PNG files. I decided to try throwing them into two optimizers <a href="http://pngnq.sourceforge.net/">PNGNQ</a>, and <a href="http://pngquant.org/">pngquant</a> to see what I could get out of them.</p>

<p>Before we begin, I should be clear that this post focuses on OSX users and assumes you have <a href="http://mxcl.github.io/homebrew/">Homebrew</a> already installed and updated (<code>brew update</code>).</p>

<h2>PNGNQ</h2>

<p>First, install the tool by running <code>brew install pngnq</code></p>

<p>Next, navigate to your project folder, back it up (via some kind of version control like Git) and run:</p>

<p><code>find . -type f -name '*.png' -print0 | xargs -0 -P4 pngnq -f -e '.png'</code></p>

<p>The above command will recursively look through your directory for PNG files and send them to pngnq for optimisation. The above command also has <code>-f -e '.png'</code> which means it will override the current PNG files once they are optimised.</p>

<p>After running the above, I noticed around 50% savings in file size across all the PNG files. Quality was around the same, minus for some unsightly dithering on one of our icons (for the record, I also played around with <a href="http://manpages.ubuntu.com/manpages/precise/man1/pngnq.1.html">various pngnq options</a>, but it didn&#8217;t make much difference in terms of alleviating said artifacts)</p>

<h2>PNGquant</h2>

<p>I decided then to give <a href="http://pngquant.org/">pngquant</a> a try to see if I could get better results.</p>

<p>I ran <code>brew install pngquant</code></p>

<p>Then</p>

<p><code>find . -name '*.png' -print0 | xargs -0 -P4 pngquant --ext .png --force</code></p>

<p>I noticed pretty much the same file size savings, but without the unsignhtly artifacts !</p>

<h2>Conclusion</h2>

<p>In my case, PNGquant gave me better results than PNGNQ, but your mileage may vary.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Padrino With Resque-web UI]]></title>
    <link href="https://beachape.com/blog/2013/02/19/padrino-with-resque-web-ui/"/>
    <updated>2013-02-19T17:44:00+09:00</updated>
    <id>https://beachape.com/blog/2013/02/19/padrino-with-resque-web-ui</id>
    <content type="html"><![CDATA[<p>Finally got a chance to play around with Padrino last week to build a <a href="https://github.com/lloydmeta/push_to_devices">Push to Devices notification server</a>, but ran into a bit of an issue trying to get Resque-web / Resque server UI to show up.</p>

<p>Finally ran into <a href="http://d.hatena.ne.jp/hiro_nemu/20120809/1344476207">this great blog entry</a>. It&#8217;s written in Japanese so I decided to create a short version in English here in case anyone else runs into the same issue</p>

<p>If you already have the following:</p>

<figure class='code'><figcaption><span>config.ru</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># snip</span>
</span><span class='line'><span class="n">run</span> <span class="ss">Rack</span><span class="p">:</span><span class="ss">:URLMap</span><span class="o">.</span><span class="n">new</span> <span class="p">\</span>
</span><span class='line'>  <span class="s2">&quot;/&quot;</span>       <span class="o">=&gt;</span> <span class="no">Padrino</span><span class="o">.</span><span class="n">application</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;/resque&quot;</span> <span class="o">=&gt;</span> <span class="ss">Resque</span><span class="p">:</span><span class="ss">:Server</span><span class="o">.</span><span class="n">new</span>
</span></code></pre></td></tr></table></div></figure>


<p>in your <code>config.ru</code> and yet don&#8217;t see anything when you hit /resque on your local environment, run your server with</p>

<p><code>$rackup -p 3000</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NodeJS on Heroku With NewRelic]]></title>
    <link href="https://beachape.com/blog/2013/02/04/nodejs-on-heroku-with-newrelic/"/>
    <updated>2013-02-04T12:31:00+09:00</updated>
    <id>https://beachape.com/blog/2013/02/04/nodejs-on-heroku-with-newrelic</id>
    <content type="html"><![CDATA[<p><em>TL;DR</em> If you&#8217;re using NodeJS and want to monitor using NewRelic, follow <a href="https://npmjs.org/package/newrelic">these steps</a>. Additionally if you want to do this on Heroku using the NewRelic account you added through the Heroku API, make sure your <a href="https://github.com/lloydmeta/Node_notifications/blob/master/package.json">package.json has &#8220;newrelic&#8221;</a> and <a href="https://github.com/lloydmeta/Node_notifications/blob/master/newrelic.js">your newrelic.js points to the NEW_RELIC_LICENSE_KEY environment variable</a>.</p>

<p>Last Friday, I set up a NodeJS push notification server for my current project. Essentially it was mostly inspired by this <a href="http://blog.joshsoftware.com/2012/01/30/push-notifications-using-express-js-and-socket-io/">excellent blog post</a>, but I updated it to use the latest NPM packages and to support sending notifications to all of a user&#8217;s open sockets as well as cleaning up on disconnect. That&#8217;s another story for another time.</p>

<p>This blog post will cover how to get NodeJS monitoring with NewRelic <strong>on</strong> Heroku.</p>

<!-- more -->


<p>Some veterans may know that for a while, NewRelic didn&#8217;t support NodeJS. <a href="https://npmjs.org/package/newrelic">That has now changed</a>.</p>

<p>All you really need to do is define your dependencies:</p>

<figure class='code'><figcaption><span>Sample NewRelic package file (node_js_newrelic_package.json)</span> <a href='https://beachape.com/downloads/code/json/node_js_newrelic_package.json'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;app&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;description&quot;</span><span class="p">:</span> <span class="s2">&quot;&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;version&quot;</span><span class="p">:</span> <span class="s2">&quot;0.0.1&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;private&quot;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;author&quot;</span><span class="p">:</span> <span class="s2">&quot;Lloyd Meta github.com/lloydmeta&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;dependencies&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nt">&quot;express&quot;</span><span class="p">:</span> <span class="s2">&quot;&gt;=3.0&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;socket.io&quot;</span><span class="p">:</span> <span class="s2">&quot;&gt;=0.9&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;async&quot;</span><span class="p">:</span> <span class="s2">&quot;&gt;=0.1.22&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;newrelic&quot;</span><span class="p">:</span> <span class="s2">&quot;&gt;=0.9&quot;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nt">&quot;engines&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nt">&quot;node&quot;</span><span class="p">:</span> <span class="s2">&quot;&gt;=0.8&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;npm&quot;</span><span class="p">:</span> <span class="s2">&quot;&gt;= 1.1&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Run <code>npm install</code> and add <code>require('newrelic');</code> to your <code>server.js</code> (or whatever you named your NodeJS main file).</p>

<p>Next, copy <code>newrelic.js</code> from <code>node_modules/newrelic</code> into the root directory of your application. Open it up, and as the instructions say, add your licence key for NewRelic into this file. That said, for Heroku users who opted in for the free NewRelic account via Heroku, you want to do this:</p>

<figure class='code'><figcaption><span>newrelic.js (newrelic.js)</span> <a href='https://beachape.com/downloads/code/javascript/newrelic.js'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * New Relic agent configuration.</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> * See lib/config.defaults.js in the agent distribution for a more complete</span>
</span><span class='line'><span class="cm"> * description of configuration variables and their potential values.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="nx">exports</span><span class="p">.</span><span class="nx">config</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">   * Array of application names.</span>
</span><span class='line'><span class="cm">   */</span>
</span><span class='line'>  <span class="nx">app_name</span> <span class="o">:</span> <span class="p">[</span><span class="s1">&#39;Notifications&#39;</span><span class="p">],</span>
</span><span class='line'>  <span class="cm">/**</span>
</span><span class='line'><span class="cm">   * Your New Relic license key.</span>
</span><span class='line'><span class="cm">   * Make sureto set NEW_RELIC_LICENSE_KEY as this env variable</span>
</span><span class='line'><span class="cm">   */</span>
</span><span class='line'>  <span class="nx">license_key</span> <span class="o">:</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">NEW_RELIC_LICENSE_KEY</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">logging</span> <span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * Level at which to log. &#39;trace&#39; is most useful to New Relic when diagnosing</span>
</span><span class='line'><span class="cm">     * issues with the agent, &#39;info&#39; and higher will impose the least overhead on</span>
</span><span class='line'><span class="cm">     * production applications.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="nx">level</span> <span class="o">:</span> <span class="s1">&#39;trace&#39;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>So that you can point to the environment variable that Heroku set up for you when you added NewRelic to your account.</p>

<p>Thats it !</p>

<p>If you have any suggestions, contributions or issues, please feel free to leave a comment.</p>
]]></content>
  </entry>
  
</feed>
